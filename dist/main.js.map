{"version":3,"file":"main.js","mappings":"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","sources":["webpack://saml-to/./api/auth-sls-rest-api/api.ts","webpack://saml-to/./api/auth-sls-rest-api/base.ts","webpack://saml-to/./api/auth-sls-rest-api/common.ts","webpack://saml-to/./api/auth-sls-rest-api/configuration.ts","webpack://saml-to/./api/auth-sls-rest-api/index.ts","webpack://saml-to/./api/github-sls-rest-api/api.ts","webpack://saml-to/./api/github-sls-rest-api/base.ts","webpack://saml-to/./api/github-sls-rest-api/common.ts","webpack://saml-to/./api/github-sls-rest-api/configuration.ts","webpack://saml-to/./api/github-sls-rest-api/index.ts","webpack://saml-to/./cli/index.ts","webpack://saml-to/./src/command.ts","webpack://saml-to/./src/commands/add.ts","webpack://saml-to/./src/commands/assume.ts","webpack://saml-to/./src/commands/init.ts","webpack://saml-to/./src/commands/login.ts","webpack://saml-to/./src/commands/set.ts","webpack://saml-to/./src/commands/show.ts","webpack://saml-to/./src/helpers/aws/awsHelper.ts","webpack://saml-to/./src/helpers/aws/awsSsoHelper.ts","webpack://saml-to/./src/helpers/configHelper.ts","webpack://saml-to/./src/helpers/genericHelper.ts","webpack://saml-to/./src/helpers/githubHelper.ts","webpack://saml-to/./src/helpers/orgHelper.ts","webpack://saml-to/./src/messages.ts","webpack://saml-to/./src/stores/scms.ts","webpack://saml-to/external commonjs \"@aws-sdk/client-sts\"","webpack://saml-to/external commonjs \"@octokit/request-error\"","webpack://saml-to/external commonjs \"@octokit/rest\"","webpack://saml-to/external commonjs \"axios\"","webpack://saml-to/external commonjs \"inquirer\"","webpack://saml-to/external commonjs \"js-yaml\"","webpack://saml-to/external commonjs \"loglevel\"","webpack://saml-to/external commonjs \"moment\"","webpack://saml-to/external commonjs \"open\"","webpack://saml-to/external commonjs \"yargs\"","webpack://saml-to/external commonjs \"yargs/helpers\"","webpack://saml-to/external node-commonjs \"fs\"","webpack://saml-to/external node-commonjs \"os\"","webpack://saml-to/external node-commonjs \"path\"","webpack://saml-to/webpack/bootstrap","webpack://saml-to/webpack/startup"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * auth-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.2-2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AuthSlsRestApiBaseEventGithubLoginTokenEvent1\n */\nexport interface AuthSlsRestApiBaseEventGithubLoginTokenEvent1 {\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiBaseEventGithubLoginTokenEvent1\n     */\n    'version': AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiBaseEventGithubLoginTokenEvent1\n     */\n    'type': AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum {\n    NUMBER_1 = 1\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum {\n    GithubLoginTokenEvent = 'GithubLoginTokenEvent'\n}\n\n/**\n * \n * @export\n * @interface AuthSlsRestApiBaseJwtPayload\n */\nexport interface AuthSlsRestApiBaseJwtPayload {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'jti': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'iat': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'nbf'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'exp': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'aud': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'sub': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiBaseJwtPayload\n     */\n    'iss': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiEmailLoginRequest\n */\nexport interface AuthSlsRestApiEmailLoginRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiEmailLoginRequest\n     */\n    'remember'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginRequest\n     */\n    'code'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginRequest\n     */\n    'email': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiEmailLoginRequestAllOf\n */\nexport interface AuthSlsRestApiEmailLoginRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginRequestAllOf\n     */\n    'code'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginRequestAllOf\n     */\n    'email': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiEmailLoginResponse\n */\nexport interface AuthSlsRestApiEmailLoginResponse {\n    /**\n     * \n     * @type {AuthSlsRestApiJwt}\n     * @memberof AuthSlsRestApiEmailLoginResponse\n     */\n    'payload'?: AuthSlsRestApiJwt;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginResponse\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginResponse\n     */\n    'verificationSentTo'?: string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiEmailLoginResponseAllOf\n */\nexport interface AuthSlsRestApiEmailLoginResponseAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEmailLoginResponseAllOf\n     */\n    'verificationSentTo'?: string;\n}\n/**\n * This file was automatically generated by joi-to-typescript Do not modify this file manually\n * @export\n * @interface AuthSlsRestApiEncryptedField\n */\nexport interface AuthSlsRestApiEncryptedField {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEncryptedField\n     */\n    'encryptedValue': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiEncryptedField\n     */\n    'keyId': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiErrorResponse\n */\nexport interface AuthSlsRestApiErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiErrorResponse\n     */\n    'message': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiErrorResponse\n     */\n    'traceId': string;\n    /**\n     * \n     * @type {AuthSlsRestApiErrorResponseTracking}\n     * @memberof AuthSlsRestApiErrorResponse\n     */\n    'tracking': AuthSlsRestApiErrorResponseTracking;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof AuthSlsRestApiErrorResponse\n     */\n    'context'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiErrorResponseTracking\n */\nexport interface AuthSlsRestApiErrorResponseTracking {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiErrorResponseTracking\n     */\n    'method': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiErrorResponseTracking\n     */\n    'path': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiErrorResponseTracking\n     */\n    'version': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubJwtRequest\n */\nexport interface AuthSlsRestApiGithubJwtRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubJwtRequest\n     */\n    'remember'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubJwtRequest\n     */\n    'state': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubJwtRequest\n     */\n    'code': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubJwtRequestAllOf\n */\nexport interface AuthSlsRestApiGithubJwtRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubJwtRequestAllOf\n     */\n    'state': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubJwtRequestAllOf\n     */\n    'code': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubJwtResponse\n */\nexport interface AuthSlsRestApiGithubJwtResponse {\n    /**\n     * \n     * @type {AuthSlsRestApiJwt}\n     * @memberof AuthSlsRestApiGithubJwtResponse\n     */\n    'payload'?: AuthSlsRestApiJwt;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubJwtResponse\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {AuthSlsRestApiGithubUserResponse}\n     * @memberof AuthSlsRestApiGithubJwtResponse\n     */\n    'user': AuthSlsRestApiGithubUserResponse;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubJwtResponseAllOf\n */\nexport interface AuthSlsRestApiGithubJwtResponseAllOf {\n    /**\n     * \n     * @type {AuthSlsRestApiGithubUserResponse}\n     * @memberof AuthSlsRestApiGithubJwtResponseAllOf\n     */\n    'user': AuthSlsRestApiGithubUserResponse;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubLogin\n */\nexport interface AuthSlsRestApiGithubLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'clientId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {AuthSlsRestApiEncryptedField}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'encryptedToken'?: AuthSlsRestApiEncryptedField;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'expires'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'login'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'oauthRedirectUri': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'pk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'redirectUri': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'remember'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'scope': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'sk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLogin\n     */\n    'state': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubLoginRequest\n */\nexport interface AuthSlsRestApiGithubLoginRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubLoginRequest\n     */\n    'remember'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginRequest\n     */\n    'redirectUri': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginRequest\n     */\n    'scope'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginRequest\n     */\n    'clientId': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubLoginResponse\n */\nexport interface AuthSlsRestApiGithubLoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginResponse\n     */\n    'expires'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginResponse\n     */\n    'oauthRedirectUri'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginResponse\n     */\n    'state': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginResponse\n     */\n    'clientId': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubLoginTokenEventV1\n */\nexport interface AuthSlsRestApiGithubLoginTokenEventV1 {\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'version': AuthSlsRestApiGithubLoginTokenEventV1VersionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'type': AuthSlsRestApiGithubLoginTokenEventV1TypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'deleted'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'login': string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiGithubLoginTokenEventV1VersionEnum {\n    NUMBER_1 = 1\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiGithubLoginTokenEventV1TypeEnum {\n    GithubLoginTokenEvent = 'GithubLoginTokenEvent'\n}\n\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubLoginTokenEventV1AllOf\n */\nexport interface AuthSlsRestApiGithubLoginTokenEventV1AllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf\n     */\n    'deleted'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf\n     */\n    'login': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubOauthDetail\n */\nexport interface AuthSlsRestApiGithubOauthDetail {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubOauthDetail\n     */\n    'clientId': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiGithubUserResponse\n */\nexport interface AuthSlsRestApiGithubUserResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'redirectUri'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'remember'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'token': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'avatarUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'email': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiGithubUserResponse\n     */\n    'login': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiHealthResponse\n */\nexport interface AuthSlsRestApiHealthResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiHealthResponse\n     */\n    'version': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiHealthResponse\n     */\n    'now': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiHealthResponse\n     */\n    'healty': boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiHealthResponse\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiJwk\n */\nexport interface AuthSlsRestApiJwk {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwk\n     */\n    'kty': AuthSlsRestApiJwkKtyEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwk\n     */\n    'crv': AuthSlsRestApiJwkCrvEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwk\n     */\n    'y': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwk\n     */\n    'd'?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiJwkKtyEnum {\n    Ec = 'EC'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AuthSlsRestApiJwkCrvEnum {\n    P256 = 'P-256'\n}\n\n/**\n * \n * @export\n * @interface AuthSlsRestApiJwksResponse\n */\nexport interface AuthSlsRestApiJwksResponse {\n    /**\n     * \n     * @type {Array<AuthSlsRestApiJwk>}\n     * @memberof AuthSlsRestApiJwksResponse\n     */\n    'keys': Array<AuthSlsRestApiJwk>;\n}\n/**\n * This file was automatically generated by joi-to-typescript Do not modify this file manually\n * @export\n * @interface AuthSlsRestApiJwt\n */\nexport interface AuthSlsRestApiJwt {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'aud': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'exp': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'expires': number;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'iat': number;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'iss': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'jti': string;\n    /**\n     * \n     * @type {number}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'nbf'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'pk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'scopes': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'sk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwt\n     */\n    'sub': string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiJwtRequest\n */\nexport interface AuthSlsRestApiJwtRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof AuthSlsRestApiJwtRequest\n     */\n    'remember'?: boolean;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiJwtResponse\n */\nexport interface AuthSlsRestApiJwtResponse {\n    /**\n     * \n     * @type {AuthSlsRestApiJwt}\n     * @memberof AuthSlsRestApiJwtResponse\n     */\n    'payload'?: AuthSlsRestApiJwt;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiJwtResponse\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface AuthSlsRestApiTokenRequest\n */\nexport interface AuthSlsRestApiTokenRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof AuthSlsRestApiTokenRequest\n     */\n    'token': string;\n}\n\n/**\n * HealthApi - axios parameter creator\n * @export\n */\nexport const HealthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/health`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * HealthApi - functional programming interface\n * @export\n */\nexport const HealthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiHealthResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * HealthApi - factory interface\n * @export\n */\nexport const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = HealthApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(options?: any): AxiosPromise<AuthSlsRestApiHealthResponse> {\n            return localVarFp.get(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * HealthApi - object-oriented interface\n * @export\n * @class HealthApi\n * @extends {BaseAPI}\n */\nexport class HealthApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HealthApi\n     */\n    public get(options?: AxiosRequestConfig) {\n        return HealthApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * JwtApi - axios parameter creator\n * @export\n */\nexport const JwtApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        certs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/jwts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayload: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/jwts/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh: async (authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined\n            assertParamExists('refresh', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest)\n            const localVarPath = `/api/v1/jwts/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiTokenRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify: async (authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined\n            assertParamExists('verify', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest)\n            const localVarPath = `/api/v1/jwts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiTokenRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * JwtApi - functional programming interface\n * @export\n */\nexport const JwtApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = JwtApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async certs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwksResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.certs(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPayload(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiBaseJwtPayload>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayload(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(authSlsRestApiTokenRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiBaseJwtPayload>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(authSlsRestApiTokenRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * JwtApi - factory interface\n * @export\n */\nexport const JwtApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = JwtApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        certs(options?: any): AxiosPromise<AuthSlsRestApiJwksResponse> {\n            return localVarFp.certs(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPayload(options?: any): AxiosPromise<AuthSlsRestApiBaseJwtPayload> {\n            return localVarFp.getPayload(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {\n            return localVarFp.refresh(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: any): AxiosPromise<AuthSlsRestApiBaseJwtPayload> {\n            return localVarFp.verify(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * JwtApi - object-oriented interface\n * @export\n * @class JwtApi\n * @extends {BaseAPI}\n */\nexport class JwtApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtApi\n     */\n    public certs(options?: AxiosRequestConfig) {\n        return JwtApiFp(this.configuration).certs(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtApi\n     */\n    public getPayload(options?: AxiosRequestConfig) {\n        return JwtApiFp(this.configuration).getPayload(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtApi\n     */\n    public refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig) {\n        return JwtApiFp(this.configuration).refresh(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtApi\n     */\n    public verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig) {\n        return JwtApiFp(this.configuration).verify(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * JwtEmailApi - axios parameter creator\n * @export\n */\nexport const JwtEmailApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginWithEmail: async (authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authSlsRestApiEmailLoginRequest' is not null or undefined\n            assertParamExists('loginWithEmail', 'authSlsRestApiEmailLoginRequest', authSlsRestApiEmailLoginRequest)\n            const localVarPath = `/api/v1/jwts/email`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiEmailLoginRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * JwtEmailApi - functional programming interface\n * @export\n */\nexport const JwtEmailApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = JwtEmailApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithEmail(authSlsRestApiEmailLoginRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * JwtEmailApi - factory interface\n * @export\n */\nexport const JwtEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = JwtEmailApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {\n            return localVarFp.loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * JwtEmailApi - object-oriented interface\n * @export\n * @class JwtEmailApi\n * @extends {BaseAPI}\n */\nexport class JwtEmailApi extends BaseAPI {\n    /**\n     * \n     * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtEmailApi\n     */\n    public loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: AxiosRequestConfig) {\n        return JwtEmailApiFp(this.configuration).loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * JwtGithubApi - axios parameter creator\n * @export\n */\nexport const JwtGithubApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createLogin: async (authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authSlsRestApiGithubLoginRequest' is not null or undefined\n            assertParamExists('createLogin', 'authSlsRestApiGithubLoginRequest', authSlsRestApiGithubLoginRequest)\n            const localVarPath = `/api/v1/jwts/github`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiGithubLoginRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuthenticatedUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/jwts/github/me`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOauthDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/jwts/github`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        oauthCallback: async (authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'authSlsRestApiGithubJwtRequest' is not null or undefined\n            assertParamExists('oauthCallback', 'authSlsRestApiGithubJwtRequest', authSlsRestApiGithubJwtRequest)\n            const localVarPath = `/api/v1/jwts/github`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiGithubJwtRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * JwtGithubApi - functional programming interface\n * @export\n */\nexport const JwtGithubApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = JwtGithubApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubLoginResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createLogin(authSlsRestApiGithubLoginRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getAuthenticatedUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubUserResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUser(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOauthDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubOauthDetail>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOauthDetail(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(authSlsRestApiGithubJwtRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * JwtGithubApi - factory interface\n * @export\n */\nexport const JwtGithubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = JwtGithubApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: any): AxiosPromise<AuthSlsRestApiGithubLoginResponse> {\n            return localVarFp.createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getAuthenticatedUser(options?: any): AxiosPromise<AuthSlsRestApiGithubUserResponse> {\n            return localVarFp.getAuthenticatedUser(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOauthDetail(options?: any): AxiosPromise<AuthSlsRestApiGithubOauthDetail> {\n            return localVarFp.getOauthDetail(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {\n            return localVarFp.oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * JwtGithubApi - object-oriented interface\n * @export\n * @class JwtGithubApi\n * @extends {BaseAPI}\n */\nexport class JwtGithubApi extends BaseAPI {\n    /**\n     * \n     * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtGithubApi\n     */\n    public createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: AxiosRequestConfig) {\n        return JwtGithubApiFp(this.configuration).createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtGithubApi\n     */\n    public getAuthenticatedUser(options?: AxiosRequestConfig) {\n        return JwtGithubApiFp(this.configuration).getAuthenticatedUser(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtGithubApi\n     */\n    public getOauthDetail(options?: AxiosRequestConfig) {\n        return JwtGithubApiFp(this.configuration).getOauthDetail(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JwtGithubApi\n     */\n    public oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: AxiosRequestConfig) {\n        return JwtGithubApiFp(this.configuration).oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * auth-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.2-2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"https://sso.saml.to/auth\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * auth-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.2-2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * auth-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.2-2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * auth-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.2-2\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * github-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.3-0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n */\nexport interface GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1 {\n    /**\n     * \n     * @type {GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'version': GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum;\n    /**\n     * \n     * @type {GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'type': GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'deleted'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'token'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1\n     */\n    'login': string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum {\n    GithubLoginTokenEvent = 'GithubLoginTokenEvent'\n}\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum {\n    NUMBER_1 = 1\n}\n\n/**\n * \n * @export\n * @interface GithubSlsRestApiAwsAssumeSdkOptions\n */\nexport interface GithubSlsRestApiAwsAssumeSdkOptions {\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiAwsAssumeSdkOptions\n     */\n    'DurationSeconds': number;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiAwsAssumeSdkOptions\n     */\n    'RoleArn': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiAwsAssumeSdkOptions\n     */\n    'PrincipalArn': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiConfigBase20220101\n */\nexport interface GithubSlsRestApiConfigBase20220101 {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiConfigBase20220101\n     */\n    'sha'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiConfigBase20220101\n     */\n    'version': GithubSlsRestApiConfigBase20220101VersionEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum GithubSlsRestApiConfigBase20220101VersionEnum {\n    _20220101 = '20220101'\n}\n\n/**\n * \n * @export\n * @interface GithubSlsRestApiConfigV20220101\n */\nexport interface GithubSlsRestApiConfigV20220101 {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiConfigV20220101\n     */\n    'sha'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiConfigV20220101\n     */\n    'version': GithubSlsRestApiConfigV20220101VersionEnum;\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiPermissionV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101\n     */\n    'permissions'?: { [key: string]: GithubSlsRestApiPermissionV1; };\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiProviderV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101\n     */\n    'providers'?: { [key: string]: GithubSlsRestApiProviderV1; };\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiVariableV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101\n     */\n    'variables'?: { [key: string]: GithubSlsRestApiVariableV1; };\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum GithubSlsRestApiConfigV20220101VersionEnum {\n    _20220101 = '20220101'\n}\n\n/**\n * \n * @export\n * @interface GithubSlsRestApiConfigV20220101AllOf\n */\nexport interface GithubSlsRestApiConfigV20220101AllOf {\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiPermissionV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101AllOf\n     */\n    'permissions'?: { [key: string]: GithubSlsRestApiPermissionV1; };\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiProviderV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101AllOf\n     */\n    'providers'?: { [key: string]: GithubSlsRestApiProviderV1; };\n    /**\n     * \n     * @type {{ [key: string]: GithubSlsRestApiVariableV1; }}\n     * @memberof GithubSlsRestApiConfigV20220101AllOf\n     */\n    'variables'?: { [key: string]: GithubSlsRestApiVariableV1; };\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiEncryptRequest\n */\nexport interface GithubSlsRestApiEncryptRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiEncryptRequest\n     */\n    'value': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiEncryptResponse\n */\nexport interface GithubSlsRestApiEncryptResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiEncryptResponse\n     */\n    'encryptedValue': string;\n}\n/**\n * This file was automatically generated by joi-to-typescript Do not modify this file manually\n * @export\n * @interface GithubSlsRestApiEncryptedField\n */\nexport interface GithubSlsRestApiEncryptedField {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiEncryptedField\n     */\n    'encryptedValue': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiEncryptedField\n     */\n    'keyId': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiErrorResponse\n */\nexport interface GithubSlsRestApiErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiErrorResponse\n     */\n    'message': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiErrorResponse\n     */\n    'traceId': string;\n    /**\n     * \n     * @type {GithubSlsRestApiErrorResponseTracking}\n     * @memberof GithubSlsRestApiErrorResponse\n     */\n    'tracking': GithubSlsRestApiErrorResponseTracking;\n    /**\n     * \n     * @type {{ [key: string]: any; }}\n     * @memberof GithubSlsRestApiErrorResponse\n     */\n    'context'?: { [key: string]: any; };\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiErrorResponseTracking\n */\nexport interface GithubSlsRestApiErrorResponseTracking {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiErrorResponseTracking\n     */\n    'method': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiErrorResponseTracking\n     */\n    'path': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiErrorResponseTracking\n     */\n    'version': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiHealthResponse\n */\nexport interface GithubSlsRestApiHealthResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiHealthResponse\n     */\n    'version': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiHealthResponse\n     */\n    'now': string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GithubSlsRestApiHealthResponse\n     */\n    'healty': boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiHealthResponse\n     */\n    'name': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiListResponseLoginResponse\n */\nexport interface GithubSlsRestApiListResponseLoginResponse {\n    /**\n     * \n     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}\n     * @memberof GithubSlsRestApiListResponseLoginResponse\n     */\n    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseLoginResponse\n     */\n    'total': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseLoginResponse\n     */\n    'count': number;\n    /**\n     * \n     * @type {Array<GithubSlsRestApiLoginResponse>}\n     * @memberof GithubSlsRestApiListResponseLoginResponse\n     */\n    'results': Array<GithubSlsRestApiLoginResponse>;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiListResponseOrgRepoResponse\n */\nexport interface GithubSlsRestApiListResponseOrgRepoResponse {\n    /**\n     * \n     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponse\n     */\n    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponse\n     */\n    'total': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponse\n     */\n    'count': number;\n    /**\n     * \n     * @type {Array<GithubSlsRestApiOrgRepoResponse>}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponse\n     */\n    'results': Array<GithubSlsRestApiOrgRepoResponse>;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiListResponseOrgRepoResponseNext\n */\nexport interface GithubSlsRestApiListResponseOrgRepoResponseNext {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponseNext\n     */\n    'sk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiListResponseOrgRepoResponseNext\n     */\n    'pk': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiListResponseRoleResponse\n */\nexport interface GithubSlsRestApiListResponseRoleResponse {\n    /**\n     * \n     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}\n     * @memberof GithubSlsRestApiListResponseRoleResponse\n     */\n    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseRoleResponse\n     */\n    'total': number;\n    /**\n     * \n     * @type {number}\n     * @memberof GithubSlsRestApiListResponseRoleResponse\n     */\n    'count': number;\n    /**\n     * \n     * @type {Array<GithubSlsRestApiRoleResponse>}\n     * @memberof GithubSlsRestApiListResponseRoleResponse\n     */\n    'results': Array<GithubSlsRestApiRoleResponse>;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiLoginResponse\n */\nexport interface GithubSlsRestApiLoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponse\n     */\n    'provider': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponse\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponse\n     */\n    'org': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponse\n     */\n    'login': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiLoginResponseContainer\n */\nexport interface GithubSlsRestApiLoginResponseContainer {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponseContainer\n     */\n    'browserUri': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponseContainer\n     */\n    'provider': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponseContainer\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginResponseContainer\n     */\n    'org': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiLoginToken\n */\nexport interface GithubSlsRestApiLoginToken {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {GithubSlsRestApiEncryptedField}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'encryptedToken': GithubSlsRestApiEncryptedField;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'login': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'namespace': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'pk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'scopes'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiLoginToken\n     */\n    'sk': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiMetadataResponse\n */\nexport interface GithubSlsRestApiMetadataResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiMetadataResponse\n     */\n    'certificate': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiMetadataResponse\n     */\n    'logoutUrl': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiMetadataResponse\n     */\n    'loginUrl': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiMetadataResponse\n     */\n    'entityId': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiMetadataResponse\n     */\n    'metadataXml': string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport enum GithubSlsRestApiNameIdFormatV1 {\n    Id = 'id',\n    Login = 'login',\n    Email = 'email',\n    EmailV2 = 'emailV2'\n}\n\n/**\n * This file was automatically generated by joi-to-typescript Do not modify this file manually\n * @export\n * @interface GithubSlsRestApiOrgRepo\n */\nexport interface GithubSlsRestApiOrgRepo {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'baseUrl': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'configSha'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'org': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'pk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepo\n     */\n    'sk': string;\n}\n/**\n * This file was automatically generated by joi-to-typescript Do not modify this file manually\n * @export\n * @interface GithubSlsRestApiOrgRepoLogin\n */\nexport interface GithubSlsRestApiOrgRepoLogin {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoLogin\n     */\n    'login': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoLogin\n     */\n    'org': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoLogin\n     */\n    'pk': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoLogin\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoLogin\n     */\n    'sk': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiOrgRepoResponse\n */\nexport interface GithubSlsRestApiOrgRepoResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoResponse\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiOrgRepoResponse\n     */\n    'org': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiPermissionV1\n */\nexport interface GithubSlsRestApiPermissionV1 {\n    /**\n     * \n     * @type {Array<GithubSlsRestApiRolesV1>}\n     * @memberof GithubSlsRestApiPermissionV1\n     */\n    'roles'?: Array<GithubSlsRestApiRolesV1>;\n    /**\n     * \n     * @type {GithubSlsRestApiUsersV1}\n     * @memberof GithubSlsRestApiPermissionV1\n     */\n    'users'?: GithubSlsRestApiUsersV1;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiProviderV1\n */\nexport interface GithubSlsRestApiProviderV1 {\n    /**\n     * \n     * @type {GithubSlsRestApiProvisioningV1}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'provisioning'?: GithubSlsRestApiProvisioningV1;\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'attributes'?: { [key: string]: string; };\n    /**\n     * \n     * @type {GithubSlsRestApiNameIdFormatV1}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'nameIdFormat'?: GithubSlsRestApiNameIdFormatV1;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'nameId'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'loginUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'acsUrl'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiProviderV1\n     */\n    'entityId'?: string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiProvisioningV1\n */\nexport interface GithubSlsRestApiProvisioningV1 {\n    /**\n     * \n     * @type {GithubSlsRestApiScimV1}\n     * @memberof GithubSlsRestApiProvisioningV1\n     */\n    'scim'?: GithubSlsRestApiScimV1;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiRoleResponse\n */\nexport interface GithubSlsRestApiRoleResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRoleResponse\n     */\n    'role': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRoleResponse\n     */\n    'provider': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRoleResponse\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRoleResponse\n     */\n    'org': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRoleResponse\n     */\n    'login': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiRolesV1\n */\nexport interface GithubSlsRestApiRolesV1 {\n    /**\n     * \n     * @type {GithubSlsRestApiUsersV1}\n     * @memberof GithubSlsRestApiRolesV1\n     */\n    'users'?: GithubSlsRestApiUsersV1;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiRolesV1\n     */\n    'name'?: string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiSamlResponseContainer\n */\nexport interface GithubSlsRestApiSamlResponseContainer {\n    /**\n     * \n     * @type {GithubSlsRestApiAwsAssumeSdkOptions}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'sdkOptions'?: GithubSlsRestApiAwsAssumeSdkOptions;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'browserUri'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'role'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'provider': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'repo': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'org': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'samlResponse': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'relayState': string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiSamlResponseContainer\n     */\n    'recipient': string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiScimV1\n */\nexport interface GithubSlsRestApiScimV1 {\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiScimV1\n     */\n    'encryptedToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GithubSlsRestApiScimV1\n     */\n    'endpoint'?: string;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiUsersV1\n */\nexport interface GithubSlsRestApiUsersV1 {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof GithubSlsRestApiUsersV1\n     */\n    'github'?: Array<string>;\n}\n/**\n * \n * @export\n * @interface GithubSlsRestApiVariableV1\n */\nexport interface GithubSlsRestApiVariableV1 {\n}\n\n/**\n * HealthApi - axios parameter creator\n * @export\n */\nexport const HealthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/health`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * HealthApi - functional programming interface\n * @export\n */\nexport const HealthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiHealthResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * HealthApi - factory interface\n * @export\n */\nexport const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = HealthApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        get(options?: any): AxiosPromise<GithubSlsRestApiHealthResponse> {\n            return localVarFp.get(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * HealthApi - object-oriented interface\n * @export\n * @class HealthApi\n * @extends {BaseAPI}\n */\nexport class HealthApi extends BaseAPI {\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof HealthApi\n     */\n    public get(options?: AxiosRequestConfig) {\n        return HealthApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * IDPApi - axios parameter creator\n * @export\n */\nexport const IDPApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} role \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assumeRole: async (role: string, org?: string, provider?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'role' is not null or undefined\n            assertParamExists('assumeRole', 'role', role)\n            const localVarPath = `/api/v1/idp/roles/{role}/assume`\n                .replace(`{${\"role\"}}`, encodeURIComponent(String(role)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (org !== undefined) {\n                localVarQueryParameter['org'] = org;\n            }\n\n            if (provider !== undefined) {\n                localVarQueryParameter['provider'] = provider;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        encrypt: async (org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'org' is not null or undefined\n            assertParamExists('encrypt', 'org', org)\n            // verify required parameter 'githubSlsRestApiEncryptRequest' is not null or undefined\n            assertParamExists('encrypt', 'githubSlsRestApiEncryptRequest', githubSlsRestApiEncryptRequest)\n            const localVarPath = `/api/v1/idp/orgs/{org}/encrypt`\n                .replace(`{${\"org\"}}`, encodeURIComponent(String(org)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(githubSlsRestApiEncryptRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {boolean} [raw] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrgConfig: async (org: string, raw?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'org' is not null or undefined\n            assertParamExists('getOrgConfig', 'org', org)\n            const localVarPath = `/api/v1/idp/orgs/{org}/config`\n                .replace(`{${\"org\"}}`, encodeURIComponent(String(org)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (raw !== undefined) {\n                localVarQueryParameter['raw'] = raw;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrgMetadata: async (org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'org' is not null or undefined\n            assertParamExists('getOrgMetadata', 'org', org)\n            const localVarPath = `/api/v1/idp/orgs/{org}/metadata`\n                .replace(`{${\"org\"}}`, encodeURIComponent(String(org)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listLogins: async (org?: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/idp/logins`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (org !== undefined) {\n                localVarQueryParameter['org'] = org;\n            }\n\n            if (refresh !== undefined) {\n                localVarQueryParameter['refresh'] = refresh;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrgRepos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/idp/orgs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: async (org?: string, provider?: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/idp/roles`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (org !== undefined) {\n                localVarQueryParameter['org'] = org;\n            }\n\n            if (provider !== undefined) {\n                localVarQueryParameter['provider'] = provider;\n            }\n\n            if (refresh !== undefined) {\n                localVarQueryParameter['refresh'] = refresh;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} provider \n         * @param {string} [org] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        providerLogin: async (provider: string, org?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'provider' is not null or undefined\n            assertParamExists('providerLogin', 'provider', provider)\n            const localVarPath = `/api/v1/idp/logins/{provider}/login`\n                .replace(`{${\"provider\"}}`, encodeURIComponent(String(provider)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (org !== undefined) {\n                localVarQueryParameter['org'] = org;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {string} repo \n         * @param {boolean} [force] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setOrgAndRepo: async (org: string, repo: string, force?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'org' is not null or undefined\n            assertParamExists('setOrgAndRepo', 'org', org)\n            // verify required parameter 'repo' is not null or undefined\n            assertParamExists('setOrgAndRepo', 'repo', repo)\n            const localVarPath = `/api/v1/idp/orgs/{org}/repos/{repo}`\n                .replace(`{${\"org\"}}`, encodeURIComponent(String(org)))\n                .replace(`{${\"repo\"}}`, encodeURIComponent(String(repo)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication jwt required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (force !== undefined) {\n                localVarQueryParameter['force'] = force;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * IDPApi - functional programming interface\n * @export\n */\nexport const IDPApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = IDPApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @param {string} role \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async assumeRole(role: string, org?: string, provider?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiSamlResponseContainer>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.assumeRole(role, org, provider, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiEncryptResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.encrypt(org, githubSlsRestApiEncryptRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {boolean} [raw] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrgConfig(org: string, raw?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiConfigV20220101>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgConfig(org, raw, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getOrgMetadata(org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiMetadataResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgMetadata(org, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listLogins(org?: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseLoginResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listLogins(org, refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listOrgRepos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseOrgRepoResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgRepos(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listRoles(org?: string, provider?: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseRoleResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(org, provider, refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} provider \n         * @param {string} [org] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async providerLogin(provider: string, org?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiLoginResponseContainer>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.providerLogin(provider, org, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {string} repo \n         * @param {boolean} [force] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async setOrgAndRepo(org: string, repo: string, force?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiOrgRepoLogin>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.setOrgAndRepo(org, repo, force, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * IDPApi - factory interface\n * @export\n */\nexport const IDPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = IDPApiFp(configuration)\n    return {\n        /**\n         * \n         * @param {string} role \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        assumeRole(role: string, org?: string, provider?: string, options?: any): AxiosPromise<GithubSlsRestApiSamlResponseContainer> {\n            return localVarFp.assumeRole(role, org, provider, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: any): AxiosPromise<GithubSlsRestApiEncryptResponse> {\n            return localVarFp.encrypt(org, githubSlsRestApiEncryptRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {boolean} [raw] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrgConfig(org: string, raw?: boolean, options?: any): AxiosPromise<GithubSlsRestApiConfigV20220101> {\n            return localVarFp.getOrgConfig(org, raw, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOrgMetadata(org: string, options?: any): AxiosPromise<GithubSlsRestApiMetadataResponse> {\n            return localVarFp.getOrgMetadata(org, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listLogins(org?: string, refresh?: boolean, options?: any): AxiosPromise<GithubSlsRestApiListResponseLoginResponse> {\n            return localVarFp.listLogins(org, refresh, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listOrgRepos(options?: any): AxiosPromise<GithubSlsRestApiListResponseOrgRepoResponse> {\n            return localVarFp.listOrgRepos(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} [org] \n         * @param {string} [provider] \n         * @param {boolean} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles(org?: string, provider?: string, refresh?: boolean, options?: any): AxiosPromise<GithubSlsRestApiListResponseRoleResponse> {\n            return localVarFp.listRoles(org, provider, refresh, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} provider \n         * @param {string} [org] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        providerLogin(provider: string, org?: string, options?: any): AxiosPromise<GithubSlsRestApiLoginResponseContainer> {\n            return localVarFp.providerLogin(provider, org, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @param {string} org \n         * @param {string} repo \n         * @param {boolean} [force] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        setOrgAndRepo(org: string, repo: string, force?: boolean, options?: any): AxiosPromise<GithubSlsRestApiOrgRepoLogin> {\n            return localVarFp.setOrgAndRepo(org, repo, force, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * IDPApi - object-oriented interface\n * @export\n * @class IDPApi\n * @extends {BaseAPI}\n */\nexport class IDPApi extends BaseAPI {\n    /**\n     * \n     * @param {string} role \n     * @param {string} [org] \n     * @param {string} [provider] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public assumeRole(role: string, org?: string, provider?: string, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).assumeRole(role, org, provider, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} org \n     * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).encrypt(org, githubSlsRestApiEncryptRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} org \n     * @param {boolean} [raw] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public getOrgConfig(org: string, raw?: boolean, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).getOrgConfig(org, raw, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} org \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public getOrgMetadata(org: string, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).getOrgMetadata(org, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} [org] \n     * @param {boolean} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public listLogins(org?: string, refresh?: boolean, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).listLogins(org, refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public listOrgRepos(options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).listOrgRepos(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} [org] \n     * @param {string} [provider] \n     * @param {boolean} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public listRoles(org?: string, provider?: string, refresh?: boolean, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).listRoles(org, provider, refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} provider \n     * @param {string} [org] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public providerLogin(provider: string, org?: string, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).providerLogin(provider, org, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @param {string} org \n     * @param {string} repo \n     * @param {boolean} [force] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof IDPApi\n     */\n    public setOrgAndRepo(org: string, repo: string, force?: boolean, options?: AxiosRequestConfig) {\n        return IDPApiFp(this.configuration).setOrgAndRepo(org, repo, force, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * github-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.3-0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"https://sso.saml.to/github\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * github-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.3-0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * github-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.3-0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * github-sls-rest-api\n * To generate a JWT token, go to the <a href=\\\"https://sso.saml.to/auth/jwt.html\\\" target=\\\"_blank\\\">JWT Token Generator</a>\n *\n * The version of the OpenAPI document: 1.0.3-0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n\n","#!/usr/bin/env node\n\nimport log from 'loglevel';\nimport { Command } from '../src/command';\n\nprocess.on('SIGINT', () => {\n  process.exit(0);\n});\n\n(async () => {\n  try {\n    log.debug('Starting CLI');\n    const command = new Command('saml-to');\n    await command.run(process.argv);\n  } catch (e) {\n    if (e instanceof Error) {\n      console.error(`Error: ${e.message}`, e);\n      process.exit(-1);\n    }\n    throw e;\n  }\n  process.exit(0);\n})();\n","import { hideBin } from 'yargs/helpers';\nimport yargs from 'yargs';\nimport axios from 'axios';\nimport { Assume } from './commands/assume';\nimport { Init } from './commands/init';\nimport { Show, ShowSubcommands } from './commands/show';\nimport { ProvisioningTypes, Set, SetSubcommands } from './commands/set';\nimport inquirer from 'inquirer';\nimport { NoTokenError } from './stores/scms';\nimport { GithubHelper } from './helpers/githubHelper';\nimport { Add, AddAttributes, AddNameIdFormats } from './commands/add';\nimport { Login } from './commands/login';\n\nconst loginWrapper = async (scope: string, fn: () => Promise<void>): Promise<void> => {\n  try {\n    await fn();\n  } catch (e) {\n    if (e instanceof NoTokenError) {\n      const githubLogin = new GithubHelper();\n      await githubLogin.promptLogin(scope);\n      await fn();\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const ui = new inquirer.ui.BottomBar();\n\nexport class Command {\n  private assume: Assume;\n\n  private login: Login;\n\n  private init: Init;\n\n  private show: Show;\n\n  private add: Add;\n\n  private set: Set;\n\n  constructor(private name: string) {\n    this.assume = new Assume();\n    this.login = new Login();\n    this.init = new Init();\n    this.show = new Show();\n    this.add = new Add();\n    this.set = new Set();\n  }\n\n  public async run(argv: string[]): Promise<void> {\n    const ya = yargs\n      .scriptName(this.name)\n      .command({\n        command: 'list-logins',\n        describe: `Show providers that are available to login`,\n        handler: async ({ org, provider, refresh }) =>\n          loginWrapper('user:email', () =>\n            this.show.handle(\n              'logins' as ShowSubcommands,\n              org as string | undefined,\n              provider as string | undefined,\n              false,\n              refresh as boolean | undefined,\n              false,\n            ),\n          ),\n        builder: {\n          org: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an organization',\n          },\n          provider: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an provider',\n          },\n          refresh: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n            description: 'Refresh cached logins from source control',\n          },\n        },\n      })\n      .command({\n        command: 'list-roles',\n        describe: `Show roles that are available to assume`,\n        handler: async ({ org, provider, refresh }) =>\n          loginWrapper('user:email', () =>\n            this.show.handle(\n              'roles' as ShowSubcommands,\n              org as string | undefined,\n              provider as string | undefined,\n              false,\n              refresh as boolean | undefined,\n              false,\n            ),\n          ),\n        builder: {\n          org: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an organization',\n          },\n          provider: {\n            demand: false,\n            type: 'string',\n            description: 'Specify a provider',\n          },\n          refresh: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n            description: 'Refresh cached logins from source control',\n          },\n        },\n      })\n      .command({\n        command: 'login [provider]',\n        describe: `Login to a provider`,\n        handler: ({ org, provider }) =>\n          loginWrapper('user:email', () =>\n            this.login.handle(provider as string | undefined, org as string | undefined),\n          ),\n        builder: {\n          provider: {\n            demand: false,\n            type: 'string',\n            description: 'The provider for which to login',\n          },\n          org: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an organization',\n          },\n        },\n      })\n      .command({\n        command: 'assume [role]',\n        describe: 'Assume a role',\n        handler: ({ role, org, provider, headless }) =>\n          loginWrapper('user:email', () =>\n            this.assume.handle(\n              role as string,\n              headless as boolean,\n              org as string | undefined,\n              provider as string | undefined,\n            ),\n          ),\n        builder: {\n          role: {\n            demand: false,\n            type: 'string',\n            description: 'The role to assume',\n          },\n          org: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an organization',\n          },\n          headless: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n            description: 'Output access credentials to the terminal',\n          },\n          provider: {\n            demand: false,\n            type: 'string',\n            description: 'Specify the provider',\n          },\n        },\n      })\n      .command({\n        command: 'init',\n        describe: '(Administrative) Initialize SAML.to with a GitHub Repository',\n        handler: async ({ force }) => {\n          await this.init.handle(force as boolean | undefined);\n          ui.updateBottomBar('');\n          console.log(`\nNext, you can to configure a Service Provider for SAML.to.\n\nThe service provider will need your SAML Metadata or Certificicate, available with the following commands:\n - \\`${this.name} show metadata\\`\n - \\`${this.name} show certificate\\`\n - \\`${this.name} add provider\\`\n`);\n        },\n        builder: {\n          repoUrl: {\n            demand: false,\n            type: 'string',\n          },\n          force: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n          },\n        },\n      })\n      .command({\n        command: 'add provider [name]',\n        describe: '(Administrative) Add a provider to the configuration',\n        handler: async ({ name, entityId, acsUrl, loginUrl, nameId, nameIdFormat, attribute }) => {\n          await loginWrapper('repo', () =>\n            this.add.handle(\n              'provider',\n              name as string | undefined,\n              entityId as string | undefined,\n              acsUrl as string | undefined,\n              loginUrl as string | undefined,\n              nameId as string | undefined,\n              (nameIdFormat as AddNameIdFormats) || 'NONE',\n              attribute as AddAttributes | undefined,\n            ),\n          );\n        },\n        builder: {\n          name: {\n            demand: false,\n            type: 'string',\n          },\n          entityId: {\n            demand: false,\n            type: 'string',\n          },\n          acsUrl: {\n            demand: false,\n            type: 'string',\n          },\n          loginUrl: {\n            demand: false,\n            type: 'string',\n          },\n          nameId: {\n            demand: false,\n            type: 'string',\n          },\n          nameIdFormat: {\n            demand: false,\n            type: 'string',\n            choices: ['id', 'login', 'email', 'emailV2', 'none'] as AddNameIdFormats[],\n          },\n          attribute: {\n            demand: false,\n            type: 'array',\n            description: 'Additional addtributes in key=value pairs',\n            coerce: (values) => {\n              if (!values || !Array.isArray(values)) {\n                return;\n              }\n              return values.reduce((acc, value) => {\n                try {\n                  const parsed = JSON.parse(\n                    (\n                      '{\"' +\n                      value\n                        .replace(/^\\s+|\\s+$/g, '')\n                        .replace(/=(?=\\s|$)/g, '=\"\" ')\n                        .replace(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g, '\", \"')\n                        .replace(/=/g, '\": \"') +\n                      '\"}'\n                    ).replace(/\"\"/g, '\"'),\n                  );\n                  return {\n                    ...acc,\n                    ...parsed,\n                  };\n                } catch (e) {\n                  if (e instanceof Error) {\n                    throw new Error(`Error parsing ${value}: ${e.message}`);\n                  }\n                }\n              }, {} as AddAttributes);\n            },\n          },\n        },\n      })\n      .command({\n        command: 'set [name] [subcommand]',\n        describe: '(Administrative) Set a provider setting (e.g. provisioning',\n        handler: async ({ name, subcommand, type, endpoint, token }) => {\n          await loginWrapper('repo', () =>\n            this.set.handle(subcommand as SetSubcommands, name as string, {\n              type: type as ProvisioningTypes,\n              endpoint: endpoint as string,\n              token: token as string,\n            }),\n          );\n        },\n        builder: {\n          name: {\n            demand: true,\n            type: 'string',\n          },\n          subcommand: {\n            demand: true,\n            type: 'string',\n            choices: ['provisioning'] as SetSubcommands[],\n          },\n          type: {\n            demand: true,\n            type: 'string',\n            choices: ['scim'] as ProvisioningTypes[],\n          },\n          endpoint: {\n            demand: true,\n            type: 'string',\n          },\n          token: {\n            demand: true,\n            type: 'string',\n          },\n        },\n      })\n      .command({\n        command: 'show [subcommand]',\n        describe: `(Administrative) Show various configurations (metadata, certificate, entityId, config, etc.)`,\n        handler: async ({ org, provider, subcommand, save, refresh, raw }) =>\n          loginWrapper('user:email', () =>\n            this.show.handle(\n              subcommand as ShowSubcommands,\n              org as string | undefined,\n              provider as string | undefined,\n              save as boolean | undefined,\n              refresh as boolean | undefined,\n              raw as boolean | undefined,\n            ),\n          ),\n        builder: {\n          subcommand: {\n            demand: true,\n            type: 'string',\n            choices: [\n              'metadata',\n              'certificate',\n              'entityId',\n              'loginUrl',\n              'logoutUrl',\n              'config',\n              'roles',\n              'logins',\n              'orgs',\n            ] as ShowSubcommands[],\n          },\n          org: {\n            demand: false,\n            type: 'string',\n            description: 'Specify an organization',\n          },\n          provider: {\n            demand: false,\n            type: 'string',\n            description: 'Specify a provider',\n          },\n          save: {\n            demand: false,\n            type: 'boolean',\n            description: 'Output to a file',\n          },\n          refresh: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n            description: 'Refresh backend config',\n          },\n          raw: {\n            demand: false,\n            type: 'boolean',\n            default: false,\n            description: 'For `config` subcommand, show raw configuration',\n          },\n        },\n      })\n      .help()\n      .showHelpOnFail(true)\n      .strict()\n      .wrap(null)\n      .fail((msg, error) => {\n        if (axios.isAxiosError(error)) {\n          if (error.response && error.response.status === 401) {\n            ui.updateBottomBar('');\n            console.error('Unauthorized');\n          } else {\n            ui.updateBottomBar('');\n            console.error(\n              `API Error: ${\n                (error.response && error.response.data && error.response.data.message) ||\n                error.message\n              }`,\n            );\n          }\n        } else {\n          ui.updateBottomBar('');\n          console.error(`Error: ${error ? error.message : msg}`);\n        }\n        process.exit(-1);\n      });\n\n    const parsed = await ya.parse(hideBin(argv));\n\n    if (parsed._.length === 0) {\n      ya.showHelp();\n    }\n\n    process.exit(0);\n  }\n}\n","import {\n  GithubSlsRestApiConfigV20220101,\n  GithubSlsRestApiProviderV1,\n  GithubSlsRestApiNameIdFormatV1,\n} from '../../api/github-sls-rest-api';\nimport inquirer from 'inquirer';\nimport { ui } from '../command';\nimport { Show } from './show';\nimport { load } from 'js-yaml';\nimport { AwsHelper } from '../helpers/aws/awsHelper';\nimport { CONFIG_FILE } from './init';\nimport { ConfigHelper } from '../helpers/configHelper';\nimport { OrgHelper } from '../helpers/orgHelper';\nimport { GenericHelper } from '../helpers/genericHelper';\nimport { AwsSsoHelper } from '../helpers/aws/awsSsoHelper';\n\nexport type AddSubcommands = 'provider' | 'permission';\n\nexport type AddNameIdFormats = GithubSlsRestApiNameIdFormatV1 | 'none';\n\nexport type AddAttributes = { [key: string]: string };\n\nexport class Add {\n  show: Show;\n\n  awsHelper: AwsHelper;\n\n  awsSsoHelper: AwsSsoHelper;\n\n  configHelper: ConfigHelper;\n\n  orgHelper: OrgHelper;\n\n  genericHelper: GenericHelper;\n\n  constructor() {\n    this.show = new Show();\n    this.awsHelper = new AwsHelper();\n    this.awsSsoHelper = new AwsSsoHelper();\n    this.configHelper = new ConfigHelper();\n    this.orgHelper = new OrgHelper();\n    this.genericHelper = new GenericHelper();\n  }\n\n  public async handle(\n    subcommand: AddSubcommands,\n    name?: string,\n    entityId?: string,\n    acsUrl?: string,\n    loginUrl?: string,\n    nameId?: string,\n    nameIdFormat?: AddNameIdFormats,\n    attributes?: { [key: string]: string },\n  ): Promise<void> {\n    switch (subcommand) {\n      case 'provider': {\n        const added = await this.addProvider(\n          name,\n          entityId,\n          acsUrl,\n          loginUrl,\n          nameId,\n          nameIdFormat,\n          attributes,\n        );\n        if (added) {\n          console.log(`\nProvider has been added!\n\nUsers can login or assume roles using the following commands:\n\n - \\`saml-to login\\`\n - \\`saml-to assume\\``);\n        }\n        break;\n      }\n      case 'permission': {\n        const added = await this.addPermission();\n        if (added) {\n          console.log(`\nPermissions have been granted!`);\n        }\n        break;\n      }\n      default:\n        throw new Error(`Unknown subcommand: ${subcommand}`);\n    }\n  }\n\n  private async addProvider(\n    name?: string,\n    entityId?: string,\n    acsUrl?: string,\n    loginUrl?: string,\n    nameId?: string,\n    nameIdFormat?: AddNameIdFormats,\n    attributes?: { [key: string]: string },\n  ): Promise<boolean> {\n    const { org, repo } = await this.orgHelper.promptOrg('manage');\n\n    ui.updateBottomBar('Fetching config...');\n\n    const configYaml = await this.configHelper.fetchConfigYaml(org, true);\n\n    const config = load(configYaml) as { version: string };\n\n    if (!config.version) {\n      throw new Error(`Missing version in config`);\n    }\n\n    const added = await this.genericHelper.promptProvider(\n      org,\n      repo,\n      config,\n      name,\n      entityId,\n      acsUrl,\n      loginUrl,\n      nameId,\n      nameIdFormat,\n      attributes,\n    );\n\n    if (added) {\n      await this.configHelper.fetchConfigYaml(org);\n\n      ui.updateBottomBar('');\n      console.log('Configuration is valid!');\n    }\n    return added;\n  }\n\n  private async addPermission(): Promise<boolean> {\n    const { org, repo } = await this.orgHelper.promptOrg('log in');\n\n    const configYaml = await this.configHelper.fetchConfigYaml(org, true);\n\n    const config = load(configYaml) as { version: string };\n\n    if (!config.version) {\n      throw new Error(`Missing version in config`);\n    }\n\n    let added = false;\n    switch (config.version) {\n      case '20220101': {\n        added = await this.addPermissionV20220101(\n          org,\n          repo,\n          config as GithubSlsRestApiConfigV20220101,\n        );\n        break;\n      }\n      default:\n        throw new Error(`Invalid config version: ${config.version}`);\n    }\n\n    if (added) {\n      await this.configHelper.fetchConfigYaml(org);\n\n      ui.updateBottomBar('');\n      console.log('Configuration is valid!');\n    }\n\n    return added;\n  }\n\n  private async addPermissionV20220101(\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    if (!config.providers || !Object.keys(config.providers).length) {\n      throw new Error(\n        `There are no \\`providers\\` in the in \\`${org}/${repo}/${CONFIG_FILE}\\`. Add a provider first using the \\`add provider\\` command`,\n      );\n    }\n\n    ui.updateBottomBar('');\n    const issuer: GithubSlsRestApiProviderV1 | undefined = (\n      await inquirer.prompt({\n        type: 'list',\n        name: 'issuer',\n        message: `For which provider would you like to grant user permission?`,\n        choices: Object.entries(config.providers).map(([k, c]) => {\n          return { name: k, value: c.entityId };\n        }),\n      })\n    ).issuer;\n\n    if (issuer && (issuer as string).toLowerCase().endsWith('.amazon.com/saml')) {\n      return this.awsHelper.promptPermissionV20220101(org, repo, config);\n    }\n\n    // TODO: Generic helper add permissions\n    throw new Error(`This utility is not familiar with the issuer: ${issuer}\n\nPlease add permissions by manually editing the configuration file \\`${CONFIG_FILE} in \\`${org}/${repo}\\`.\n\nThe configuration file reference can be found here: https://docs.saml.to/configuration/reference\n`);\n  }\n}\n","import {\n  IDPApi,\n  Configuration,\n  GithubSlsRestApiSamlResponseContainer,\n  GithubSlsRestApiRoleResponse,\n} from '../../api/github-sls-rest-api';\nimport {\n  ERROR_ASSUMING_ROLE,\n  MULTIPLE_ROLES,\n  NO_GITHUB_CLIENT,\n  TERMINAL_NOT_SUPPORTED,\n} from '../messages';\nimport { Scms } from '../stores/scms';\nimport axios from 'axios';\nimport open from 'open';\nimport { Show } from './show';\nimport inquirer from 'inquirer';\nimport { ui } from '../command';\nimport { AwsHelper } from '../helpers/aws/awsHelper';\n\nexport class Assume {\n  scms: Scms;\n\n  show: Show;\n\n  awsHelper: AwsHelper;\n\n  constructor() {\n    this.scms = new Scms();\n    this.show = new Show();\n    this.awsHelper = new AwsHelper();\n  }\n\n  async handle(role?: string, headless = false, org?: string, provider?: string): Promise<void> {\n    if (!role && !headless) {\n      const choice = await this.promptRole(org, provider);\n      role = choice.role;\n      org = choice.org;\n      provider = choice.provider;\n    }\n\n    if (!headless) {\n      ui.updateBottomBar(`Assuming ${role}`);\n    }\n\n    const token = this.scms.getGithubToken();\n    if (!token) {\n      throw new Error(NO_GITHUB_CLIENT);\n    }\n\n    if (!role) {\n      throw new Error(`Please specify a role to assume`);\n    }\n\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: token,\n      }),\n    );\n\n    try {\n      const { data: response } = await idpApi.assumeRole(role, org, provider);\n      if (headless) {\n        await this.assumeTerminal(response);\n      } else {\n        await this.assumeBrowser(response);\n      }\n    } catch (e) {\n      if (axios.isAxiosError(e) && e.response) {\n        if (e.response.status === 403) {\n          throw new Error(ERROR_ASSUMING_ROLE(role, `Reason: ${e.response.data.message}`));\n        } else if (e.response.status === 404) {\n          throw new Error(MULTIPLE_ROLES(role, `Reason: ${e.response.data.message}`));\n        } else {\n          throw e;\n        }\n      }\n      throw e;\n    }\n\n    return;\n  }\n\n  private async assumeBrowser(samlResponse: GithubSlsRestApiSamlResponseContainer): Promise<void> {\n    if (samlResponse.browserUri) {\n      const result = await open(samlResponse.browserUri);\n      console.log('!!! Browser open result', JSON.stringify(result));\n    } else {\n      throw new Error(`Browser URI is not set.`);\n    }\n  }\n\n  private async assumeTerminal(samlResponse: GithubSlsRestApiSamlResponseContainer): Promise<void> {\n    if (samlResponse.recipient.endsWith('.amazon.com/saml')) {\n      return this.awsHelper.assumeAws(samlResponse);\n    }\n\n    throw new Error(TERMINAL_NOT_SUPPORTED(samlResponse.provider, samlResponse.recipient));\n  }\n\n  async promptRole(org?: string, provider?: string): Promise<GithubSlsRestApiRoleResponse> {\n    const roles = await this.show.fetchRoles(org, provider);\n\n    ui.updateBottomBar('');\n    const { roleIx } = await inquirer.prompt({\n      type: 'list',\n      name: 'roleIx',\n      message: `Which role would you like to assume?`,\n      choices: roles.map((r, ix) => {\n        return { name: `${r.role} [${r.provider}] (${r.org})`, value: ix };\n      }),\n    });\n\n    return roles[roleIx];\n  }\n}\n","// import { RequestError } from '@octokit/request-error';\n// import { RequestError } from '@octokit/request-error';\nimport log from 'loglevel';\nimport { GITHUB_ACCESS_NEEDED, REPO_DOES_NOT_EXIST } from '../messages';\nimport { GithubHelper } from '../helpers/githubHelper';\nimport inquirer from 'inquirer';\nimport {\n  IDPApi,\n  Configuration,\n  GithubSlsRestApiConfigV20220101,\n  GithubSlsRestApiConfigV20220101VersionEnum,\n} from '../../api/github-sls-rest-api';\nimport { Scms } from '../stores/scms';\nimport { Show } from './show';\nimport { ui } from '../command';\nimport { RequestError } from '@octokit/request-error';\nimport { dump } from 'js-yaml';\nimport { Octokit } from '@octokit/rest';\n\nexport const CONFIG_FILE = 'saml-to.yml';\n\nconst EMPTY_CONFIG: GithubSlsRestApiConfigV20220101 = {\n  version: GithubSlsRestApiConfigV20220101VersionEnum._20220101,\n  providers: {},\n  permissions: {},\n};\n\nexport class Init {\n  githubHelper: GithubHelper;\n\n  scms: Scms;\n\n  show: Show;\n\n  constructor() {\n    this.githubHelper = new GithubHelper();\n    this.scms = new Scms();\n    this.show = new Show();\n  }\n\n  async handle(force = false): Promise<void> {\n    ui.updateBottomBar('');\n    console.log(`Welcome to SAML.to!\n\nSAML.to enables administrators to grant access to Service Providers to GitHub users.\n\nThis utility will assist you in connecting a new or existing repository of your choice for configuration.\n\nSAML.to is configured by adding a \\`${CONFIG_FILE}\\` to any GitHub organization and repository which defines providers and access privleges.\n\nOnce configured, you (or users in your organzation) will be able to login to services (and assume roles, if supported) using this utility or from the web.\n\nFor more information, check out https://docs.saml.to\n`);\n\n    ui.updateBottomBar('');\n    const { org } = await inquirer.prompt({\n      type: 'input',\n      name: 'org',\n      message: `Which GitHub User or Organiztion would you like to use?\n`,\n    });\n\n    ui.updateBottomBar(`Checking if ${org} exists...`);\n    await this.assertOrg(org);\n\n    ui.updateBottomBar('');\n    const { repo } = await inquirer.prompt({\n      type: 'input',\n      name: 'repo',\n      default: 'saml-to',\n      message: `Which Repository within ${org} would you like to use to store the \\`${CONFIG_FILE}\\` configuration file?\n(If it doesn't yet exist, we'll give you an option to create it!)\n`,\n    });\n    ui.updateBottomBar(`Checking access to ${org}/${repo}...`);\n    await this.assertRepo(org, repo, 'repo');\n    ui.updateBottomBar(`Registering ${org}/${repo}...`);\n    await this.registerRepo(org, repo, force);\n    ui.updateBottomBar(`Fetching metadata...`);\n    await this.show.fetchMetadataXml(org);\n\n    this.scms.saveGithubOrg(org);\n\n    ui.updateBottomBar('');\n    console.log(`Repository \\`${org}/${repo}\\` registered!`);\n  }\n\n  private async assertOrg(org: string): Promise<'User' | 'Organization'> {\n    const octokit = new Octokit();\n\n    try {\n      const { data: user } = await octokit.users.getByUsername({ username: org });\n      if (user.type === 'User') {\n        return 'User';\n      }\n      if (user.type === 'Organization') {\n        return 'Organization';\n      }\n      throw new Error(\n        `Unknown user type for \\`${org}\\`: ${user.type}, must be 'User' or 'Organization'`,\n      );\n    } catch (e) {\n      if (e instanceof RequestError && e.status === 404) {\n        throw new Error(`Unable to find user or organization: ${org}`);\n      }\n      throw e;\n    }\n  }\n\n  private async assertRepo(org: string, repo: string, scope: string): Promise<void> {\n    await this.githubHelper.assertScope(scope, org);\n\n    const { github } = await this.scms.loadClients();\n    if (!github) {\n      await this.githubHelper.promptLogin(scope);\n      return this.assertRepo(org, repo, scope);\n    }\n\n    const { data: user } = await github.users.getAuthenticated();\n\n    if (user.login.toLowerCase() !== org.toLowerCase()) {\n      ui.updateBottomBar(`Checking membership on ${org}/${repo}...`);\n      try {\n        await github.orgs.checkMembershipForUser({ org, username: user.login });\n      } catch (e) {\n        if (e instanceof Error) {\n          ui.updateBottomBar('');\n          console.log(GITHUB_ACCESS_NEEDED(org, scope));\n          await this.githubHelper.promptLogin('repo', org);\n          return this.assertRepo(org, repo, scope);\n        }\n      }\n    }\n\n    ui.updateBottomBar(`Checking access to ${org}/${repo}...`);\n    try {\n      const { data: repository } = await github.repos.get({ owner: org, repo });\n      if (repository.visibility === 'public') {\n        ui.updateBottomBar('');\n        const { makePrivate } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'makePrivate',\n          message: `\\`${org}/${repo}\\` appears to be a Public Repository. It's recommended to keep it private. Would you like to convert it to a private repository?`,\n        });\n        if (makePrivate) {\n          await github.repos.update({ owner: org, repo, visibility: 'private' });\n        } else {\n          console.warn(`WARN: ${org}/${repo} is publicly visible, but it does not need to be!`);\n        }\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        ui.updateBottomBar('');\n        const { createRepo } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'createRepo',\n          message: `It appears that \\`${org}/${repo}\\` does not exist yet, do you want to create it?`,\n        });\n\n        if (!createRepo) {\n          throw new Error(REPO_DOES_NOT_EXIST(org, repo));\n        }\n\n        ui.updateBottomBar(`Creating repository ${org}/${repo}...`);\n        if (user.login.toLowerCase() !== org.toLowerCase()) {\n          await github.repos.createInOrg({ name: repo, org, visibility: 'private' });\n        } else {\n          await github.repos.createForAuthenticatedUser({ name: repo, visibility: 'private' });\n        }\n        return this.assertRepo(org, repo, scope);\n      }\n    }\n\n    ui.updateBottomBar(`Checking for existing config...`);\n    try {\n      await github.repos.getContent({ owner: org, repo, path: CONFIG_FILE });\n    } catch (e) {\n      if (e instanceof RequestError && e.status === 404) {\n        ui.updateBottomBar('');\n        const { createConfig } = await inquirer.prompt({\n          type: 'confirm',\n          name: 'createConfig',\n          message: `It appears that \\`${org}/${repo}\\` does not contain \\`${CONFIG_FILE}\\` yet. Would you like to create an empty config file?`,\n        });\n        if (!createConfig) {\n          console.warn(`Skipping creation of \\`${CONFIG_FILE}\\`, please be sure to create it!`);\n          return;\n        }\n\n        await github.repos.createOrUpdateFileContents({\n          owner: org,\n          repo,\n          content: Buffer.from(\n            `---\n${dump(EMPTY_CONFIG)}\n`,\n            'utf8',\n          ).toString('base64'),\n          message: `initial saml.to configuration`,\n          path: CONFIG_FILE,\n        });\n      }\n    }\n  }\n\n  private async registerRepo(org: string, repo: string, force?: boolean): Promise<void> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: result } = await idpApi.setOrgAndRepo(org, repo, force);\n    log.debug('Initialized repo', result);\n  }\n}\n","import {\n  IDPApi,\n  Configuration,\n  GithubSlsRestApiLoginResponseContainer,\n  GithubSlsRestApiLoginResponse,\n} from '../../api/github-sls-rest-api';\nimport { ERROR_LOGGING_IN, MULTIPLE_LOGINS, NO_GITHUB_CLIENT } from '../messages';\nimport { Scms } from '../stores/scms';\nimport axios from 'axios';\nimport open from 'open';\nimport { Show } from './show';\nimport { AwsHelper } from '../helpers/aws/awsHelper';\nimport { ui } from '../command';\nimport inquirer from 'inquirer';\n\nexport class Login {\n  scms: Scms;\n\n  show: Show;\n\n  awsHelper: AwsHelper;\n\n  constructor() {\n    this.scms = new Scms();\n    this.show = new Show();\n    this.awsHelper = new AwsHelper();\n  }\n\n  async handle(provider?: string, org?: string): Promise<void> {\n    if (!provider) {\n      const choice = await this.promptLogin(org);\n      provider = choice.provider;\n      org = choice.org;\n    }\n\n    ui.updateBottomBar(`Logging into ${provider} (org: ${org})`);\n\n    const token = this.scms.getGithubToken();\n    if (!token) {\n      throw new Error(NO_GITHUB_CLIENT);\n    }\n\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: token,\n      }),\n    );\n\n    try {\n      const { data: response } = await idpApi.providerLogin(provider, org);\n      await this.assumeBrowser(response);\n    } catch (e) {\n      if (axios.isAxiosError(e) && e.response) {\n        if (e.response.status === 403) {\n          throw new Error(ERROR_LOGGING_IN(provider, `Reason: ${e.response.data.message}`));\n        } else if (e.response.status === 404) {\n          throw new Error(MULTIPLE_LOGINS(provider, `Reason: ${e.response.data.message}`));\n        } else {\n          throw e;\n        }\n      }\n      throw e;\n    }\n\n    return;\n  }\n\n  private async assumeBrowser(samlResponse: GithubSlsRestApiLoginResponseContainer): Promise<void> {\n    if (samlResponse.browserUri) {\n      await open(samlResponse.browserUri);\n    } else {\n      throw new Error(`Browser URI is not set.`);\n    }\n  }\n\n  async promptLogin(org?: string): Promise<GithubSlsRestApiLoginResponse> {\n    const logins = await this.show.fetchLogins(org);\n\n    ui.updateBottomBar('');\n    const { loginIx } = await inquirer.prompt({\n      type: 'list',\n      name: 'loginIx',\n      message: `For which provider would you like to log in?`,\n      choices: logins.map((l, ix) => {\n        return { name: `${l.provider} (${l.org})`, value: ix };\n      }),\n    });\n\n    return logins[loginIx];\n  }\n}\n","import {\n  GithubSlsRestApiConfigV20220101,\n  IDPApi,\n  Configuration,\n} from '../../api/github-sls-rest-api';\nimport { load } from 'js-yaml';\nimport { ConfigHelper } from '../helpers/configHelper';\nimport { ui } from '../command';\nimport { OrgHelper } from '../helpers/orgHelper';\nimport { Scms } from '../stores/scms';\n\nexport type SetSubcommands = 'provisioning';\n\nexport type ProvisioningTypes = 'scim';\n\nexport type SetHandleOpts = {\n  type?: ProvisioningTypes;\n  endpoint?: string;\n  token?: string;\n};\n\nexport class Set {\n  orgHelper: OrgHelper;\n\n  configHelper: ConfigHelper;\n\n  scms: Scms;\n\n  constructor() {\n    this.orgHelper = new OrgHelper();\n    this.configHelper = new ConfigHelper();\n    this.scms = new Scms();\n  }\n\n  handle = async (\n    subcommand: SetSubcommands,\n    provider: string,\n    opts: SetHandleOpts,\n  ): Promise<void> => {\n    switch (subcommand) {\n      case 'provisioning': {\n        await this.promptProvisioning(provider, opts);\n        break;\n      }\n      default:\n        throw new Error(`Unknown subcommand: ${subcommand}`);\n    }\n  };\n\n  private promptProvisioning = async (provider: string, opts: SetHandleOpts): Promise<boolean> => {\n    const { type } = opts;\n    if (!type) {\n      throw new Error(`Missing provisioning type`);\n    }\n\n    switch (type) {\n      case 'scim': {\n        return this.promptScimProvisioning(provider, opts);\n      }\n      default:\n        throw new Error(`Unknown provisioning type: ${type}`);\n    }\n  };\n\n  private promptScimProvisioning = async (\n    provider: string,\n    opts: SetHandleOpts,\n  ): Promise<boolean> => {\n    const { org, repo } = await this.orgHelper.promptOrg('log in');\n\n    ui.updateBottomBar('Fetching config...');\n\n    const configYaml = await this.configHelper.fetchConfigYaml(org, true);\n\n    const config = load(configYaml) as { version: string };\n\n    if (!config.version) {\n      throw new Error(`Missing version in config`);\n    }\n\n    let added;\n    switch (config.version) {\n      case '20220101': {\n        added = await this.promptScimProvisioningV20220101(\n          org,\n          repo,\n          provider,\n          config as GithubSlsRestApiConfigV20220101,\n          opts.endpoint,\n          opts.token,\n        );\n        break;\n      }\n      default:\n        throw new Error(`Invalid config version: ${config.version}`);\n    }\n\n    if (added) {\n      await this.configHelper.fetchConfigYaml(org);\n\n      ui.updateBottomBar('');\n      console.log('Configuration is valid!');\n    }\n    return added;\n  };\n\n  private promptScimProvisioningV20220101 = async (\n    org: string,\n    repo: string,\n    provider: string,\n    config: GithubSlsRestApiConfigV20220101,\n    endpoint?: string,\n    token?: string,\n  ): Promise<boolean> => {\n    if (!endpoint || !token) {\n      // TODO: prompt for them!\n      throw new Error(`Missing endpoint or token`);\n    }\n\n    const { providers } = config;\n    if (!providers) {\n      throw new Error(`Missing providers in config`);\n    }\n\n    const providerConfig = providers[provider];\n    if (!providerConfig) {\n      throw new Error(`Unknown provider: ${provider}`);\n    }\n\n    const accessToken = this.scms.getGithubToken();\n\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken,\n      }),\n    );\n\n    ui.updateBottomBar('Encrypting token...');\n\n    const { data } = await idpApi.encrypt(org, { value: token });\n\n    const { encryptedValue } = data;\n\n    providerConfig.provisioning = { scim: { endpoint, encryptedToken: encryptedValue } };\n\n    return this.configHelper.promptConfigUpdate(org, repo, config, `${provider}: set provisioning`);\n  };\n}\n","import { NO_ORG } from '../messages';\nimport {\n  IDPApi,\n  Configuration,\n  GithubSlsRestApiRoleResponse,\n  GithubSlsRestApiLoginResponse,\n} from '../../api/github-sls-rest-api';\nimport { CONFIG_DIR, Scms } from '../stores/scms';\nimport fs from 'fs';\nimport path from 'path';\nimport { ui } from '../command';\nimport { ConfigHelper } from '../helpers/configHelper';\nimport { OrgHelper } from '../helpers/orgHelper';\n\nexport type ShowSubcommands =\n  | 'metadata'\n  | 'certificate'\n  | 'entityId'\n  | 'loginUrl'\n  | 'logoutUrl'\n  | 'roles'\n  | 'logins'\n  | 'orgs'\n  | 'config';\n\nexport class Show {\n  scms: Scms;\n\n  configHelper: ConfigHelper;\n\n  orgHelper: OrgHelper;\n\n  constructor() {\n    this.scms = new Scms();\n\n    this.configHelper = new ConfigHelper();\n\n    this.orgHelper = new OrgHelper();\n  }\n\n  public async handle(\n    subcommand: ShowSubcommands,\n    org?: string,\n    provider?: string,\n    save?: boolean,\n    refresh?: boolean,\n    raw?: boolean,\n  ): Promise<void> {\n    switch (subcommand) {\n      case 'orgs': {\n        await this.showOrgs(save);\n        return;\n      }\n      case 'roles': {\n        await this.showRoles(org, provider, refresh, save);\n        return;\n      }\n      case 'logins': {\n        await this.showLogins(org, refresh, save);\n        return;\n      }\n      default:\n        break;\n    }\n\n    if (!org) {\n      org = this.scms.getOrg();\n      if (!org) {\n        throw new Error(NO_ORG);\n      }\n    }\n\n    switch (subcommand) {\n      case 'metadata': {\n        return this.showMetadata(org, save);\n      }\n      case 'certificate': {\n        return this.showCertificate(org, save);\n      }\n      case 'config': {\n        return this.showConfig(org, save, raw);\n      }\n      case 'entityId': {\n        return this.showEntityId(org, save);\n      }\n      case 'loginUrl': {\n        return this.showLoginUrl(org, save);\n      }\n      case 'logoutUrl': {\n        return this.showLogoutUrl(org, save);\n      }\n      default:\n        break;\n    }\n\n    throw new Error(`Unknown subcommand: ${subcommand}`);\n  }\n\n  private async showConfig(org: string, save?: boolean, raw?: boolean): Promise<void> {\n    const config = await this.configHelper.fetchConfigYaml(org, raw);\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(config);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-config.yaml`);\n      fs.writeFileSync(location, config);\n      ui.updateBottomBar('');\n      console.log(`Config saved to ${location}`);\n    }\n  }\n\n  public async fetchEntityId(org: string): Promise<string> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: metadata } = await idpApi.getOrgMetadata(org);\n    const { entityId } = metadata;\n    return entityId;\n  }\n\n  public async fetchLoginUrl(org: string): Promise<string> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: metadata } = await idpApi.getOrgMetadata(org);\n    const { loginUrl } = metadata;\n    return loginUrl;\n  }\n\n  public async fetchLogoutUrl(org: string): Promise<string> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: metadata } = await idpApi.getOrgMetadata(org);\n    const { logoutUrl } = metadata;\n    return logoutUrl;\n  }\n\n  public async fetchMetadataXml(org: string): Promise<string> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: metadata } = await idpApi.getOrgMetadata(org);\n    const { metadataXml } = metadata;\n    return metadataXml;\n  }\n\n  private async showMetadata(org: string, save?: boolean): Promise<void> {\n    const metadataXml = await this.fetchMetadataXml(org);\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(metadataXml);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-metadata.xml`);\n      fs.writeFileSync(location, metadataXml);\n      ui.updateBottomBar('');\n      console.log(`Metadata saved to ${location}`);\n    }\n  }\n\n  private async showCertificate(org: string, save?: boolean): Promise<void> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: metadata } = await idpApi.getOrgMetadata(org);\n    const { certificate } = metadata;\n\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(certificate);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-certificate.pem`);\n      fs.writeFileSync(location, certificate);\n      ui.updateBottomBar('');\n      console.log(`Certificate saved to ${location}`);\n    }\n  }\n\n  private async showOrgs(save?: boolean): Promise<void> {\n    const orgs = await this.orgHelper.fetchOrgs();\n\n    if (!save) {\n      ui.updateBottomBar('');\n      if (!orgs.length) {\n        console.log(`No orgs`); // TODO Better messaging\n      }\n      console.table(orgs, ['org']);\n    } else {\n      const location = path.join(CONFIG_DIR, `orgs.json`);\n      fs.writeFileSync(location, JSON.stringify({ orgs }));\n      ui.updateBottomBar('');\n      console.log(`Orgs saved to ${location}`);\n    }\n  }\n\n  public async fetchRoles(\n    org?: string,\n    provider?: string,\n    refresh?: boolean,\n  ): Promise<GithubSlsRestApiRoleResponse[]> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: roles } = await idpApi.listRoles(org, provider, refresh);\n    return roles.results;\n  }\n\n  private async showRoles(\n    org?: string,\n    provider?: string,\n    refresh?: boolean,\n    save?: boolean,\n  ): Promise<void> {\n    const roles = await this.fetchRoles(org, provider, refresh);\n\n    if (!save) {\n      ui.updateBottomBar('');\n      if (!roles.length) {\n        throw new Error('No roles are available to assume');\n      }\n      console.table(roles, ['role', 'provider', 'org']);\n    } else {\n      const location = path.join(CONFIG_DIR, `roles.json`);\n      fs.writeFileSync(location, JSON.stringify({ roles }));\n      ui.updateBottomBar('');\n      console.log(`Roles saved to ${location}`);\n    }\n  }\n\n  public async fetchLogins(\n    org?: string,\n    refresh?: boolean,\n  ): Promise<GithubSlsRestApiLoginResponse[]> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: logins } = await idpApi.listLogins(org, refresh);\n    return logins.results;\n  }\n\n  private async showLogins(org?: string, refresh?: boolean, save?: boolean): Promise<void> {\n    const logins = await this.fetchLogins(org, refresh);\n\n    if (!save) {\n      ui.updateBottomBar('');\n      if (!logins.length) {\n        throw new Error('No providers are available to login');\n      }\n      console.table(logins, ['provider', 'org']);\n    } else {\n      const location = path.join(CONFIG_DIR, `logins.json`);\n      fs.writeFileSync(location, JSON.stringify({ logins }));\n      ui.updateBottomBar('');\n      console.log(`Logins saved to ${location}`);\n    }\n  }\n\n  private async showEntityId(org: string, save?: boolean): Promise<void> {\n    const entityId = await this.fetchEntityId(org);\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(entityId);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-entityId.json`);\n      fs.writeFileSync(location, JSON.stringify({ entityId }));\n      ui.updateBottomBar('');\n      console.log(`Entity ID saved to ${location}`);\n    }\n  }\n\n  private async showLoginUrl(org: string, save?: boolean): Promise<void> {\n    const loginUrl = await this.fetchLoginUrl(org);\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(loginUrl);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-loginUrl.json`);\n      fs.writeFileSync(location, JSON.stringify({ loginUrl }));\n      ui.updateBottomBar('');\n      console.log(`Entity ID saved to ${location}`);\n    }\n  }\n\n  private async showLogoutUrl(org: string, save?: boolean): Promise<void> {\n    const logoutUrl = await this.fetchLogoutUrl(org);\n    if (!save) {\n      ui.updateBottomBar('');\n      console.log(logoutUrl);\n    } else {\n      const location = path.join(CONFIG_DIR, `${org}-logoutUrl.json`);\n      fs.writeFileSync(location, JSON.stringify({ logoutUrl }));\n      ui.updateBottomBar('');\n      console.log(`Entity ID saved to ${location}`);\n    }\n  }\n}\n","import {\n  GithubSlsRestApiConfigV20220101,\n  GithubSlsRestApiProviderV1,\n  GithubSlsRestApiSamlResponseContainer,\n  GithubSlsRestApiAwsAssumeSdkOptions,\n} from '../../../api/github-sls-rest-api';\nimport inquirer from 'inquirer';\nimport { ui } from '../../command';\nimport { ConfigHelper } from '../configHelper';\nimport { GenericHelper } from '../genericHelper';\nimport { STS } from '@aws-sdk/client-sts';\n\nexport class AwsHelper {\n  configHelper: ConfigHelper;\n\n  genericHelper: GenericHelper;\n\n  constructor() {\n    this.configHelper = new ConfigHelper();\n    this.genericHelper = new GenericHelper();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any\n  async promptProvider(org: string, repo: string, config: any): Promise<boolean> {\n    switch (config.version) {\n      case '20220101':\n        return this.promptProviderV20220101(org, repo, config as GithubSlsRestApiConfigV20220101);\n      default:\n        throw new Error(`Unknown version ${config.version}`);\n    }\n  }\n\n  private async promptProviderV20220101(\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    if (config.providers && config.providers.aws) {\n      throw new Error(\n        'An `aws` provider already exists, please manually edit the configuration to add another',\n      );\n    }\n\n    if (config.variables && config.variables.awsAccountId) {\n      throw new Error(\n        'An `awsAccountId` variable already exists, please manually edit the configuration to add this provider',\n      );\n    }\n\n    ui.updateBottomBar('');\n    const { accountId } = await inquirer.prompt({\n      type: 'input',\n      name: 'accountId',\n      message: `What is your AWS Account ID?`,\n    });\n\n    const newProvider: { [key: string]: GithubSlsRestApiProviderV1 } = {\n      aws: {\n        entityId: 'https://signin.aws.amazon.com/saml',\n        acsUrl: 'https://signin.aws.amazon.com/saml',\n        loginUrl: 'https://signin.aws.amazon.com/saml',\n        attributes: {\n          'https://aws.amazon.com/SAML/Attributes/RoleSessionName': '<#= user.github.login #>',\n          'https://aws.amazon.com/SAML/Attributes/SessionDuration': '3600',\n          'https://aws.amazon.com/SAML/Attributes/Role': `<#= user.selectedRole #>,arn:aws:iam::${accountId}:saml-provider/saml.to`,\n        },\n      },\n    };\n\n    config.providers = { ...(config.providers || {}), ...newProvider };\n\n    const { addPermissions } = await inquirer.prompt({\n      type: 'confirm',\n      name: 'addPermissions',\n      message: `Would you like to grant any permissions to GitHub users now?`,\n    });\n\n    if (!addPermissions) {\n      return this.configHelper.promptConfigUpdate(org, repo, config, `aws: add provider`);\n    }\n\n    return this.promptPermissionV20220101(org, repo, config);\n  }\n\n  public async promptPermissionV20220101(\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    config.permissions = config.permissions || {};\n    config.permissions.aws = config.permissions.aws || {};\n    config.permissions.aws.roles = config.permissions.aws.roles || [];\n\n    ui.updateBottomBar('');\n    let roleArn: string;\n    roleArn = (\n      await inquirer.prompt({\n        type: 'list',\n        name: 'roleArn',\n        message: `What is role you would like to allow for assumption?`,\n        choices: [\n          ...config.permissions.aws.roles.map((r) => ({ name: r.name })),\n          { name: 'Add another role', value: '' },\n        ],\n      })\n    ).roleArn;\n\n    if (!roleArn) {\n      const { arnInput } = await inquirer.prompt({\n        type: 'input',\n        name: 'arnInput',\n        message: `What is ARN of the new role you would like to allow for assumption?\n`,\n        validate: (input) => {\n          if (!input) {\n            console.error('Invalid ARN!');\n            return false;\n          }\n          // TODO ARN Validator\n          return true;\n        },\n      });\n      roleArn = arnInput;\n    }\n\n    const githubLogins = await this.genericHelper.promptUsers('aws', roleArn);\n\n    const roleIx = config.permissions.aws.roles.findIndex(\n      (r) => r.name && r.name.toLowerCase() === roleArn.toLowerCase(),\n    );\n    if (roleIx === -1) {\n      config.permissions.aws.roles.push({ name: roleArn, users: { github: githubLogins } });\n    } else {\n      if (!config.permissions.aws.roles[roleIx].users) {\n        config.permissions.aws.roles[roleIx].users = { github: githubLogins };\n      } else {\n        // Merge\n        config.permissions.aws.roles[roleIx].users = {\n          ...config.permissions.aws.roles[roleIx].users,\n          github: [\n            ...((config.permissions.aws.roles[roleIx].users || {}).github || []),\n            ...githubLogins,\n          ],\n        };\n      }\n    }\n\n    return this.configHelper.promptConfigUpdate(\n      org,\n      repo,\n      config,\n      `aws: grant permissions to role ${roleArn}\n\n${githubLogins.map((l) => `- ${l}`)}`,\n    );\n  }\n\n  async assumeAws(samlResponse: GithubSlsRestApiSamlResponseContainer): Promise<void> {\n    const sts = new STS({});\n    const opts = samlResponse.sdkOptions as GithubSlsRestApiAwsAssumeSdkOptions;\n    if (!opts) {\n      throw new Error('Missing sdk options from saml response');\n    }\n    const response = await sts.assumeRoleWithSAML({\n      ...opts,\n      SAMLAssertion: samlResponse.samlResponse,\n    });\n    if (\n      !response.Credentials ||\n      !response.Credentials.AccessKeyId ||\n      !response.Credentials.SecretAccessKey ||\n      !response.Credentials.SessionToken\n    ) {\n      throw new Error('Missing credentials');\n    }\n    this.genericHelper.outputEnv({\n      AWS_ACCESS_KEY_ID: response.Credentials.AccessKeyId,\n      AWS_SECRET_ACCESS_KEY: response.Credentials.SecretAccessKey,\n      AWS_SESSION_TOKEN: response.Credentials.SessionToken,\n    });\n  }\n}\n","import {\n  GithubSlsRestApiConfigV20220101,\n  GithubSlsRestApiProviderV1,\n} from '../../../api/github-sls-rest-api';\nimport inquirer from 'inquirer';\nimport { ui } from '../../command';\nimport { ConfigHelper } from '../configHelper';\nimport { GenericHelper } from '../genericHelper';\n\nexport class AwsSsoHelper {\n  configHelper: ConfigHelper;\n\n  genericHelper: GenericHelper;\n\n  constructor() {\n    this.configHelper = new ConfigHelper();\n    this.genericHelper = new GenericHelper();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any\n  async promptProvider(org: string, repo: string, config: any): Promise<boolean> {\n    switch (config.version) {\n      case '20220101':\n        return this.promptProviderV20220101(org, repo, config as GithubSlsRestApiConfigV20220101);\n      default:\n        throw new Error(`Unknown version ${config.version}`);\n    }\n  }\n\n  private async promptProviderV20220101(\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    if (config.providers && config.providers['aws-sso']) {\n      throw new Error(\n        'An `aws-sso` provider already exists, please manually edit the configuration to add another',\n      );\n    }\n\n    ui.updateBottomBar('');\n    const { loginUrl } = await inquirer.prompt({\n      type: 'input',\n      name: 'loginUrl',\n      message: `What is the AWS SSO Sign-in URL?`,\n    });\n\n    const { acsUrl } = await inquirer.prompt({\n      type: 'input',\n      name: 'acsUrl',\n      message: `What is the AWS SSO ACS URL?`,\n    });\n\n    const { entityId } = await inquirer.prompt({\n      type: 'input',\n      name: 'entityId',\n      message: `What is the AWS SSO issuer URL?`,\n    });\n\n    const newProvider: { [key: string]: GithubSlsRestApiProviderV1 } = {\n      ['aws-sso']: {\n        entityId,\n        acsUrl,\n        loginUrl,\n        attributes: {},\n      },\n    };\n\n    config.providers = { ...(config.providers || {}), ...newProvider };\n\n    const { addPermissions } = await inquirer.prompt({\n      type: 'confirm',\n      name: 'addPermissions',\n      message: `Would you like to grant any permissions to GitHub users now?`,\n    });\n\n    if (!addPermissions) {\n      return this.configHelper.promptConfigUpdate(org, repo, config, `aws-sso: add provider`);\n    }\n\n    return this.promptPermissionV20220101(org, repo, config);\n  }\n\n  public async promptPermissionV20220101(\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    config.permissions = config.permissions || {};\n    config.permissions['aws-sso'] = config.permissions['aws-sso'] || {};\n    config.permissions['aws-sso'].users = config.permissions['aws-sso'].users || {};\n    config.permissions['aws-sso'].users.github = config.permissions['aws-sso'].users.github || [];\n\n    const githubLogins = await this.genericHelper.promptUsers('aws-sso');\n\n    const logins = new Set([...config.permissions['aws-sso'].users.github, ...githubLogins]);\n\n    config.permissions['aws-sso'].users.github = [...logins];\n\n    return this.configHelper.promptConfigUpdate(\n      org,\n      repo,\n      config,\n      `aws-sso: grant permissions to login\n\n${githubLogins.map((l) => `- ${l}`)}`,\n    );\n  }\n}\n","import inquirer from 'inquirer';\nimport { dump } from 'js-yaml';\nimport { NO_GITHUB_CLIENT } from '../messages';\nimport { Scms } from '../stores/scms';\nimport { ui } from '../command';\nimport { CONFIG_FILE } from '../commands/init';\nimport { IDPApi, Configuration } from '../../api/github-sls-rest-api';\n\nexport class ConfigHelper {\n  scms: Scms;\n\n  constructor() {\n    this.scms = new Scms();\n  }\n\n  public async fetchConfigYaml(org: string, raw = false): Promise<string> {\n    ui.updateBottomBar('Fetching config...');\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: result } = await idpApi.getOrgConfig(org, raw);\n    return `---\n${dump(result)}`;\n  }\n\n  public async promptConfigUpdate(\n    org: string,\n    repo: string,\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any\n    config: any,\n    title: string,\n  ): Promise<boolean> {\n    ui.updateBottomBar('');\n\n    const configYaml = `\n---\n# Config Reference: \n# https://docs.saml.to/configuration/reference\n${dump(config, { lineWidth: 1024 })}`;\n\n    console.log(`Here is the updated \\`${CONFIG_FILE}\\` for ${org}/${repo}:\n\n${configYaml}\n\n`);\n\n    ui.updateBottomBar('');\n    const { type } = await inquirer.prompt({\n      type: 'list',\n      name: 'type',\n      message: `Would you like to push this configuration change to \\`${org}/${repo}\\`?`,\n      default: 'nothing',\n      choices: [\n        {\n          name: 'Do not change anything',\n          value: 'nothing',\n        },\n        {\n          name: `Commit directly to \\`${org}/${repo}\\``,\n          value: 'commit',\n        },\n      ],\n    });\n\n    if (type === 'nothing') {\n      ui.updateBottomBar('');\n      console.log('All done. No changes were made.');\n      return false;\n    }\n\n    if (type === 'commit') {\n      await this.commitConfig(org, repo, configYaml, title);\n    }\n    return true;\n  }\n\n  private async commitConfig(\n    org: string,\n    repo: string,\n    configYaml: string,\n    title: string,\n  ): Promise<void> {\n    ui.updateBottomBar(`Updating ${CONFIG_FILE} on ${org}/${repo}`);\n    const { github } = await this.scms.loadClients();\n    if (!github) {\n      throw new Error(NO_GITHUB_CLIENT);\n    }\n\n    let sha: string | undefined;\n\n    try {\n      const response = await github.repos.getContent({\n        owner: org,\n        repo,\n        path: CONFIG_FILE,\n      });\n      if (response.data && 'content' in response.data) {\n        sha = response.data.sha;\n      }\n    } catch (e) {\n      //Pass\n    }\n\n    const { data: update } = await github.repos.createOrUpdateFileContents({\n      owner: org,\n      repo,\n      path: CONFIG_FILE,\n      message: title,\n      content: Buffer.from(configYaml, 'utf8').toString('base64'),\n      sha,\n    });\n\n    ui.updateBottomBar('');\n    console.log(`Updated \\`${CONFIG_FILE}\\` on \\`${org}/${repo}\\` (SHA: ${update.commit.sha})`);\n  }\n}\n","import {\n  GithubSlsRestApiConfigV20220101,\n  GithubSlsRestApiVariableV1,\n  GithubSlsRestApiProviderV1,\n  GithubSlsRestApiNameIdFormatV1,\n} from '../../api/github-sls-rest-api';\nimport inquirer from 'inquirer';\nimport { ui } from '../command';\nimport { ConfigHelper } from './configHelper';\nimport { Scms } from '../stores/scms';\nimport { AddNameIdFormats } from '../commands/add';\n\nexport const trainCase = (str: string): string => {\n  if (!str) {\n    return '';\n  }\n\n  const match = str.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);\n\n  if (!match) {\n    return '';\n  }\n\n  return match.map((x) => x.toLowerCase()).join('-');\n};\n\nexport class GenericHelper {\n  configHelper: ConfigHelper;\n\n  scms: Scms;\n\n  constructor() {\n    this.configHelper = new ConfigHelper();\n    this.scms = new Scms();\n  }\n\n  public async promptUsers(provider: string, role?: string, users?: string[]): Promise<string[]> {\n    if (!users) {\n      ui.updateBottomBar('');\n      const { addSelf } = await inquirer.prompt({\n        type: 'confirm',\n        name: 'addSelf',\n        message: `Would you like to grant yourself access to ${\n          role ? `assume \\`${role}\\`` : `login to ${provider}`\n        }?\n  `,\n      });\n\n      if (addSelf) {\n        const login = await this.scms.getLogin();\n        users = [login];\n      } else {\n        users = [];\n      }\n    }\n\n    ui.updateBottomBar('');\n    const { user } = await inquirer.prompt({\n      type: 'input',\n      name: 'user',\n      message: `What is another Github ID of the user that will be allowed to ${\n        role ? `assume \\`${role}\\`` : `login to ${provider}`\n      }? (Leave blank if finished adding users)\n`,\n    });\n\n    if (!user) {\n      return users || [];\n    }\n\n    users.push(user);\n\n    return this.promptUsers(provider, role, [...new Set(users)]);\n  }\n\n  async promptProvider(\n    org: string,\n    repo: string,\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types,@typescript-eslint/no-explicit-any\n    config: any,\n    name?: string,\n    entityId?: string,\n    acsUrl?: string,\n    loginUrl?: string,\n    nameId?: string,\n    nameIdFormat?: AddNameIdFormats,\n    attributes?: { [key: string]: string },\n  ): Promise<boolean> {\n    ui.updateBottomBar('');\n    if (!name) {\n      name = (\n        await inquirer.prompt({\n          type: 'input',\n          name: 'name',\n          message: `What is the name of the provider (e.g. AWS, Slack, Google)?`,\n        })\n      ).name;\n    }\n\n    if (!name) {\n      throw new Error('Name is required');\n    }\n\n    switch (config.version) {\n      case '20220101':\n        return this.promptProviderV20220101(\n          trainCase(name),\n          org,\n          repo,\n          config as GithubSlsRestApiConfigV20220101,\n          entityId,\n          acsUrl,\n          loginUrl,\n          nameId,\n          nameIdFormat,\n          attributes,\n        );\n      default:\n        throw new Error(`Unknown version ${config.version}`);\n    }\n  }\n\n  private async promptProviderV20220101(\n    name: string,\n    org: string,\n    repo: string,\n    config: GithubSlsRestApiConfigV20220101,\n    entityId?: string,\n    acsUrl?: string,\n    loginUrl?: string,\n    nameId?: string,\n    nameIdFormat?: AddNameIdFormats,\n    attributes?: { [key: string]: string },\n  ): Promise<boolean> {\n    if (config.providers && config.providers[name]) {\n      throw new Error(\n        `An provider named \\`${name}\\` already exists, please manually edit the configuration to add another`,\n      );\n    }\n\n    ui.updateBottomBar('');\n    if (!entityId) {\n      entityId = (\n        await inquirer.prompt({\n          type: 'input',\n          name: 'entityId',\n          message: `What is the Entity ID for ${name}?`,\n        })\n      ).entityId;\n    }\n\n    if (!acsUrl) {\n      acsUrl = (\n        await inquirer.prompt({\n          type: 'input',\n          name: 'acsUrl',\n          message: `What is the Assertion Consumer Service (ACS) URL for ${name}?`,\n        })\n      ).acsUrl;\n    }\n\n    if (!loginUrl) {\n      loginUrl = (\n        await inquirer.prompt({\n          type: 'input',\n          name: 'loginUrl',\n          message: `What is the Login URL for ${name}?`,\n        })\n      ).loginUrl;\n    }\n\n    if (!nameIdFormat) {\n      nameIdFormat = (\n        await inquirer.prompt({\n          type: 'list',\n          name: 'nameIdFormat',\n          message: `(Optional) Does the provider need Name IDs in a particular format?\n  `,\n          choices: [\n            {\n              name: 'Persistent (GitHub User ID)',\n              value: 'id',\n            },\n            {\n              name: 'Transient (Github Login/Username)',\n              value: 'login',\n            },\n            {\n              name: 'Email (GitHub User Email)',\n              value: 'email',\n            },\n            { name: 'None', value: 'none' },\n          ],\n        })\n      ).nameIdFormat;\n    }\n\n    // TODO Prompt for certificate\n\n    let idFormat: GithubSlsRestApiNameIdFormatV1 | undefined;\n    if (nameIdFormat && nameIdFormat !== 'none') {\n      idFormat = nameIdFormat as GithubSlsRestApiNameIdFormatV1;\n    }\n\n    if (!attributes || Object.keys(attributes).length === 0) {\n      attributes = await this.promptAttributes(config.variables || {});\n    }\n\n    const newProvider: { [key: string]: GithubSlsRestApiProviderV1 } = {\n      [`${name}`]: {\n        entityId,\n        loginUrl,\n        nameId,\n        nameIdFormat: idFormat,\n        acsUrl,\n        attributes,\n      },\n    };\n\n    config.providers = { ...(config.providers || {}), ...newProvider };\n\n    const { addPermissions } = await inquirer.prompt({\n      type: 'confirm',\n      name: 'addPermissions',\n      message: `Would you like to grant any permissions to GitHub users now?`,\n    });\n\n    if (!addPermissions) {\n      return this.configHelper.promptConfigUpdate(org, repo, config, `${name}: add provider`);\n    }\n\n    return this.promptPermissionV20220101(org, repo, name, config);\n  }\n\n  public async promptPermissionV20220101(\n    org: string,\n    repo: string,\n    provider: string,\n    config: GithubSlsRestApiConfigV20220101,\n  ): Promise<boolean> {\n    config.permissions = config.permissions || {};\n    config.permissions[provider] = config.permissions[provider] || {};\n    config.permissions[provider].users = config.permissions[provider].users || {};\n    (config.permissions[provider].users || {}).github =\n      (config.permissions[provider].users || {}).github || [];\n\n    const githubLogins = await this.promptUsers(provider);\n\n    const logins = new Set([\n      ...((config.permissions[provider].users || {}).github || []),\n      ...githubLogins,\n    ]);\n\n    (config.permissions[provider].users || {}).github = [...logins];\n\n    return this.configHelper.promptConfigUpdate(\n      org,\n      repo,\n      config,\n      `${provider}: grant permissions to login\n\n${githubLogins.map((l) => `- ${l}`)}`,\n    );\n  }\n\n  outputEnv(\n    vars: { [key: string]: string },\n    platform: NodeJS.Platform | 'github' = process.platform,\n  ): void {\n    let prefix = 'export';\n    let separator = '=';\n    switch (platform) {\n      case 'win32':\n        prefix = 'setx';\n        break;\n      case 'github':\n        prefix = '::set-output';\n        separator = '::';\n        break;\n      default:\n        break;\n    }\n\n    Object.entries(vars).forEach(([key, value]) => {\n      console.log(`${prefix} ${key}${separator}\"${value}\"`);\n    });\n  }\n\n  public async promptAttributes(\n    variables: { [key: string]: GithubSlsRestApiVariableV1 },\n    attributes: { [key: string]: string } = {},\n  ): Promise<{ [key: string]: string }> {\n    const { attributeName } = await inquirer.prompt({\n      type: 'input',\n      name: 'attributeName',\n      message: `What is the name of an attribute should be sent to the Provider? (Leave blank if finished adding attributes)\n`,\n    });\n\n    if (!attributeName) {\n      return attributes;\n    }\n\n    let { attributeValue } = await inquirer.prompt({\n      type: 'list',\n      name: 'attributeValue',\n      message: `What should be the value of \\`${attributeName}\\`?\n`,\n      choices: [\n        {\n          name: 'Github User ID',\n          value: '<#= user.github.id #>',\n        },\n        {\n          name: 'Github Login/Username',\n          value: '<#= user.github.login #>',\n        },\n        {\n          name: 'Email Address',\n          value: '<#= user.github.email #>',\n        },\n        {\n          name: 'Full Name',\n          value: '<#= user.github.fullName #>',\n        },\n        {\n          name: 'First Name',\n          value: '<#= user.github.firstName #>',\n        },\n        {\n          name: 'Last Name',\n          value: '<#= user.github.lastName #>',\n        },\n        {\n          name: 'The selected role (for `assume` commands)',\n          value: '<#= selectedRole #>',\n        },\n        {\n          name: 'Session ID (randomly generated for each login)',\n          value: '<#= sessionId #>',\n        },\n        ...Object.keys(variables).map((k) => {\n          return { name: `Variable: ${k}`, value: `<$= ${k} $>` };\n        }),\n        { name: 'Other', value: '*_*_*_OTHER_*_*_*' },\n      ],\n    });\n\n    if (attributeValue === '*_*_*_OTHER_*_*_*') {\n      const { customValue } = await inquirer.prompt({\n        type: 'input',\n        name: 'customValue',\n        message: `What is the custom value of ${attributeName}?\n`,\n      });\n\n      attributeValue = customValue;\n    }\n\n    attributes[attributeName] = attributeValue;\n\n    return this.promptAttributes(variables, attributes);\n  }\n}\n","import { JwtGithubApi } from '../../api/auth-sls-rest-api';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { NoTokenError, Scms } from '../stores/scms';\nimport log from 'loglevel';\nimport { GITHUB_SCOPE_NEEDED } from '../messages';\nimport { ui } from '../command';\nimport { Octokit } from '@octokit/rest';\n\ntype DeviceCodeRequest = {\n  client_id: string;\n  scope: string;\n};\n\ntype DeviceCodeResponse = {\n  device_code: string;\n  user_code: string;\n  verification_uri: string;\n  expires_in: number;\n  interval: number;\n};\n\ntype AccessTokenRequest = {\n  client_id: string;\n  device_code: string;\n  grant_type: string;\n};\n\nexport type AccessTokenResponse = {\n  error?: string;\n  error_description?: string;\n  access_token: string;\n  token_type: string;\n  scope: string;\n};\n\nexport class GithubHelper {\n  scms: Scms;\n\n  constructor() {\n    this.scms = new Scms();\n  }\n\n  async promptLogin(scope = 'user:email', org?: string): Promise<void> {\n    const api = new JwtGithubApi();\n    const { data: oauthDetail } = await api.getOauthDetail();\n    const { clientId } = oauthDetail;\n\n    const response = await axios.post<DeviceCodeResponse>(\n      'https://github.com/login/device/code',\n      {\n        client_id: clientId,\n        scope,\n      } as DeviceCodeRequest,\n      { headers: { Accept: 'application/json' } },\n    );\n\n    const { verification_uri: verificationUri, user_code: userCode } = response.data;\n\n    ui.updateBottomBar('');\n    console.log(`\nTo continue, access to your GitHub profile (with scope \\`${scope}\\`) is needed...\n\nPlease open the browser to ${verificationUri}, and enter the code:\n\n${userCode}\n`);\n\n    const accessTokenResponse = await this.getAccessToken(\n      clientId,\n      response.data,\n      moment().add(response.data.expires_in, 'second'),\n    );\n\n    const octokit = new Octokit({ auth: accessTokenResponse.access_token });\n\n    const { data: user } = await octokit.users.getAuthenticated();\n\n    if (org && user.login !== org) {\n      const orgs = await octokit.paginate(octokit.orgs.listForAuthenticatedUser);\n\n      const found = orgs.find((o) => o.login === org);\n      if (!found) {\n        ui.updateBottomBar('');\n        console.warn(`It appears access to ${org} has not beeen granted, let's try again...`);\n        return this.promptLogin(scope, org);\n      }\n    }\n\n    const location = this.scms.saveGithubToken(accessTokenResponse.access_token);\n    console.log(`Saved GitHub credentials to ${location}`);\n  }\n\n  private getAccessToken(\n    clientId: string,\n    deviceCodeResponse: DeviceCodeResponse,\n    tryUntil: moment.Moment,\n  ): Promise<AccessTokenResponse> {\n    return new Promise<AccessTokenResponse>((resolve, reject) => {\n      const now = moment();\n      if (now.isSameOrAfter(tryUntil)) {\n        reject(new Error('Access token request has expired. Please re-run the `login` command'));\n        return;\n      }\n\n      axios\n        .post<AccessTokenResponse>(\n          'https://github.com/login/oauth/access_token',\n          {\n            client_id: clientId,\n            device_code: deviceCodeResponse.device_code,\n            grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n          } as AccessTokenRequest,\n          { headers: { Accept: 'application/json' } },\n        )\n        .then(({ data: accessTokenResponse }) => {\n          if (accessTokenResponse.error) {\n            if (accessTokenResponse.error === 'authorization_pending') {\n              setTimeout(\n                () =>\n                  this.getAccessToken(clientId, deviceCodeResponse, tryUntil)\n                    .then((response) => resolve(response))\n                    .catch((error) => reject(error)),\n                deviceCodeResponse.interval * 1000,\n              );\n              return;\n            }\n            reject(new Error(accessTokenResponse.error_description));\n            return;\n          }\n          resolve(accessTokenResponse);\n        })\n        .catch((error) => reject(error));\n    });\n  }\n\n  public async assertScope(scope: string, org?: string): Promise<void> {\n    ui.updateBottomBar('Checking scopes...');\n\n    let github: Octokit | undefined;\n    try {\n      const clients = await this.scms.loadClients();\n      github = clients.github;\n    } catch (e) {\n      if (e instanceof NoTokenError) {\n        await this.promptLogin(scope, org);\n        return this.assertScope(scope, org);\n      }\n      throw e;\n    }\n\n    if (!github) {\n      throw new Error(`Unable to load GitHub client`);\n    }\n\n    const { headers } = await github.users.getAuthenticated();\n\n    try {\n      this.assertScopes(headers, scope);\n    } catch (e) {\n      if (e instanceof Error) {\n        log.debug(e.message);\n        ui.updateBottomBar('');\n        console.log(GITHUB_SCOPE_NEEDED(scope));\n        await this.promptLogin(scope, org);\n        return this.assertScope(scope, org);\n      }\n      throw e;\n    }\n  }\n\n  private assertScopes(\n    headers: { [header: string]: string | number | undefined },\n    expectedScope: string,\n  ): void {\n    const xOauthScopes = headers['x-oauth-scopes'] as string;\n    log.debug('Current scopes:', xOauthScopes);\n    const scopes = xOauthScopes.split(' ');\n    if (scopes.includes(expectedScope)) {\n      return;\n    }\n\n    throw new Error(`Missing scope. Expected:${expectedScope} Actual:${scopes}`);\n  }\n}\n","import inquirer from 'inquirer';\nimport { ui } from '../command';\nimport {\n  GithubSlsRestApiOrgRepoResponse,\n  IDPApi,\n  Configuration,\n} from '../../api/github-sls-rest-api';\nimport { Scms } from '../stores/scms';\n\nexport class OrgHelper {\n  scms: Scms;\n\n  constructor() {\n    this.scms = new Scms();\n  }\n\n  public async fetchOrgs(): Promise<GithubSlsRestApiOrgRepoResponse[]> {\n    const accessToken = this.scms.getGithubToken();\n    const idpApi = new IDPApi(\n      new Configuration({\n        accessToken: accessToken,\n      }),\n    );\n    const { data: orgs } = await idpApi.listOrgRepos();\n    return orgs.results;\n  }\n\n  async promptOrg(\n    operation: 'manage' | 'log in' | 'assume',\n  ): Promise<GithubSlsRestApiOrgRepoResponse> {\n    const orgs = await this.fetchOrgs();\n    if (!orgs.length) {\n      throw new Error(`Please run the \\`init\\` command first`);\n    }\n\n    if (orgs.length === 1) {\n      return orgs[0];\n    }\n\n    ui.updateBottomBar('');\n    const { orgIx } = await inquirer.prompt({\n      type: 'list',\n      name: 'orgIx',\n      message: `For which organization would you like to ${operation}?`,\n      choices: orgs.map((o, ix) => {\n        return { name: `${o.org} (${o.repo})`, value: ix };\n      }),\n    });\n\n    const org = this.scms.getOrg();\n    if (!org) {\n      this.scms.saveGithubOrg(orgs[orgIx].org);\n    }\n\n    return orgs[orgIx];\n  }\n}\n","export const NO_GITHUB_CLIENT = 'There was an unknown issue loading GitHub client libraries';\nexport const NO_ORG = `No organization is set, please use the \\`--org\\` flag and re-run the command`;\nexport const ERROR_LOADING_FILE = (file: string, error: Error): string =>\n  `Error loading file: ${file}: ${error.message}.`;\nexport const ERROR_ASSUMING_ROLE = (role: string, message: string): string =>\n  `Unable to assume ${role}. ${message}.`;\nexport const ERROR_LOGGING_IN = (provider: string, message: string): string =>\n  `Unable to login to ${provider}. ${message}.`;\nexport const MULTIPLE_ROLES = (role: string, message: string): string =>\n  ERROR_ASSUMING_ROLE(\n    role,\n    `${message}\n\nTip: Use an exact role name, and/or the \\`--provider\\` and \\`--org\\` flags to narrow down to a specific role.\nTip: Use the \\`show roles\\` command to show avalable roles`,\n  );\nexport const MULTIPLE_LOGINS = (provider: string, message: string): string =>\n  ERROR_ASSUMING_ROLE(\n    provider,\n    `${message}\n\nTip: Use an exact org name, using the \\`--org\\` flag to narrow down to a specific organization.\nTip: Use the \\`show logins\\` command to show avalable roles`,\n  );\nexport const TERMINAL_NOT_SUPPORTED = (provider: string, recipient: string): string =>\n  `Role assumption using ${provider} (${recipient}) is not supported by this CLI yet. However, you may request it as a feature: https://github.com/saml-to/cli/issues`;\nexport const UNSUPPORTED_REPO_URL = `Only the following repo URLs are supported: https://github.com/{org}/{repo}`;\nexport const GITHUB_ACCESS_NEEDED = (org: string, scope: string): string =>\n  `To continue, access to scope '${scope}' in '${org}' is needed`;\nexport const GITHUB_SCOPE_NEEDED = (scope: string): string =>\n  `To continue, scope '${scope}' is needed`;\nexport const REPO_DOES_NOT_EXIST = (org: string, repo: string): string =>\n  `${org}/${repo} does not exist. Please create it or specify a different repository.`;\n","import { Octokit } from '@octokit/rest';\nimport os from 'os';\nimport path from 'path';\nimport fs from 'fs';\n// import { env } from 'process';\nimport { ERROR_LOADING_FILE } from '../messages';\nimport { ui } from '../command';\n\nexport const CONFIG_DIR = `${path.join(os.homedir(), '.saml-to')}`;\n\nexport type Scm = 'github';\n\ntype GithubFile = {\n  token: string;\n};\n\ntype OrgFile = {\n  name: string;\n  scm: Scm;\n};\n\nexport type ScmClients = {\n  github?: Octokit;\n};\n\nexport class NoTokenError extends Error {\n  constructor() {\n    super('No token!');\n  }\n}\n\nexport class Scms {\n  githubFile: string;\n\n  orgFile: string;\n\n  constructor(configDir = CONFIG_DIR) {\n    this.githubFile = path.join(configDir, 'github-token.json');\n    this.orgFile = path.join(configDir, 'org.json');\n\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir);\n    }\n  }\n\n  async loadClients(): Promise<ScmClients> {\n    const clients: ScmClients = {};\n    clients.github = this.getOctokit();\n    return clients;\n  }\n\n  public saveGithubOrg(org: string): string {\n    fs.writeFileSync(this.orgFile, JSON.stringify({ name: org, scm: 'github' } as OrgFile));\n    ui.updateBottomBar('');\n    console.log(`Default organization cached in: ${this.orgFile}`);\n    return this.orgFile;\n  }\n\n  public saveGithubToken(token: string): string {\n    fs.writeFileSync(this.githubFile, JSON.stringify({ token } as GithubFile));\n    ui.updateBottomBar('');\n    console.log(`Token cached in: ${this.githubFile}`);\n    return this.githubFile;\n  }\n\n  public getGithubToken(): string | undefined {\n    // if (env.GITHUB_TOKEN) {\n    //   return env.GITHUB_TOKEN;\n    // }\n\n    if (!fs.existsSync(this.githubFile)) {\n      throw new NoTokenError();\n    }\n\n    try {\n      const { token } = JSON.parse(fs.readFileSync(this.githubFile).toString()) as GithubFile;\n      return token;\n    } catch (e) {\n      if (e instanceof Error) {\n        ui.updateBottomBar('');\n        console.warn(ERROR_LOADING_FILE(this.githubFile, e));\n        return;\n      }\n      throw e;\n    }\n  }\n\n  public getOrg(): string | undefined {\n    if (!fs.existsSync(this.orgFile)) {\n      return;\n    }\n\n    try {\n      const { name } = JSON.parse(fs.readFileSync(this.orgFile).toString()) as OrgFile;\n      return name;\n    } catch (e) {\n      if (e instanceof Error) {\n        ui.updateBottomBar('');\n        console.warn(ERROR_LOADING_FILE(this.githubFile, e));\n        return;\n      }\n      throw e;\n    }\n  }\n\n  private getOctokit(): Octokit | undefined {\n    const token = this.getGithubToken();\n    if (!token) {\n      return;\n    }\n    return new Octokit({ auth: token });\n  }\n\n  public async getLogin(): Promise<string> {\n    const token = this.getGithubToken();\n    if (!token) {\n      throw new Error('Unable to get token');\n    }\n\n    const octokit = new Octokit({ auth: token });\n\n    ui.updateBottomBar('Fetching GitHub identity...');\n    const { data: user } = await octokit.users.getAuthenticated();\n\n    return user.login;\n  }\n}\n","module.exports = require(\"@aws-sdk/client-sts\");","module.exports = require(\"@octokit/request-error\");","module.exports = require(\"@octokit/rest\");","module.exports = require(\"axios\");","module.exports = require(\"inquirer\");","module.exports = require(\"js-yaml\");","module.exports = require(\"loglevel\");","module.exports = require(\"moment\");","module.exports = require(\"open\");","module.exports = require(\"yargs\");","module.exports = require(\"yargs/helpers\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(354);\n"],"names":["AuthSlsRestApiGithubLoginTokenEventV1VersionEnum","AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum","AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum","AuthSlsRestApiGithubLoginTokenEventV1TypeEnum","AuthSlsRestApiJwkKtyEnum","AuthSlsRestApiJwkCrvEnum","HealthApiAxiosParamCreator","configuration","get","async","options","localVarUrlObj","URL","DUMMY_BASE_URL","baseOptions","localVarRequestOptions","method","setSearchParams","headersFromBaseOptions","headers","url","toPathString","HealthApiFp","localVarAxiosParamCreator","localVarAxiosArgs","createRequestFunction","BASE_PATH","HealthApiFactory","basePath","axios","localVarFp","then","request","HealthApi","BaseAPI","this","JwtApiAxiosParamCreator","certs","getPayload","localVarHeaderParameter","setBearerAuthToObject","refresh","authSlsRestApiTokenRequest","assertParamExists","data","serializeDataIfNeeded","verify","JwtApiFp","JwtApiFactory","JwtApi","JwtEmailApiAxiosParamCreator","loginWithEmail","authSlsRestApiEmailLoginRequest","JwtEmailApiFp","JwtEmailApiFactory","JwtEmailApi","JwtGithubApiAxiosParamCreator","createLogin","authSlsRestApiGithubLoginRequest","getAuthenticatedUser","getOauthDetail","oauthCallback","authSlsRestApiGithubJwtRequest","JwtGithubApiFp","JwtGithubApiFactory","JwtGithubApi","replace","COLLECTION_FORMATS","csv","ssv","tsv","pipes","constructor","RequiredError","Error","field","name","msg","super","functionName","paramName","paramValue","setApiKeyToObject","object","keyParamName","apiKey","localVarApiKeyValue","setBasicAuthToObject","username","password","accessToken","setOAuthToObject","scopes","localVarAccessTokenValue","objects","searchParams","URLSearchParams","search","key","Array","isArray","delete","item","append","set","toString","value","requestOptions","nonString","isJsonMime","JSON","stringify","undefined","pathname","hash","axiosArgs","globalAxios","axiosRequestArgs","formDataCtor","param","mime","jsonMime","RegExp","test","toLowerCase","GithubSlsRestApiNameIdFormatV1","GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum","GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum","GithubSlsRestApiConfigBase20220101VersionEnum","GithubSlsRestApiConfigV20220101VersionEnum","IDPApiAxiosParamCreator","assumeRole","role","org","provider","localVarPath","encodeURIComponent","String","localVarQueryParameter","encrypt","githubSlsRestApiEncryptRequest","getOrgConfig","raw","getOrgMetadata","listLogins","listOrgRepos","listRoles","providerLogin","setOrgAndRepo","repo","force","IDPApiFp","IDPApiFactory","IDPApi","process","on","exit","debug","command","Command","run","argv","e","console","error","message","loginWrapper","scope","fn","NoTokenError","githubLogin","GithubHelper","promptLogin","ui","BottomBar","assume","login","init","show","add","Assume","Login","Init","Show","Add","Set","ya","scriptName","describe","handler","handle","builder","demand","type","description","default","headless","updateBottomBar","log","repoUrl","entityId","acsUrl","loginUrl","nameId","nameIdFormat","attribute","choices","coerce","values","reduce","acc","parsed","parse","subcommand","endpoint","token","save","help","showHelpOnFail","strict","wrap","fail","isAxiosError","response","status","hideBin","_","length","showHelp","awsHelper","awsSsoHelper","configHelper","orgHelper","genericHelper","AwsHelper","AwsSsoHelper","ConfigHelper","OrgHelper","GenericHelper","attributes","addProvider","addPermission","promptOrg","configYaml","fetchConfigYaml","config","load","version","added","promptProvider","addPermissionV20220101","providers","Object","keys","CONFIG_FILE","issuer","prompt","entries","map","k","c","endsWith","promptPermissionV20220101","scms","Scms","choice","promptRole","getGithubToken","NO_GITHUB_CLIENT","idpApi","Configuration","assumeTerminal","assumeBrowser","ERROR_ASSUMING_ROLE","MULTIPLE_ROLES","samlResponse","browserUri","result","recipient","assumeAws","TERMINAL_NOT_SUPPORTED","roles","fetchRoles","roleIx","r","ix","EMPTY_CONFIG","_20220101","permissions","githubHelper","assertOrg","assertRepo","registerRepo","fetchMetadataXml","saveGithubOrg","octokit","Octokit","user","users","getByUsername","RequestError","assertScope","github","loadClients","getAuthenticated","orgs","checkMembershipForUser","GITHUB_ACCESS_NEEDED","repository","repos","owner","visibility","makePrivate","update","warn","createRepo","REPO_DOES_NOT_EXIST","createInOrg","createForAuthenticatedUser","getContent","path","createConfig","createOrUpdateFileContents","content","Buffer","from","dump","ERROR_LOGGING_IN","MULTIPLE_LOGINS","logins","fetchLogins","loginIx","l","opts","promptProvisioning","promptScimProvisioning","promptScimProvisioningV20220101","providerConfig","encryptedValue","provisioning","scim","encryptedToken","promptConfigUpdate","showOrgs","showRoles","showLogins","getOrg","NO_ORG","showMetadata","showCertificate","showConfig","showEntityId","showLoginUrl","showLogoutUrl","location","join","CONFIG_DIR","writeFileSync","metadata","logoutUrl","metadataXml","certificate","fetchOrgs","table","results","fetchEntityId","fetchLoginUrl","fetchLogoutUrl","promptProviderV20220101","aws","variables","awsAccountId","accountId","newProvider","addPermissions","roleArn","arnInput","validate","input","githubLogins","promptUsers","findIndex","push","sts","STS","sdkOptions","assumeRoleWithSAML","SAMLAssertion","Credentials","AccessKeyId","SecretAccessKey","SessionToken","outputEnv","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","title","lineWidth","commitConfig","sha","commit","trainCase","str","match","x","addSelf","getLogin","idFormat","promptAttributes","vars","platform","prefix","separator","forEach","attributeName","attributeValue","customValue","api","oauthDetail","clientId","post","client_id","Accept","verification_uri","verificationUri","user_code","userCode","accessTokenResponse","getAccessToken","expires_in","auth","access_token","paginate","listForAuthenticatedUser","find","o","saveGithubToken","deviceCodeResponse","tryUntil","Promise","resolve","reject","isSameOrAfter","device_code","grant_type","setTimeout","catch","interval","error_description","assertScopes","GITHUB_SCOPE_NEEDED","expectedScope","xOauthScopes","split","includes","operation","orgIx","ERROR_LOADING_FILE","file","UNSUPPORTED_REPO_URL","homedir","githubFile","orgFile","configDir","existsSync","mkdirSync","clients","getOctokit","scm","readFileSync","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}