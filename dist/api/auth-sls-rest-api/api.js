"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * auth-sls-rest-api
 * To generate a JWT token, go to the <a href=\"https://sso-nonlive.saml.to/auth/jwt.html\" target=\"_blank\">JWT Token Generator</a>
 *
 * The version of the OpenAPI document: 1.0.2-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtGithubApi = exports.JwtGithubApiFactory = exports.JwtGithubApiFp = exports.JwtGithubApiAxiosParamCreator = exports.JwtEmailApi = exports.JwtEmailApiFactory = exports.JwtEmailApiFp = exports.JwtEmailApiAxiosParamCreator = exports.JwtApi = exports.JwtApiFactory = exports.JwtApiFp = exports.JwtApiAxiosParamCreator = exports.HealthApi = exports.HealthApiFactory = exports.HealthApiFp = exports.HealthApiAxiosParamCreator = exports.AuthSlsRestApiJwkCrvEnum = exports.AuthSlsRestApiJwkKtyEnum = exports.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum = exports.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum = exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum = exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum;
(function (AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum) {
    AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum[AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum["NUMBER_1"] = 1] = "NUMBER_1";
})(AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum = exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum || (exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum;
(function (AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum) {
    AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum["GithubLoginTokenEvent"] = "GithubLoginTokenEvent";
})(AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum = exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum || (exports.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiGithubLoginTokenEventV1VersionEnum;
(function (AuthSlsRestApiGithubLoginTokenEventV1VersionEnum) {
    AuthSlsRestApiGithubLoginTokenEventV1VersionEnum[AuthSlsRestApiGithubLoginTokenEventV1VersionEnum["NUMBER_1"] = 1] = "NUMBER_1";
})(AuthSlsRestApiGithubLoginTokenEventV1VersionEnum = exports.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum || (exports.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiGithubLoginTokenEventV1TypeEnum;
(function (AuthSlsRestApiGithubLoginTokenEventV1TypeEnum) {
    AuthSlsRestApiGithubLoginTokenEventV1TypeEnum["GithubLoginTokenEvent"] = "GithubLoginTokenEvent";
})(AuthSlsRestApiGithubLoginTokenEventV1TypeEnum = exports.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum || (exports.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiJwkKtyEnum;
(function (AuthSlsRestApiJwkKtyEnum) {
    AuthSlsRestApiJwkKtyEnum["Ec"] = "EC";
})(AuthSlsRestApiJwkKtyEnum = exports.AuthSlsRestApiJwkKtyEnum || (exports.AuthSlsRestApiJwkKtyEnum = {}));
/**
    * @export
    * @enum {string}
    */
var AuthSlsRestApiJwkCrvEnum;
(function (AuthSlsRestApiJwkCrvEnum) {
    AuthSlsRestApiJwkCrvEnum["P256"] = "P-256";
})(AuthSlsRestApiJwkCrvEnum = exports.AuthSlsRestApiJwkCrvEnum || (exports.AuthSlsRestApiJwkCrvEnum = {}));
/**
 * HealthApi - axios parameter creator
 * @export
 */
const HealthApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options = {}) => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.HealthApiAxiosParamCreator = HealthApiAxiosParamCreator;
/**
 * HealthApi - functional programming interface
 * @export
 */
const HealthApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.HealthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.HealthApiFp = HealthApiFp;
/**
 * HealthApi - factory interface
 * @export
 */
const HealthApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.HealthApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options) {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
    };
};
exports.HealthApiFactory = HealthApiFactory;
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
class HealthApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    get(options) {
        return (0, exports.HealthApiFp)(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.HealthApi = HealthApi;
/**
 * JwtApi - axios parameter creator
 * @export
 */
const JwtApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certs: async (options = {}) => {
            const localVarPath = `/api/v1/jwts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload: async (options = {}) => {
            const localVarPath = `/api/v1/jwts/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (authSlsRestApiTokenRequest, options = {}) => {
            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined
            (0, common_1.assertParamExists)('refresh', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest);
            const localVarPath = `/api/v1/jwts/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authSlsRestApiTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify: async (authSlsRestApiTokenRequest, options = {}) => {
            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined
            (0, common_1.assertParamExists)('verify', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest);
            const localVarPath = `/api/v1/jwts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authSlsRestApiTokenRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.JwtApiAxiosParamCreator = JwtApiAxiosParamCreator;
/**
 * JwtApi - functional programming interface
 * @export
 */
const JwtApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.JwtApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async certs(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.certs(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayload(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayload(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(authSlsRestApiTokenRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(authSlsRestApiTokenRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify(authSlsRestApiTokenRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(authSlsRestApiTokenRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.JwtApiFp = JwtApiFp;
/**
 * JwtApi - factory interface
 * @export
 */
const JwtApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.JwtApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certs(options) {
            return localVarFp.certs(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload(options) {
            return localVarFp.getPayload(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(authSlsRestApiTokenRequest, options) {
            return localVarFp.refresh(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(authSlsRestApiTokenRequest, options) {
            return localVarFp.verify(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.JwtApiFactory = JwtApiFactory;
/**
 * JwtApi - object-oriented interface
 * @export
 * @class JwtApi
 * @extends {BaseAPI}
 */
class JwtApi extends base_1.BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    certs(options) {
        return (0, exports.JwtApiFp)(this.configuration).certs(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    getPayload(options) {
        return (0, exports.JwtApiFp)(this.configuration).getPayload(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    refresh(authSlsRestApiTokenRequest, options) {
        return (0, exports.JwtApiFp)(this.configuration).refresh(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    verify(authSlsRestApiTokenRequest, options) {
        return (0, exports.JwtApiFp)(this.configuration).verify(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.JwtApi = JwtApi;
/**
 * JwtEmailApi - axios parameter creator
 * @export
 */
const JwtEmailApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmail: async (authSlsRestApiEmailLoginRequest, options = {}) => {
            // verify required parameter 'authSlsRestApiEmailLoginRequest' is not null or undefined
            (0, common_1.assertParamExists)('loginWithEmail', 'authSlsRestApiEmailLoginRequest', authSlsRestApiEmailLoginRequest);
            const localVarPath = `/api/v1/jwts/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authSlsRestApiEmailLoginRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.JwtEmailApiAxiosParamCreator = JwtEmailApiAxiosParamCreator;
/**
 * JwtEmailApi - functional programming interface
 * @export
 */
const JwtEmailApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.JwtEmailApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithEmail(authSlsRestApiEmailLoginRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithEmail(authSlsRestApiEmailLoginRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.JwtEmailApiFp = JwtEmailApiFp;
/**
 * JwtEmailApi - factory interface
 * @export
 */
const JwtEmailApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.JwtEmailApiFp)(configuration);
    return {
        /**
         *
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmail(authSlsRestApiEmailLoginRequest, options) {
            return localVarFp.loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.JwtEmailApiFactory = JwtEmailApiFactory;
/**
 * JwtEmailApi - object-oriented interface
 * @export
 * @class JwtEmailApi
 * @extends {BaseAPI}
 */
class JwtEmailApi extends base_1.BaseAPI {
    /**
     *
     * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtEmailApi
     */
    loginWithEmail(authSlsRestApiEmailLoginRequest, options) {
        return (0, exports.JwtEmailApiFp)(this.configuration).loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.JwtEmailApi = JwtEmailApi;
/**
 * JwtGithubApi - axios parameter creator
 * @export
 */
const JwtGithubApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogin: async (authSlsRestApiGithubLoginRequest, options = {}) => {
            // verify required parameter 'authSlsRestApiGithubLoginRequest' is not null or undefined
            (0, common_1.assertParamExists)('createLogin', 'authSlsRestApiGithubLoginRequest', authSlsRestApiGithubLoginRequest);
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authSlsRestApiGithubLoginRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUser: async (options = {}) => {
            const localVarPath = `/api/v1/jwts/github/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication jwt required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthDetail: async (options = {}) => {
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback: async (authSlsRestApiGithubJwtRequest, options = {}) => {
            // verify required parameter 'authSlsRestApiGithubJwtRequest' is not null or undefined
            (0, common_1.assertParamExists)('oauthCallback', 'authSlsRestApiGithubJwtRequest', authSlsRestApiGithubJwtRequest);
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authSlsRestApiGithubJwtRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.JwtGithubApiAxiosParamCreator = JwtGithubApiAxiosParamCreator;
/**
 * JwtGithubApi - functional programming interface
 * @export
 */
const JwtGithubApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.JwtGithubApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLogin(authSlsRestApiGithubLoginRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLogin(authSlsRestApiGithubLoginRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUser(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUser(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOauthDetail(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOauthDetail(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallback(authSlsRestApiGithubJwtRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(authSlsRestApiGithubJwtRequest, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.JwtGithubApiFp = JwtGithubApiFp;
/**
 * JwtGithubApi - factory interface
 * @export
 */
const JwtGithubApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.JwtGithubApiFp)(configuration);
    return {
        /**
         *
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogin(authSlsRestApiGithubLoginRequest, options) {
            return localVarFp.createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUser(options) {
            return localVarFp.getAuthenticatedUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthDetail(options) {
            return localVarFp.getOauthDetail(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback(authSlsRestApiGithubJwtRequest, options) {
            return localVarFp.oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(axios, basePath));
        },
    };
};
exports.JwtGithubApiFactory = JwtGithubApiFactory;
/**
 * JwtGithubApi - object-oriented interface
 * @export
 * @class JwtGithubApi
 * @extends {BaseAPI}
 */
class JwtGithubApi extends base_1.BaseAPI {
    /**
     *
     * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    createLogin(authSlsRestApiGithubLoginRequest, options) {
        return (0, exports.JwtGithubApiFp)(this.configuration).createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    getAuthenticatedUser(options) {
        return (0, exports.JwtGithubApiFp)(this.configuration).getAuthenticatedUser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    getOauthDetail(options) {
        return (0, exports.JwtGithubApiFp)(this.configuration).getOauthDetail(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    oauthCallback(authSlsRestApiGithubJwtRequest, options) {
        return (0, exports.JwtGithubApiFp)(this.configuration).oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.JwtGithubApi = JwtGithubApi;
//# sourceMappingURL=api.js.map