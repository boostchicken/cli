(()=>{"use strict";var e={936:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.JwtGithubApi=t.JwtGithubApiFactory=t.JwtGithubApiFp=t.JwtGithubApiAxiosParamCreator=t.JwtEmailApi=t.JwtEmailApiFactory=t.JwtEmailApiFp=t.JwtEmailApiAxiosParamCreator=t.JwtApi=t.JwtApiFactory=t.JwtApiFp=t.JwtApiAxiosParamCreator=t.HealthApi=t.HealthApiFactory=t.HealthApiFp=t.HealthApiAxiosParamCreator=t.AuthSlsRestApiJwkCrvEnum=t.AuthSlsRestApiJwkKtyEnum=t.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum=t.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum=t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum=t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum=void 0;const i=o(s(167)),r=s(849),a=s(451);var n,c;(c=t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum||(t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum={}))[c.NUMBER_1=1]="NUMBER_1",(t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum||(t.AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum={})).GithubLoginTokenEvent="GithubLoginTokenEvent",(n=t.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum||(t.AuthSlsRestApiGithubLoginTokenEventV1VersionEnum={}))[n.NUMBER_1=1]="NUMBER_1",(t.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum||(t.AuthSlsRestApiGithubLoginTokenEventV1TypeEnum={})).GithubLoginTokenEvent="GithubLoginTokenEvent",(t.AuthSlsRestApiJwkKtyEnum||(t.AuthSlsRestApiJwkKtyEnum={})).Ec="EC",(t.AuthSlsRestApiJwkCrvEnum||(t.AuthSlsRestApiJwkCrvEnum={})).P256="P-256",t.HealthApiAxiosParamCreator=function(e){return{get:async(t={})=>{const s=new URL("/api/health",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t};(0,r.setSearchParams)(s,{});let a=o&&o.headers?o.headers:{};return i.headers={...a,...t.headers},{url:(0,r.toPathString)(s),options:i}}}},t.HealthApiFp=function(e){const s=(0,t.HealthApiAxiosParamCreator)(e);return{async get(t){const o=await s.get(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)}}},t.HealthApiFactory=function(e,s,o){const i=(0,t.HealthApiFp)(e);return{get:e=>i.get(e).then((e=>e(o,s)))}};class u extends a.BaseAPI{get(e){return(0,t.HealthApiFp)(this.configuration).get(e).then((e=>e(this.axios,this.basePath)))}}t.HealthApi=u,t.JwtApiAxiosParamCreator=function(e){return{certs:async(t={})=>{const s=new URL("/api/v1/jwts",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t};(0,r.setSearchParams)(s,{});let a=o&&o.headers?o.headers:{};return i.headers={...a,...t.headers},{url:(0,r.toPathString)(s),options:i}},getPayload:async(t={})=>{const s=new URL("/api/v1/jwts/me",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t},a={};await(0,r.setBearerAuthToObject)(a,e),(0,r.setSearchParams)(s,{});let n=o&&o.headers?o.headers:{};return i.headers={...a,...n,...t.headers},{url:(0,r.toPathString)(s),options:i}},refresh:async(t,s={})=>{(0,r.assertParamExists)("refresh","authSlsRestApiTokenRequest",t);const o=new URL("/api/v1/jwts/refresh",r.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const a={method:"POST",...i,...s},n={"Content-Type":"application/json"};(0,r.setSearchParams)(o,{});let c=i&&i.headers?i.headers:{};return a.headers={...n,...c,...s.headers},a.data=(0,r.serializeDataIfNeeded)(t,a,e),{url:(0,r.toPathString)(o),options:a}},verify:async(t,s={})=>{(0,r.assertParamExists)("verify","authSlsRestApiTokenRequest",t);const o=new URL("/api/v1/jwts",r.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const a={method:"POST",...i,...s},n={"Content-Type":"application/json"};(0,r.setSearchParams)(o,{});let c=i&&i.headers?i.headers:{};return a.headers={...n,...c,...s.headers},a.data=(0,r.serializeDataIfNeeded)(t,a,e),{url:(0,r.toPathString)(o),options:a}}}},t.JwtApiFp=function(e){const s=(0,t.JwtApiAxiosParamCreator)(e);return{async certs(t){const o=await s.certs(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)},async getPayload(t){const o=await s.getPayload(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)},async refresh(t,o){const n=await s.refresh(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)},async verify(t,o){const n=await s.verify(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)}}},t.JwtApiFactory=function(e,s,o){const i=(0,t.JwtApiFp)(e);return{certs:e=>i.certs(e).then((e=>e(o,s))),getPayload:e=>i.getPayload(e).then((e=>e(o,s))),refresh:(e,t)=>i.refresh(e,t).then((e=>e(o,s))),verify:(e,t)=>i.verify(e,t).then((e=>e(o,s)))}};class l extends a.BaseAPI{certs(e){return(0,t.JwtApiFp)(this.configuration).certs(e).then((e=>e(this.axios,this.basePath)))}getPayload(e){return(0,t.JwtApiFp)(this.configuration).getPayload(e).then((e=>e(this.axios,this.basePath)))}refresh(e,s){return(0,t.JwtApiFp)(this.configuration).refresh(e,s).then((e=>e(this.axios,this.basePath)))}verify(e,s){return(0,t.JwtApiFp)(this.configuration).verify(e,s).then((e=>e(this.axios,this.basePath)))}}t.JwtApi=l,t.JwtEmailApiAxiosParamCreator=function(e){return{loginWithEmail:async(t,s={})=>{(0,r.assertParamExists)("loginWithEmail","authSlsRestApiEmailLoginRequest",t);const o=new URL("/api/v1/jwts/email",r.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const a={method:"POST",...i,...s},n={"Content-Type":"application/json"};(0,r.setSearchParams)(o,{});let c=i&&i.headers?i.headers:{};return a.headers={...n,...c,...s.headers},a.data=(0,r.serializeDataIfNeeded)(t,a,e),{url:(0,r.toPathString)(o),options:a}}}},t.JwtEmailApiFp=function(e){const s=(0,t.JwtEmailApiAxiosParamCreator)(e);return{async loginWithEmail(t,o){const n=await s.loginWithEmail(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)}}},t.JwtEmailApiFactory=function(e,s,o){const i=(0,t.JwtEmailApiFp)(e);return{loginWithEmail:(e,t)=>i.loginWithEmail(e,t).then((e=>e(o,s)))}};class p extends a.BaseAPI{loginWithEmail(e,s){return(0,t.JwtEmailApiFp)(this.configuration).loginWithEmail(e,s).then((e=>e(this.axios,this.basePath)))}}t.JwtEmailApi=p,t.JwtGithubApiAxiosParamCreator=function(e){return{createLogin:async(t,s={})=>{(0,r.assertParamExists)("createLogin","authSlsRestApiGithubLoginRequest",t);const o=new URL("/api/v1/jwts/github",r.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const a={method:"PUT",...i,...s},n={"Content-Type":"application/json"};(0,r.setSearchParams)(o,{});let c=i&&i.headers?i.headers:{};return a.headers={...n,...c,...s.headers},a.data=(0,r.serializeDataIfNeeded)(t,a,e),{url:(0,r.toPathString)(o),options:a}},getAuthenticatedUser:async(t={})=>{const s=new URL("/api/v1/jwts/github/me",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t},a={};await(0,r.setBearerAuthToObject)(a,e),(0,r.setSearchParams)(s,{});let n=o&&o.headers?o.headers:{};return i.headers={...a,...n,...t.headers},{url:(0,r.toPathString)(s),options:i}},getOauthDetail:async(t={})=>{const s=new URL("/api/v1/jwts/github",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t};(0,r.setSearchParams)(s,{});let a=o&&o.headers?o.headers:{};return i.headers={...a,...t.headers},{url:(0,r.toPathString)(s),options:i}},oauthCallback:async(t,s={})=>{(0,r.assertParamExists)("oauthCallback","authSlsRestApiGithubJwtRequest",t);const o=new URL("/api/v1/jwts/github",r.DUMMY_BASE_URL);let i;e&&(i=e.baseOptions);const a={method:"POST",...i,...s},n={"Content-Type":"application/json"};(0,r.setSearchParams)(o,{});let c=i&&i.headers?i.headers:{};return a.headers={...n,...c,...s.headers},a.data=(0,r.serializeDataIfNeeded)(t,a,e),{url:(0,r.toPathString)(o),options:a}}}},t.JwtGithubApiFp=function(e){const s=(0,t.JwtGithubApiAxiosParamCreator)(e);return{async createLogin(t,o){const n=await s.createLogin(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)},async getAuthenticatedUser(t){const o=await s.getAuthenticatedUser(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)},async getOauthDetail(t){const o=await s.getOauthDetail(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)},async oauthCallback(t,o){const n=await s.oauthCallback(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)}}},t.JwtGithubApiFactory=function(e,s,o){const i=(0,t.JwtGithubApiFp)(e);return{createLogin:(e,t)=>i.createLogin(e,t).then((e=>e(o,s))),getAuthenticatedUser:e=>i.getAuthenticatedUser(e).then((e=>e(o,s))),getOauthDetail:e=>i.getOauthDetail(e).then((e=>e(o,s))),oauthCallback:(e,t)=>i.oauthCallback(e,t).then((e=>e(o,s)))}};class h extends a.BaseAPI{createLogin(e,s){return(0,t.JwtGithubApiFp)(this.configuration).createLogin(e,s).then((e=>e(this.axios,this.basePath)))}getAuthenticatedUser(e){return(0,t.JwtGithubApiFp)(this.configuration).getAuthenticatedUser(e).then((e=>e(this.axios,this.basePath)))}getOauthDetail(e){return(0,t.JwtGithubApiFp)(this.configuration).getOauthDetail(e).then((e=>e(this.axios,this.basePath)))}oauthCallback(e,s){return(0,t.JwtGithubApiFp)(this.configuration).oauthCallback(e,s).then((e=>e(this.axios,this.basePath)))}}t.JwtGithubApi=h},451:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RequiredError=t.BaseAPI=t.COLLECTION_FORMATS=t.BASE_PATH=void 0;const i=o(s(167));t.BASE_PATH="https://sso.saml.to/auth".replace(/\/+$/,""),t.COLLECTION_FORMATS={csv:",",ssv:" ",tsv:"\t",pipes:"|"},t.BaseAPI=class{basePath;axios;configuration;constructor(e,s=t.BASE_PATH,o=i.default){this.basePath=s,this.axios=o,e&&(this.configuration=e,this.basePath=e.basePath||this.basePath)}};class r extends Error{field;name="RequiredError";constructor(e,t){super(t),this.field=e}}t.RequiredError=r},849:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRequestFunction=t.toPathString=t.serializeDataIfNeeded=t.setSearchParams=t.setOAuthToObject=t.setBearerAuthToObject=t.setBasicAuthToObject=t.setApiKeyToObject=t.assertParamExists=t.DUMMY_BASE_URL=void 0;const o=s(451);t.DUMMY_BASE_URL="https://example.com",t.assertParamExists=function(e,t,s){if(null==s)throw new o.RequiredError(t,`Required parameter ${t} was null or undefined when calling ${e}.`)},t.setApiKeyToObject=async function(e,t,s){if(s&&s.apiKey){const o="function"==typeof s.apiKey?await s.apiKey(t):await s.apiKey;e[t]=o}},t.setBasicAuthToObject=function(e,t){t&&(t.username||t.password)&&(e.auth={username:t.username,password:t.password})},t.setBearerAuthToObject=async function(e,t){if(t&&t.accessToken){const s="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;e.Authorization="Bearer "+s}},t.setOAuthToObject=async function(e,t,s,o){if(o&&o.accessToken){const i="function"==typeof o.accessToken?await o.accessToken(t,s):await o.accessToken;e.Authorization="Bearer "+i}},t.setSearchParams=function(e,...t){const s=new URLSearchParams(e.search);for(const e of t)for(const t in e)if(Array.isArray(e[t])){s.delete(t);for(const o of e[t])s.append(t,o)}else s.set(t,e[t]);e.search=s.toString()},t.serializeDataIfNeeded=function(e,t,s){const o="string"!=typeof e;return(o&&s&&s.isJsonMime?s.isJsonMime(t.headers["Content-Type"]):o)?JSON.stringify(void 0!==e?e:{}):e||""},t.toPathString=function(e){return e.pathname+e.search+e.hash},t.createRequestFunction=function(e,t,s,o){return(i=t,r=s)=>{const a={...e.options,url:(o?.basePath||r)+e.url};return i.request(a)}}},97:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Configuration=void 0,t.Configuration=class{apiKey;username;password;accessToken;basePath;baseOptions;formDataCtor;constructor(e={}){this.apiKey=e.apiKey,this.username=e.username,this.password=e.password,this.accessToken=e.accessToken,this.basePath=e.basePath,this.baseOptions=e.baseOptions,this.formDataCtor=e.formDataCtor}isJsonMime(e){const t=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==e&&(t.test(e)||"application/json-patch+json"===e.toLowerCase())}}},95:function(e,t,s){var o=this&&this.__createBinding||(Object.create?function(e,t,s,o){void 0===o&&(o=s),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,o){void 0===o&&(o=s),e[o]=t[s]}),i=this&&this.__exportStar||function(e,t){for(var s in e)"default"===s||Object.prototype.hasOwnProperty.call(t,s)||o(t,e,s)};Object.defineProperty(t,"__esModule",{value:!0}),i(s(936),t),i(s(97),t)},703:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.IDPApi=t.IDPApiFactory=t.IDPApiFp=t.IDPApiAxiosParamCreator=t.HealthApi=t.HealthApiFactory=t.HealthApiFp=t.HealthApiAxiosParamCreator=t.GithubSlsRestApiNameIdFormatV1=t.GithubSlsRestApiConfigV20220101VersionEnum=t.GithubSlsRestApiConfigBase20220101VersionEnum=t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum=t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum=void 0;const i=o(s(167)),r=s(476),a=s(347);var n,c;(t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum||(t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum={})).GithubLoginTokenEvent="GithubLoginTokenEvent",(c=t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum||(t.GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum={}))[c.NUMBER_1=1]="NUMBER_1",(t.GithubSlsRestApiConfigBase20220101VersionEnum||(t.GithubSlsRestApiConfigBase20220101VersionEnum={}))._20220101="20220101",(t.GithubSlsRestApiConfigV20220101VersionEnum||(t.GithubSlsRestApiConfigV20220101VersionEnum={}))._20220101="20220101",(n=t.GithubSlsRestApiNameIdFormatV1||(t.GithubSlsRestApiNameIdFormatV1={})).Id="id",n.Login="login",n.Email="email",n.EmailV2="emailV2",t.HealthApiAxiosParamCreator=function(e){return{get:async(t={})=>{const s=new URL("/api/health",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t};(0,r.setSearchParams)(s,{});let a=o&&o.headers?o.headers:{};return i.headers={...a,...t.headers},{url:(0,r.toPathString)(s),options:i}}}},t.HealthApiFp=function(e){const s=(0,t.HealthApiAxiosParamCreator)(e);return{async get(t){const o=await s.get(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)}}},t.HealthApiFactory=function(e,s,o){const i=(0,t.HealthApiFp)(e);return{get:e=>i.get(e).then((e=>e(o,s)))}};class u extends a.BaseAPI{get(e){return(0,t.HealthApiFp)(this.configuration).get(e).then((e=>e(this.axios,this.basePath)))}}t.HealthApi=u,t.IDPApiAxiosParamCreator=function(e){return{assumeRole:async(t,s,o,i={})=>{(0,r.assertParamExists)("assumeRole","role",t);const a="/api/v1/idp/roles/{role}/assume".replace("{role}",encodeURIComponent(String(t))),n=new URL(a,r.DUMMY_BASE_URL);let c;e&&(c=e.baseOptions);const u={method:"POST",...c,...i},l={},p={};await(0,r.setBearerAuthToObject)(l,e),void 0!==s&&(p.org=s),void 0!==o&&(p.provider=o),(0,r.setSearchParams)(n,p);let h=c&&c.headers?c.headers:{};return u.headers={...l,...h,...i.headers},{url:(0,r.toPathString)(n),options:u}},encrypt:async(t,s,o={})=>{(0,r.assertParamExists)("encrypt","org",t),(0,r.assertParamExists)("encrypt","githubSlsRestApiEncryptRequest",s);const i="/api/v1/idp/orgs/{org}/encrypt".replace("{org}",encodeURIComponent(String(t))),a=new URL(i,r.DUMMY_BASE_URL);let n;e&&(n=e.baseOptions);const c={method:"POST",...n,...o},u={"Content-Type":"application/json"};(0,r.setSearchParams)(a,{});let l=n&&n.headers?n.headers:{};return c.headers={...u,...l,...o.headers},c.data=(0,r.serializeDataIfNeeded)(s,c,e),{url:(0,r.toPathString)(a),options:c}},getOrgConfig:async(t,s,o={})=>{(0,r.assertParamExists)("getOrgConfig","org",t);const i="/api/v1/idp/orgs/{org}/config".replace("{org}",encodeURIComponent(String(t))),a=new URL(i,r.DUMMY_BASE_URL);let n;e&&(n=e.baseOptions);const c={method:"GET",...n,...o},u={},l={};await(0,r.setBearerAuthToObject)(u,e),void 0!==s&&(l.raw=s),(0,r.setSearchParams)(a,l);let p=n&&n.headers?n.headers:{};return c.headers={...u,...p,...o.headers},{url:(0,r.toPathString)(a),options:c}},getOrgMetadata:async(t,s={})=>{(0,r.assertParamExists)("getOrgMetadata","org",t);const o="/api/v1/idp/orgs/{org}/metadata".replace("{org}",encodeURIComponent(String(t))),i=new URL(o,r.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const n={method:"GET",...a,...s},c={};await(0,r.setBearerAuthToObject)(c,e),(0,r.setSearchParams)(i,{});let u=a&&a.headers?a.headers:{};return n.headers={...c,...u,...s.headers},{url:(0,r.toPathString)(i),options:n}},listLogins:async(t,s,o={})=>{const i=new URL("/api/v1/idp/logins",r.DUMMY_BASE_URL);let a;e&&(a=e.baseOptions);const n={method:"GET",...a,...o},c={},u={};await(0,r.setBearerAuthToObject)(c,e),void 0!==t&&(u.org=t),void 0!==s&&(u.refresh=s),(0,r.setSearchParams)(i,u);let l=a&&a.headers?a.headers:{};return n.headers={...c,...l,...o.headers},{url:(0,r.toPathString)(i),options:n}},listOrgRepos:async(t={})=>{const s=new URL("/api/v1/idp/orgs",r.DUMMY_BASE_URL);let o;e&&(o=e.baseOptions);const i={method:"GET",...o,...t},a={};await(0,r.setBearerAuthToObject)(a,e),(0,r.setSearchParams)(s,{});let n=o&&o.headers?o.headers:{};return i.headers={...a,...n,...t.headers},{url:(0,r.toPathString)(s),options:i}},listRoles:async(t,s,o,i={})=>{const a=new URL("/api/v1/idp/roles",r.DUMMY_BASE_URL);let n;e&&(n=e.baseOptions);const c={method:"GET",...n,...i},u={},l={};await(0,r.setBearerAuthToObject)(u,e),void 0!==t&&(l.org=t),void 0!==s&&(l.provider=s),void 0!==o&&(l.refresh=o),(0,r.setSearchParams)(a,l);let p=n&&n.headers?n.headers:{};return c.headers={...u,...p,...i.headers},{url:(0,r.toPathString)(a),options:c}},providerLogin:async(t,s,o={})=>{(0,r.assertParamExists)("providerLogin","provider",t);const i="/api/v1/idp/logins/{provider}/login".replace("{provider}",encodeURIComponent(String(t))),a=new URL(i,r.DUMMY_BASE_URL);let n;e&&(n=e.baseOptions);const c={method:"POST",...n,...o},u={},l={};await(0,r.setBearerAuthToObject)(u,e),void 0!==s&&(l.org=s),(0,r.setSearchParams)(a,l);let p=n&&n.headers?n.headers:{};return c.headers={...u,...p,...o.headers},{url:(0,r.toPathString)(a),options:c}},setOrgAndRepo:async(t,s,o,i={})=>{(0,r.assertParamExists)("setOrgAndRepo","org",t),(0,r.assertParamExists)("setOrgAndRepo","repo",s);const a="/api/v1/idp/orgs/{org}/repos/{repo}".replace("{org}",encodeURIComponent(String(t))).replace("{repo}",encodeURIComponent(String(s))),n=new URL(a,r.DUMMY_BASE_URL);let c;e&&(c=e.baseOptions);const u={method:"POST",...c,...i},l={},p={};await(0,r.setBearerAuthToObject)(l,e),void 0!==o&&(p.force=o),(0,r.setSearchParams)(n,p);let h=c&&c.headers?c.headers:{};return u.headers={...l,...h,...i.headers},{url:(0,r.toPathString)(n),options:u}}}},t.IDPApiFp=function(e){const s=(0,t.IDPApiAxiosParamCreator)(e);return{async assumeRole(t,o,n,c){const u=await s.assumeRole(t,o,n,c);return(0,r.createRequestFunction)(u,i.default,a.BASE_PATH,e)},async encrypt(t,o,n){const c=await s.encrypt(t,o,n);return(0,r.createRequestFunction)(c,i.default,a.BASE_PATH,e)},async getOrgConfig(t,o,n){const c=await s.getOrgConfig(t,o,n);return(0,r.createRequestFunction)(c,i.default,a.BASE_PATH,e)},async getOrgMetadata(t,o){const n=await s.getOrgMetadata(t,o);return(0,r.createRequestFunction)(n,i.default,a.BASE_PATH,e)},async listLogins(t,o,n){const c=await s.listLogins(t,o,n);return(0,r.createRequestFunction)(c,i.default,a.BASE_PATH,e)},async listOrgRepos(t){const o=await s.listOrgRepos(t);return(0,r.createRequestFunction)(o,i.default,a.BASE_PATH,e)},async listRoles(t,o,n,c){const u=await s.listRoles(t,o,n,c);return(0,r.createRequestFunction)(u,i.default,a.BASE_PATH,e)},async providerLogin(t,o,n){const c=await s.providerLogin(t,o,n);return(0,r.createRequestFunction)(c,i.default,a.BASE_PATH,e)},async setOrgAndRepo(t,o,n,c){const u=await s.setOrgAndRepo(t,o,n,c);return(0,r.createRequestFunction)(u,i.default,a.BASE_PATH,e)}}},t.IDPApiFactory=function(e,s,o){const i=(0,t.IDPApiFp)(e);return{assumeRole:(e,t,r,a)=>i.assumeRole(e,t,r,a).then((e=>e(o,s))),encrypt:(e,t,r)=>i.encrypt(e,t,r).then((e=>e(o,s))),getOrgConfig:(e,t,r)=>i.getOrgConfig(e,t,r).then((e=>e(o,s))),getOrgMetadata:(e,t)=>i.getOrgMetadata(e,t).then((e=>e(o,s))),listLogins:(e,t,r)=>i.listLogins(e,t,r).then((e=>e(o,s))),listOrgRepos:e=>i.listOrgRepos(e).then((e=>e(o,s))),listRoles:(e,t,r,a)=>i.listRoles(e,t,r,a).then((e=>e(o,s))),providerLogin:(e,t,r)=>i.providerLogin(e,t,r).then((e=>e(o,s))),setOrgAndRepo:(e,t,r,a)=>i.setOrgAndRepo(e,t,r,a).then((e=>e(o,s)))}};class l extends a.BaseAPI{assumeRole(e,s,o,i){return(0,t.IDPApiFp)(this.configuration).assumeRole(e,s,o,i).then((e=>e(this.axios,this.basePath)))}encrypt(e,s,o){return(0,t.IDPApiFp)(this.configuration).encrypt(e,s,o).then((e=>e(this.axios,this.basePath)))}getOrgConfig(e,s,o){return(0,t.IDPApiFp)(this.configuration).getOrgConfig(e,s,o).then((e=>e(this.axios,this.basePath)))}getOrgMetadata(e,s){return(0,t.IDPApiFp)(this.configuration).getOrgMetadata(e,s).then((e=>e(this.axios,this.basePath)))}listLogins(e,s,o){return(0,t.IDPApiFp)(this.configuration).listLogins(e,s,o).then((e=>e(this.axios,this.basePath)))}listOrgRepos(e){return(0,t.IDPApiFp)(this.configuration).listOrgRepos(e).then((e=>e(this.axios,this.basePath)))}listRoles(e,s,o,i){return(0,t.IDPApiFp)(this.configuration).listRoles(e,s,o,i).then((e=>e(this.axios,this.basePath)))}providerLogin(e,s,o){return(0,t.IDPApiFp)(this.configuration).providerLogin(e,s,o).then((e=>e(this.axios,this.basePath)))}setOrgAndRepo(e,s,o,i){return(0,t.IDPApiFp)(this.configuration).setOrgAndRepo(e,s,o,i).then((e=>e(this.axios,this.basePath)))}}t.IDPApi=l},347:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.RequiredError=t.BaseAPI=t.COLLECTION_FORMATS=t.BASE_PATH=void 0;const i=o(s(167));t.BASE_PATH="https://sso.saml.to/github".replace(/\/+$/,""),t.COLLECTION_FORMATS={csv:",",ssv:" ",tsv:"\t",pipes:"|"},t.BaseAPI=class{basePath;axios;configuration;constructor(e,s=t.BASE_PATH,o=i.default){this.basePath=s,this.axios=o,e&&(this.configuration=e,this.basePath=e.basePath||this.basePath)}};class r extends Error{field;name="RequiredError";constructor(e,t){super(t),this.field=e}}t.RequiredError=r},476:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRequestFunction=t.toPathString=t.serializeDataIfNeeded=t.setSearchParams=t.setOAuthToObject=t.setBearerAuthToObject=t.setBasicAuthToObject=t.setApiKeyToObject=t.assertParamExists=t.DUMMY_BASE_URL=void 0;const o=s(347);t.DUMMY_BASE_URL="https://example.com",t.assertParamExists=function(e,t,s){if(null==s)throw new o.RequiredError(t,`Required parameter ${t} was null or undefined when calling ${e}.`)},t.setApiKeyToObject=async function(e,t,s){if(s&&s.apiKey){const o="function"==typeof s.apiKey?await s.apiKey(t):await s.apiKey;e[t]=o}},t.setBasicAuthToObject=function(e,t){t&&(t.username||t.password)&&(e.auth={username:t.username,password:t.password})},t.setBearerAuthToObject=async function(e,t){if(t&&t.accessToken){const s="function"==typeof t.accessToken?await t.accessToken():await t.accessToken;e.Authorization="Bearer "+s}},t.setOAuthToObject=async function(e,t,s,o){if(o&&o.accessToken){const i="function"==typeof o.accessToken?await o.accessToken(t,s):await o.accessToken;e.Authorization="Bearer "+i}},t.setSearchParams=function(e,...t){const s=new URLSearchParams(e.search);for(const e of t)for(const t in e)if(Array.isArray(e[t])){s.delete(t);for(const o of e[t])s.append(t,o)}else s.set(t,e[t]);e.search=s.toString()},t.serializeDataIfNeeded=function(e,t,s){const o="string"!=typeof e;return(o&&s&&s.isJsonMime?s.isJsonMime(t.headers["Content-Type"]):o)?JSON.stringify(void 0!==e?e:{}):e||""},t.toPathString=function(e){return e.pathname+e.search+e.hash},t.createRequestFunction=function(e,t,s,o){return(i=t,r=s)=>{const a={...e.options,url:(o?.basePath||r)+e.url};return i.request(a)}}},339:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Configuration=void 0,t.Configuration=class{apiKey;username;password;accessToken;basePath;baseOptions;formDataCtor;constructor(e={}){this.apiKey=e.apiKey,this.username=e.username,this.password=e.password,this.accessToken=e.accessToken,this.basePath=e.basePath,this.baseOptions=e.baseOptions,this.formDataCtor=e.formDataCtor}isJsonMime(e){const t=new RegExp("^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$","i");return null!==e&&(t.test(e)||"application/json-patch+json"===e.toLowerCase())}}},918:function(e,t,s){var o=this&&this.__createBinding||(Object.create?function(e,t,s,o){void 0===o&&(o=s),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[s]}})}:function(e,t,s,o){void 0===o&&(o=s),e[o]=t[s]}),i=this&&this.__exportStar||function(e,t){for(var s in e)"default"===s||Object.prototype.hasOwnProperty.call(t,s)||o(t,e,s)};Object.defineProperty(t,"__esModule",{value:!0}),i(s(703),t),i(s(339),t)},354:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=o(s(622)),r=s(504);process.on("SIGINT",(()=>{process.exit(0)})),(async()=>{try{i.default.debug("Starting CLI");const e=new r.Command("saml-to");await e.run(process.argv)}catch(e){throw e instanceof Error&&(console.error(`Error: ${e.message}`,e),process.exit(-1)),e}process.exit(0)})()},504:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Command=t.ui=void 0;const i=s(758),r=o(s(760)),a=o(s(167)),n=s(71),c=s(400),u=s(460),l=s(160),p=o(s(290)),h=s(983),d=s(23),m=s(174),g=s(301),f=async(e,t)=>{try{await t()}catch(s){if(!(s instanceof h.NoTokenError))throw s;{const s=new d.GithubHelper;await s.promptLogin(e),await t()}}};t.ui=new p.default.ui.BottomBar,t.Command=class{name;assume;login;init;show;add;set;constructor(e){this.name=e,this.assume=new n.Assume,this.login=new g.Login,this.init=new c.Init,this.show=new u.Show,this.add=new m.Add,this.set=new l.Set}async run(e){const s=r.default.scriptName(this.name).command({command:"list-logins",describe:"Show providers that are available to login",handler:async({org:e,provider:t,refresh:s})=>f("user:email",(()=>this.show.handle("logins",e,t,!1,s,!1))),builder:{org:{demand:!1,type:"string",description:"Specify an organization"},provider:{demand:!1,type:"string",description:"Specify an provider"},refresh:{demand:!1,type:"boolean",default:!1,description:"Refresh cached logins from source control"}}}).command({command:"list-roles",describe:"Show roles that are available to assume",handler:async({org:e,provider:t,refresh:s})=>f("user:email",(()=>this.show.handle("roles",e,t,!1,s,!1))),builder:{org:{demand:!1,type:"string",description:"Specify an organization"},provider:{demand:!1,type:"string",description:"Specify a provider"},refresh:{demand:!1,type:"boolean",default:!1,description:"Refresh cached logins from source control"}}}).command({command:"login [provider]",describe:"Login to a provider",handler:({org:e,provider:t})=>f("user:email",(()=>this.login.handle(t,e))),builder:{provider:{demand:!1,type:"string",description:"The provider for which to login"},org:{demand:!1,type:"string",description:"Specify an organization"}}}).command({command:"assume [role]",describe:"Assume a role",handler:({role:e,org:t,provider:s,headless:o})=>f("user:email",(()=>this.assume.handle(e,o,t,s))),builder:{role:{demand:!1,type:"string",description:"The role to assume"},org:{demand:!1,type:"string",description:"Specify an organization"},headless:{demand:!1,type:"boolean",default:!1,description:"Output access credentials to the terminal"},provider:{demand:!1,type:"string",description:"Specify the provider"}}}).command({command:"init",describe:"(Administrative) Initialize SAML.to with a GitHub Repository",handler:async({force:e})=>{await this.init.handle(e),t.ui.updateBottomBar(""),console.log(`\nNext, you can to configure a Service Provider for SAML.to.\n\nThe service provider will need your SAML Metadata or Certificicate, available with the following commands:\n - \`${this.name} show metadata\`\n - \`${this.name} show certificate\`\n - \`${this.name} add provider\`\n`)},builder:{repoUrl:{demand:!1,type:"string"},force:{demand:!1,type:"boolean",default:!1}}}).command({command:"add provider [name]",describe:"(Administrative) Add a provider to the configuration",handler:async({name:e,entityId:t,acsUrl:s,loginUrl:o,nameId:i,nameIdFormat:r,attribute:a})=>{await f("repo",(()=>this.add.handle("provider",e,t,s,o,i,r||"NONE",a)))},builder:{name:{demand:!1,type:"string"},entityId:{demand:!1,type:"string"},acsUrl:{demand:!1,type:"string"},loginUrl:{demand:!1,type:"string"},nameId:{demand:!1,type:"string"},nameIdFormat:{demand:!1,type:"string",choices:["id","login","email","emailV2","none"]},attribute:{demand:!1,type:"array",description:"Additional addtributes in key=value pairs",coerce:e=>{if(e&&Array.isArray(e))return e.reduce(((e,t)=>{try{const s=JSON.parse(('{"'+t.replace(/^\s+|\s+$/g,"").replace(/=(?=\s|$)/g,'="" ').replace(/\s+(?=([^"]*"[^"]*")*[^"]*$)/g,'", "').replace(/=/g,'": "')+'"}').replace(/""/g,'"'));return{...e,...s}}catch(e){if(e instanceof Error)throw new Error(`Error parsing ${t}: ${e.message}`)}}),{})}}}}).command({command:"set [name] [subcommand]",describe:"(Administrative) Set a provider setting (e.g. provisioning",handler:async({name:e,subcommand:t,type:s,endpoint:o,token:i})=>{await f("repo",(()=>this.set.handle(t,e,{type:s,endpoint:o,token:i})))},builder:{name:{demand:!0,type:"string"},subcommand:{demand:!0,type:"string",choices:["provisioning"]},type:{demand:!0,type:"string",choices:["scim"]},endpoint:{demand:!0,type:"string"},token:{demand:!0,type:"string"}}}).command({command:"show [subcommand]",describe:"(Administrative) Show various configurations (metadata, certificate, entityId, config, etc.)",handler:async({org:e,provider:t,subcommand:s,save:o,refresh:i,raw:r})=>f("user:email",(()=>this.show.handle(s,e,t,o,i,r))),builder:{subcommand:{demand:!0,type:"string",choices:["metadata","certificate","entityId","loginUrl","logoutUrl","config","roles","logins","orgs"]},org:{demand:!1,type:"string",description:"Specify an organization"},provider:{demand:!1,type:"string",description:"Specify a provider"},save:{demand:!1,type:"boolean",description:"Output to a file"},refresh:{demand:!1,type:"boolean",default:!1,description:"Refresh backend config"},raw:{demand:!1,type:"boolean",default:!1,description:"For `config` subcommand, show raw configuration"}}}).help().showHelpOnFail(!0).strict().wrap(null).fail(((e,s)=>{a.default.isAxiosError(s)?s.response&&401===s.response.status?(t.ui.updateBottomBar(""),console.error("Unauthorized")):(t.ui.updateBottomBar(""),console.error(`API Error: ${s.response&&s.response.data&&s.response.data.message||s.message}`)):(t.ui.updateBottomBar(""),console.error(`Error: ${s?s.message:e}`)),process.exit(-1)}));0===(await s.parse((0,i.hideBin)(e)))._.length&&s.showHelp(),process.exit(0)}}},174:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Add=void 0;const i=o(s(290)),r=s(504),a=s(460),n=s(793),c=s(479),u=s(400),l=s(873),p=s(620),h=s(543),d=s(171);t.Add=class{show;awsHelper;awsSsoHelper;configHelper;orgHelper;genericHelper;constructor(){this.show=new a.Show,this.awsHelper=new c.AwsHelper,this.awsSsoHelper=new d.AwsSsoHelper,this.configHelper=new l.ConfigHelper,this.orgHelper=new p.OrgHelper,this.genericHelper=new h.GenericHelper}async handle(e,t,s,o,i,r,a,n){switch(e){case"provider":await this.addProvider(t,s,o,i,r,a,n)&&console.log("\nProvider has been added!\n\nUsers can login or assume roles using the following commands:\n\n - `saml-to login`\n - `saml-to assume`");break;case"permission":await this.addPermission()&&console.log("\nPermissions have been granted!");break;default:throw new Error(`Unknown subcommand: ${e}`)}}async addProvider(e,t,s,o,i,a,c){const{org:u,repo:l}=await this.orgHelper.promptOrg("manage");r.ui.updateBottomBar("Fetching config...");const p=await this.configHelper.fetchConfigYaml(u,!0),h=(0,n.load)(p);if(!h.version)throw new Error("Missing version in config");const d=await this.genericHelper.promptProvider(u,l,h,e,t,s,o,i,a,c);return d&&(await this.configHelper.fetchConfigYaml(u),r.ui.updateBottomBar(""),console.log("Configuration is valid!")),d}async addPermission(){const{org:e,repo:t}=await this.orgHelper.promptOrg("log in"),s=await this.configHelper.fetchConfigYaml(e,!0),o=(0,n.load)(s);if(!o.version)throw new Error("Missing version in config");let i=!1;if("20220101"!==o.version)throw new Error(`Invalid config version: ${o.version}`);return i=await this.addPermissionV20220101(e,t,o),i&&(await this.configHelper.fetchConfigYaml(e),r.ui.updateBottomBar(""),console.log("Configuration is valid!")),i}async addPermissionV20220101(e,t,s){if(!s.providers||!Object.keys(s.providers).length)throw new Error(`There are no \`providers\` in the in \`${e}/${t}/${u.CONFIG_FILE}\`. Add a provider first using the \`add provider\` command`);r.ui.updateBottomBar("");const o=(await i.default.prompt({type:"list",name:"issuer",message:"For which provider would you like to grant user permission?",choices:Object.entries(s.providers).map((([e,t])=>({name:e,value:t.entityId})))})).issuer;if(o&&o.toLowerCase().endsWith(".amazon.com/saml"))return this.awsHelper.promptPermissionV20220101(e,t,s);throw new Error(`This utility is not familiar with the issuer: ${o}\n\nPlease add permissions by manually editing the configuration file \`${u.CONFIG_FILE} in \`${e}/${t}\`.\n\nThe configuration file reference can be found here: https://docs.saml.to/configuration/reference\n`)}}},71:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Assume=void 0;const i=s(918),r=s(740),a=s(983),n=o(s(167)),c=o(s(634)),u=s(460),l=o(s(290)),p=s(504),h=s(479);t.Assume=class{scms;show;awsHelper;constructor(){this.scms=new a.Scms,this.show=new u.Show,this.awsHelper=new h.AwsHelper}async handle(e,t=!1,s,o){if(!e&&!t){const t=await this.promptRole(s,o);e=t.role,s=t.org,o=t.provider}t||p.ui.updateBottomBar(`Assuming ${e}`);const a=this.scms.getGithubToken();if(!a)throw new Error(r.NO_GITHUB_CLIENT);if(!e)throw new Error("Please specify a role to assume");const c=new i.IDPApi(new i.Configuration({accessToken:a}));try{const{data:i}=await c.assumeRole(e,s,o);t?await this.assumeTerminal(i):await this.assumeBrowser(i)}catch(t){if(n.default.isAxiosError(t)&&t.response)throw 403===t.response.status?new Error((0,r.ERROR_ASSUMING_ROLE)(e,`Reason: ${t.response.data.message}`)):404===t.response.status?new Error((0,r.MULTIPLE_ROLES)(e,`Reason: ${t.response.data.message}`)):t;throw t}}async assumeBrowser(e){if(!e.browserUri)throw new Error("Browser URI is not set.");{const t=await(0,c.default)(e.browserUri);console.log("!!! Browser open result",JSON.stringify(t))}}async assumeTerminal(e){if(e.recipient.endsWith(".amazon.com/saml"))return this.awsHelper.assumeAws(e);throw new Error((0,r.TERMINAL_NOT_SUPPORTED)(e.provider,e.recipient))}async promptRole(e,t){const s=await this.show.fetchRoles(e,t);p.ui.updateBottomBar("");const{roleIx:o}=await l.default.prompt({type:"list",name:"roleIx",message:"Which role would you like to assume?",choices:s.map(((e,t)=>({name:`${e.role} [${e.provider}] (${e.org})`,value:t})))});return s[o]}}},400:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Init=t.CONFIG_FILE=void 0;const i=o(s(622)),r=s(740),a=s(23),n=o(s(290)),c=s(918),u=s(983),l=s(460),p=s(504),h=s(386),d=s(793),m=s(942);t.CONFIG_FILE="saml-to.yml";const g={version:c.GithubSlsRestApiConfigV20220101VersionEnum._20220101,providers:{},permissions:{}};t.Init=class{githubHelper;scms;show;constructor(){this.githubHelper=new a.GithubHelper,this.scms=new u.Scms,this.show=new l.Show}async handle(e=!1){p.ui.updateBottomBar(""),console.log(`Welcome to SAML.to!\n\nSAML.to enables administrators to grant access to Service Providers to GitHub users.\n\nThis utility will assist you in connecting a new or existing repository of your choice for configuration.\n\nSAML.to is configured by adding a \`${t.CONFIG_FILE}\` to any GitHub organization and repository which defines providers and access privleges.\n\nOnce configured, you (or users in your organzation) will be able to login to services (and assume roles, if supported) using this utility or from the web.\n\nFor more information, check out https://docs.saml.to\n`),p.ui.updateBottomBar("");const{org:s}=await n.default.prompt({type:"input",name:"org",message:"Which GitHub User or Organiztion would you like to use?\n"});p.ui.updateBottomBar(`Checking if ${s} exists...`),await this.assertOrg(s),p.ui.updateBottomBar("");const{repo:o}=await n.default.prompt({type:"input",name:"repo",default:"saml-to",message:`Which Repository within ${s} would you like to use to store the \`${t.CONFIG_FILE}\` configuration file?\n(If it doesn't yet exist, we'll give you an option to create it!)\n`});p.ui.updateBottomBar(`Checking access to ${s}/${o}...`),await this.assertRepo(s,o,"repo"),p.ui.updateBottomBar(`Registering ${s}/${o}...`),await this.registerRepo(s,o,e),p.ui.updateBottomBar("Fetching metadata..."),await this.show.fetchMetadataXml(s),this.scms.saveGithubOrg(s),p.ui.updateBottomBar(""),console.log(`Repository \`${s}/${o}\` registered!`)}async assertOrg(e){const t=new m.Octokit;try{const{data:s}=await t.users.getByUsername({username:e});if("User"===s.type)return"User";if("Organization"===s.type)return"Organization";throw new Error(`Unknown user type for \`${e}\`: ${s.type}, must be 'User' or 'Organization'`)}catch(t){if(t instanceof h.RequestError&&404===t.status)throw new Error(`Unable to find user or organization: ${e}`);throw t}}async assertRepo(e,s,o){await this.githubHelper.assertScope(o,e);const{github:i}=await this.scms.loadClients();if(!i)return await this.githubHelper.promptLogin(o),this.assertRepo(e,s,o);const{data:a}=await i.users.getAuthenticated();if(a.login.toLowerCase()!==e.toLowerCase()){p.ui.updateBottomBar(`Checking membership on ${e}/${s}...`);try{await i.orgs.checkMembershipForUser({org:e,username:a.login})}catch(t){if(t instanceof Error)return p.ui.updateBottomBar(""),console.log((0,r.GITHUB_ACCESS_NEEDED)(e,o)),await this.githubHelper.promptLogin("repo",e),this.assertRepo(e,s,o)}}p.ui.updateBottomBar(`Checking access to ${e}/${s}...`);try{const{data:t}=await i.repos.get({owner:e,repo:s});if("public"===t.visibility){p.ui.updateBottomBar("");const{makePrivate:t}=await n.default.prompt({type:"confirm",name:"makePrivate",message:`\`${e}/${s}\` appears to be a Public Repository. It's recommended to keep it private. Would you like to convert it to a private repository?`});t?await i.repos.update({owner:e,repo:s,visibility:"private"}):console.warn(`WARN: ${e}/${s} is publicly visible, but it does not need to be!`)}}catch(t){if(t instanceof Error){p.ui.updateBottomBar("");const{createRepo:t}=await n.default.prompt({type:"confirm",name:"createRepo",message:`It appears that \`${e}/${s}\` does not exist yet, do you want to create it?`});if(!t)throw new Error((0,r.REPO_DOES_NOT_EXIST)(e,s));return p.ui.updateBottomBar(`Creating repository ${e}/${s}...`),a.login.toLowerCase()!==e.toLowerCase()?await i.repos.createInOrg({name:s,org:e,visibility:"private"}):await i.repos.createForAuthenticatedUser({name:s,visibility:"private"}),this.assertRepo(e,s,o)}}p.ui.updateBottomBar("Checking for existing config...");try{await i.repos.getContent({owner:e,repo:s,path:t.CONFIG_FILE})}catch(o){if(o instanceof h.RequestError&&404===o.status){p.ui.updateBottomBar("");const{createConfig:o}=await n.default.prompt({type:"confirm",name:"createConfig",message:`It appears that \`${e}/${s}\` does not contain \`${t.CONFIG_FILE}\` yet. Would you like to create an empty config file?`});if(!o)return void console.warn(`Skipping creation of \`${t.CONFIG_FILE}\`, please be sure to create it!`);await i.repos.createOrUpdateFileContents({owner:e,repo:s,content:Buffer.from(`---\n${(0,d.dump)(g)}\n`,"utf8").toString("base64"),message:"initial saml.to configuration",path:t.CONFIG_FILE})}}}async registerRepo(e,t,s){const o=this.scms.getGithubToken(),r=new c.IDPApi(new c.Configuration({accessToken:o})),{data:a}=await r.setOrgAndRepo(e,t,s);i.default.debug("Initialized repo",a)}}},301:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Login=void 0;const i=s(918),r=s(740),a=s(983),n=o(s(167)),c=o(s(634)),u=s(460),l=s(479),p=s(504),h=o(s(290));t.Login=class{scms;show;awsHelper;constructor(){this.scms=new a.Scms,this.show=new u.Show,this.awsHelper=new l.AwsHelper}async handle(e,t){if(!e){const s=await this.promptLogin(t);e=s.provider,t=s.org}p.ui.updateBottomBar(`Logging into ${e} (org: ${t})`);const s=this.scms.getGithubToken();if(!s)throw new Error(r.NO_GITHUB_CLIENT);const o=new i.IDPApi(new i.Configuration({accessToken:s}));try{const{data:s}=await o.providerLogin(e,t);await this.assumeBrowser(s)}catch(t){if(n.default.isAxiosError(t)&&t.response)throw 403===t.response.status?new Error((0,r.ERROR_LOGGING_IN)(e,`Reason: ${t.response.data.message}`)):404===t.response.status?new Error((0,r.MULTIPLE_LOGINS)(e,`Reason: ${t.response.data.message}`)):t;throw t}}async assumeBrowser(e){if(!e.browserUri)throw new Error("Browser URI is not set.");await(0,c.default)(e.browserUri)}async promptLogin(e){const t=await this.show.fetchLogins(e);p.ui.updateBottomBar("");const{loginIx:s}=await h.default.prompt({type:"list",name:"loginIx",message:"For which provider would you like to log in?",choices:t.map(((e,t)=>({name:`${e.provider} (${e.org})`,value:t})))});return t[s]}}},160:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Set=void 0;const o=s(918),i=s(793),r=s(873),a=s(504),n=s(620),c=s(983);t.Set=class{orgHelper;configHelper;scms;constructor(){this.orgHelper=new n.OrgHelper,this.configHelper=new r.ConfigHelper,this.scms=new c.Scms}handle=async(e,t,s)=>{if("provisioning"!==e)throw new Error(`Unknown subcommand: ${e}`);await this.promptProvisioning(t,s)};promptProvisioning=async(e,t)=>{const{type:s}=t;if(!s)throw new Error("Missing provisioning type");if("scim"===s)return this.promptScimProvisioning(e,t);throw new Error(`Unknown provisioning type: ${s}`)};promptScimProvisioning=async(e,t)=>{const{org:s,repo:o}=await this.orgHelper.promptOrg("log in");a.ui.updateBottomBar("Fetching config...");const r=await this.configHelper.fetchConfigYaml(s,!0),n=(0,i.load)(r);if(!n.version)throw new Error("Missing version in config");let c;if("20220101"!==n.version)throw new Error(`Invalid config version: ${n.version}`);return c=await this.promptScimProvisioningV20220101(s,o,e,n,t.endpoint,t.token),c&&(await this.configHelper.fetchConfigYaml(s),a.ui.updateBottomBar(""),console.log("Configuration is valid!")),c};promptScimProvisioningV20220101=async(e,t,s,i,r,n)=>{if(!r||!n)throw new Error("Missing endpoint or token");const{providers:c}=i;if(!c)throw new Error("Missing providers in config");const u=c[s];if(!u)throw new Error(`Unknown provider: ${s}`);const l=this.scms.getGithubToken(),p=new o.IDPApi(new o.Configuration({accessToken:l}));a.ui.updateBottomBar("Encrypting token...");const{data:h}=await p.encrypt(e,{value:n}),{encryptedValue:d}=h;return u.provisioning={scim:{endpoint:r,encryptedToken:d}},this.configHelper.promptConfigUpdate(e,t,i,`${s}: set provisioning`)}}},460:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Show=void 0;const i=s(740),r=s(918),a=s(983),n=o(s(147)),c=o(s(17)),u=s(504),l=s(873),p=s(620);t.Show=class{scms;configHelper;orgHelper;constructor(){this.scms=new a.Scms,this.configHelper=new l.ConfigHelper,this.orgHelper=new p.OrgHelper}async handle(e,t,s,o,r,a){switch(e){case"orgs":return void await this.showOrgs(o);case"roles":return void await this.showRoles(t,s,r,o);case"logins":return void await this.showLogins(t,r,o)}if(!t&&!(t=this.scms.getOrg()))throw new Error(i.NO_ORG);switch(e){case"metadata":return this.showMetadata(t,o);case"certificate":return this.showCertificate(t,o);case"config":return this.showConfig(t,o,a);case"entityId":return this.showEntityId(t,o);case"loginUrl":return this.showLoginUrl(t,o);case"logoutUrl":return this.showLogoutUrl(t,o)}throw new Error(`Unknown subcommand: ${e}`)}async showConfig(e,t,s){const o=await this.configHelper.fetchConfigYaml(e,s);if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-config.yaml`);n.default.writeFileSync(t,o),u.ui.updateBottomBar(""),console.log(`Config saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(o)}async fetchEntityId(e){const t=this.scms.getGithubToken(),s=new r.IDPApi(new r.Configuration({accessToken:t})),{data:o}=await s.getOrgMetadata(e),{entityId:i}=o;return i}async fetchLoginUrl(e){const t=this.scms.getGithubToken(),s=new r.IDPApi(new r.Configuration({accessToken:t})),{data:o}=await s.getOrgMetadata(e),{loginUrl:i}=o;return i}async fetchLogoutUrl(e){const t=this.scms.getGithubToken(),s=new r.IDPApi(new r.Configuration({accessToken:t})),{data:o}=await s.getOrgMetadata(e),{logoutUrl:i}=o;return i}async fetchMetadataXml(e){const t=this.scms.getGithubToken(),s=new r.IDPApi(new r.Configuration({accessToken:t})),{data:o}=await s.getOrgMetadata(e),{metadataXml:i}=o;return i}async showMetadata(e,t){const s=await this.fetchMetadataXml(e);if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-metadata.xml`);n.default.writeFileSync(t,s),u.ui.updateBottomBar(""),console.log(`Metadata saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(s)}async showCertificate(e,t){const s=this.scms.getGithubToken(),o=new r.IDPApi(new r.Configuration({accessToken:s})),{data:i}=await o.getOrgMetadata(e),{certificate:l}=i;if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-certificate.pem`);n.default.writeFileSync(t,l),u.ui.updateBottomBar(""),console.log(`Certificate saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(l)}async showOrgs(e){const t=await this.orgHelper.fetchOrgs();if(e){const e=c.default.join(a.CONFIG_DIR,"orgs.json");n.default.writeFileSync(e,JSON.stringify({orgs:t})),u.ui.updateBottomBar(""),console.log(`Orgs saved to ${e}`)}else u.ui.updateBottomBar(""),t.length||console.log("No orgs"),console.table(t,["org"])}async fetchRoles(e,t,s){const o=this.scms.getGithubToken(),i=new r.IDPApi(new r.Configuration({accessToken:o})),{data:a}=await i.listRoles(e,t,s);return a.results}async showRoles(e,t,s,o){const i=await this.fetchRoles(e,t,s);if(o){const e=c.default.join(a.CONFIG_DIR,"roles.json");n.default.writeFileSync(e,JSON.stringify({roles:i})),u.ui.updateBottomBar(""),console.log(`Roles saved to ${e}`)}else{if(u.ui.updateBottomBar(""),!i.length)throw new Error("No roles are available to assume");console.table(i,["role","provider","org"])}}async fetchLogins(e,t){const s=this.scms.getGithubToken(),o=new r.IDPApi(new r.Configuration({accessToken:s})),{data:i}=await o.listLogins(e,t);return i.results}async showLogins(e,t,s){const o=await this.fetchLogins(e,t);if(s){const e=c.default.join(a.CONFIG_DIR,"logins.json");n.default.writeFileSync(e,JSON.stringify({logins:o})),u.ui.updateBottomBar(""),console.log(`Logins saved to ${e}`)}else{if(u.ui.updateBottomBar(""),!o.length)throw new Error("No providers are available to login");console.table(o,["provider","org"])}}async showEntityId(e,t){const s=await this.fetchEntityId(e);if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-entityId.json`);n.default.writeFileSync(t,JSON.stringify({entityId:s})),u.ui.updateBottomBar(""),console.log(`Entity ID saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(s)}async showLoginUrl(e,t){const s=await this.fetchLoginUrl(e);if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-loginUrl.json`);n.default.writeFileSync(t,JSON.stringify({loginUrl:s})),u.ui.updateBottomBar(""),console.log(`Entity ID saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(s)}async showLogoutUrl(e,t){const s=await this.fetchLogoutUrl(e);if(t){const t=c.default.join(a.CONFIG_DIR,`${e}-logoutUrl.json`);n.default.writeFileSync(t,JSON.stringify({logoutUrl:s})),u.ui.updateBottomBar(""),console.log(`Entity ID saved to ${t}`)}else u.ui.updateBottomBar(""),console.log(s)}}},479:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AwsHelper=void 0;const i=o(s(290)),r=s(504),a=s(873),n=s(543),c=s(625);t.AwsHelper=class{configHelper;genericHelper;constructor(){this.configHelper=new a.ConfigHelper,this.genericHelper=new n.GenericHelper}async promptProvider(e,t,s){if("20220101"===s.version)return this.promptProviderV20220101(e,t,s);throw new Error(`Unknown version ${s.version}`)}async promptProviderV20220101(e,t,s){if(s.providers&&s.providers.aws)throw new Error("An `aws` provider already exists, please manually edit the configuration to add another");if(s.variables&&s.variables.awsAccountId)throw new Error("An `awsAccountId` variable already exists, please manually edit the configuration to add this provider");r.ui.updateBottomBar("");const{accountId:o}=await i.default.prompt({type:"input",name:"accountId",message:"What is your AWS Account ID?"}),a={aws:{entityId:"https://signin.aws.amazon.com/saml",acsUrl:"https://signin.aws.amazon.com/saml",loginUrl:"https://signin.aws.amazon.com/saml",attributes:{"https://aws.amazon.com/SAML/Attributes/RoleSessionName":"<#= user.github.login #>","https://aws.amazon.com/SAML/Attributes/SessionDuration":"3600","https://aws.amazon.com/SAML/Attributes/Role":`<#= user.selectedRole #>,arn:aws:iam::${o}:saml-provider/saml.to`}}};s.providers={...s.providers||{},...a};const{addPermissions:n}=await i.default.prompt({type:"confirm",name:"addPermissions",message:"Would you like to grant any permissions to GitHub users now?"});return n?this.promptPermissionV20220101(e,t,s):this.configHelper.promptConfigUpdate(e,t,s,"aws: add provider")}async promptPermissionV20220101(e,t,s){let o;if(s.permissions=s.permissions||{},s.permissions.aws=s.permissions.aws||{},s.permissions.aws.roles=s.permissions.aws.roles||[],r.ui.updateBottomBar(""),o=(await i.default.prompt({type:"list",name:"roleArn",message:"What is role you would like to allow for assumption?",choices:[...s.permissions.aws.roles.map((e=>({name:e.name}))),{name:"Add another role",value:""}]})).roleArn,!o){const{arnInput:e}=await i.default.prompt({type:"input",name:"arnInput",message:"What is ARN of the new role you would like to allow for assumption?\n",validate:e=>!!e||(console.error("Invalid ARN!"),!1)});o=e}const a=await this.genericHelper.promptUsers("aws",o),n=s.permissions.aws.roles.findIndex((e=>e.name&&e.name.toLowerCase()===o.toLowerCase()));return-1===n?s.permissions.aws.roles.push({name:o,users:{github:a}}):s.permissions.aws.roles[n].users?s.permissions.aws.roles[n].users={...s.permissions.aws.roles[n].users,github:[...(s.permissions.aws.roles[n].users||{}).github||[],...a]}:s.permissions.aws.roles[n].users={github:a},this.configHelper.promptConfigUpdate(e,t,s,`aws: grant permissions to role ${o}\n\n${a.map((e=>`- ${e}`))}`)}async assumeAws(e){const t=new c.STS({}),s=e.sdkOptions;if(!s)throw new Error("Missing sdk options from saml response");const o=await t.assumeRoleWithSAML({...s,SAMLAssertion:e.samlResponse});if(!(o.Credentials&&o.Credentials.AccessKeyId&&o.Credentials.SecretAccessKey&&o.Credentials.SessionToken))throw new Error("Missing credentials");this.genericHelper.outputEnv({AWS_ACCESS_KEY_ID:o.Credentials.AccessKeyId,AWS_SECRET_ACCESS_KEY:o.Credentials.SecretAccessKey,AWS_SESSION_TOKEN:o.Credentials.SessionToken})}}},171:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AwsSsoHelper=void 0;const i=o(s(290)),r=s(504),a=s(873),n=s(543);t.AwsSsoHelper=class{configHelper;genericHelper;constructor(){this.configHelper=new a.ConfigHelper,this.genericHelper=new n.GenericHelper}async promptProvider(e,t,s){if("20220101"===s.version)return this.promptProviderV20220101(e,t,s);throw new Error(`Unknown version ${s.version}`)}async promptProviderV20220101(e,t,s){if(s.providers&&s.providers["aws-sso"])throw new Error("An `aws-sso` provider already exists, please manually edit the configuration to add another");r.ui.updateBottomBar("");const{loginUrl:o}=await i.default.prompt({type:"input",name:"loginUrl",message:"What is the AWS SSO Sign-in URL?"}),{acsUrl:a}=await i.default.prompt({type:"input",name:"acsUrl",message:"What is the AWS SSO ACS URL?"}),{entityId:n}=await i.default.prompt({type:"input",name:"entityId",message:"What is the AWS SSO issuer URL?"}),c={"aws-sso":{entityId:n,acsUrl:a,loginUrl:o,attributes:{}}};s.providers={...s.providers||{},...c};const{addPermissions:u}=await i.default.prompt({type:"confirm",name:"addPermissions",message:"Would you like to grant any permissions to GitHub users now?"});return u?this.promptPermissionV20220101(e,t,s):this.configHelper.promptConfigUpdate(e,t,s,"aws-sso: add provider")}async promptPermissionV20220101(e,t,s){s.permissions=s.permissions||{},s.permissions["aws-sso"]=s.permissions["aws-sso"]||{},s.permissions["aws-sso"].users=s.permissions["aws-sso"].users||{},s.permissions["aws-sso"].users.github=s.permissions["aws-sso"].users.github||[];const o=await this.genericHelper.promptUsers("aws-sso"),i=new Set([...s.permissions["aws-sso"].users.github,...o]);return s.permissions["aws-sso"].users.github=[...i],this.configHelper.promptConfigUpdate(e,t,s,`aws-sso: grant permissions to login\n\n${o.map((e=>`- ${e}`))}`)}}},873:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigHelper=void 0;const i=o(s(290)),r=s(793),a=s(740),n=s(983),c=s(504),u=s(400),l=s(918);t.ConfigHelper=class{scms;constructor(){this.scms=new n.Scms}async fetchConfigYaml(e,t=!1){c.ui.updateBottomBar("Fetching config...");const s=this.scms.getGithubToken(),o=new l.IDPApi(new l.Configuration({accessToken:s})),{data:i}=await o.getOrgConfig(e,t);return`---\n${(0,r.dump)(i)}`}async promptConfigUpdate(e,t,s,o){c.ui.updateBottomBar("");const a=`\n---\n# Config Reference: \n# https://docs.saml.to/configuration/reference\n${(0,r.dump)(s,{lineWidth:1024})}`;console.log(`Here is the updated \`${u.CONFIG_FILE}\` for ${e}/${t}:\n\n${a}\n\n`),c.ui.updateBottomBar("");const{type:n}=await i.default.prompt({type:"list",name:"type",message:`Would you like to push this configuration change to \`${e}/${t}\`?`,default:"nothing",choices:[{name:"Do not change anything",value:"nothing"},{name:`Commit directly to \`${e}/${t}\``,value:"commit"}]});return"nothing"===n?(c.ui.updateBottomBar(""),console.log("All done. No changes were made."),!1):("commit"===n&&await this.commitConfig(e,t,a,o),!0)}async commitConfig(e,t,s,o){c.ui.updateBottomBar(`Updating ${u.CONFIG_FILE} on ${e}/${t}`);const{github:i}=await this.scms.loadClients();if(!i)throw new Error(a.NO_GITHUB_CLIENT);let r;try{const s=await i.repos.getContent({owner:e,repo:t,path:u.CONFIG_FILE});s.data&&"content"in s.data&&(r=s.data.sha)}catch(e){}const{data:n}=await i.repos.createOrUpdateFileContents({owner:e,repo:t,path:u.CONFIG_FILE,message:o,content:Buffer.from(s,"utf8").toString("base64"),sha:r});c.ui.updateBottomBar(""),console.log(`Updated \`${u.CONFIG_FILE}\` on \`${e}/${t}\` (SHA: ${n.commit.sha})`)}}},543:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GenericHelper=t.trainCase=void 0;const i=o(s(290)),r=s(504),a=s(873),n=s(983);t.trainCase=e=>{if(!e)return"";const t=e.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);return t?t.map((e=>e.toLowerCase())).join("-"):""},t.GenericHelper=class{configHelper;scms;constructor(){this.configHelper=new a.ConfigHelper,this.scms=new n.Scms}async promptUsers(e,t,s){if(!s){r.ui.updateBottomBar("");const{addSelf:o}=await i.default.prompt({type:"confirm",name:"addSelf",message:`Would you like to grant yourself access to ${t?`assume \`${t}\``:`login to ${e}`}?\n  `});s=o?[await this.scms.getLogin()]:[]}r.ui.updateBottomBar("");const{user:o}=await i.default.prompt({type:"input",name:"user",message:`What is another Github ID of the user that will be allowed to ${t?`assume \`${t}\``:`login to ${e}`}? (Leave blank if finished adding users)\n`});return o?(s.push(o),this.promptUsers(e,t,[...new Set(s)])):s||[]}async promptProvider(e,s,o,a,n,c,u,l,p,h){if(r.ui.updateBottomBar(""),a||(a=(await i.default.prompt({type:"input",name:"name",message:"What is the name of the provider (e.g. AWS, Slack, Google)?"})).name),!a)throw new Error("Name is required");if("20220101"===o.version)return this.promptProviderV20220101((0,t.trainCase)(a),e,s,o,n,c,u,l,p,h);throw new Error(`Unknown version ${o.version}`)}async promptProviderV20220101(e,t,s,o,a,n,c,u,l,p){if(o.providers&&o.providers[e])throw new Error(`An provider named \`${e}\` already exists, please manually edit the configuration to add another`);let h;r.ui.updateBottomBar(""),a||(a=(await i.default.prompt({type:"input",name:"entityId",message:`What is the Entity ID for ${e}?`})).entityId),n||(n=(await i.default.prompt({type:"input",name:"acsUrl",message:`What is the Assertion Consumer Service (ACS) URL for ${e}?`})).acsUrl),c||(c=(await i.default.prompt({type:"input",name:"loginUrl",message:`What is the Login URL for ${e}?`})).loginUrl),l||(l=(await i.default.prompt({type:"list",name:"nameIdFormat",message:"(Optional) Does the provider need Name IDs in a particular format?\n  ",choices:[{name:"Persistent (GitHub User ID)",value:"id"},{name:"Transient (Github Login/Username)",value:"login"},{name:"Email (GitHub User Email)",value:"email"},{name:"None",value:"none"}]})).nameIdFormat),l&&"none"!==l&&(h=l),p&&0!==Object.keys(p).length||(p=await this.promptAttributes(o.variables||{}));const d={[`${e}`]:{entityId:a,loginUrl:c,nameId:u,nameIdFormat:h,acsUrl:n,attributes:p}};o.providers={...o.providers||{},...d};const{addPermissions:m}=await i.default.prompt({type:"confirm",name:"addPermissions",message:"Would you like to grant any permissions to GitHub users now?"});return m?this.promptPermissionV20220101(t,s,e,o):this.configHelper.promptConfigUpdate(t,s,o,`${e}: add provider`)}async promptPermissionV20220101(e,t,s,o){o.permissions=o.permissions||{},o.permissions[s]=o.permissions[s]||{},o.permissions[s].users=o.permissions[s].users||{},(o.permissions[s].users||{}).github=(o.permissions[s].users||{}).github||[];const i=await this.promptUsers(s),r=new Set([...(o.permissions[s].users||{}).github||[],...i]);return(o.permissions[s].users||{}).github=[...r],this.configHelper.promptConfigUpdate(e,t,o,`${s}: grant permissions to login\n\n${i.map((e=>`- ${e}`))}`)}outputEnv(e,t=process.platform){let s="export",o="=";switch(t){case"win32":s="setx";break;case"github":s="::set-output",o="::"}Object.entries(e).forEach((([e,t])=>{console.log(`${s} ${e}${o}"${t}"`)}))}async promptAttributes(e,t={}){const{attributeName:s}=await i.default.prompt({type:"input",name:"attributeName",message:"What is the name of an attribute should be sent to the Provider? (Leave blank if finished adding attributes)\n"});if(!s)return t;let{attributeValue:o}=await i.default.prompt({type:"list",name:"attributeValue",message:`What should be the value of \`${s}\`?\n`,choices:[{name:"Github User ID",value:"<#= user.github.id #>"},{name:"Github Login/Username",value:"<#= user.github.login #>"},{name:"Email Address",value:"<#= user.github.email #>"},{name:"Full Name",value:"<#= user.github.fullName #>"},{name:"First Name",value:"<#= user.github.firstName #>"},{name:"Last Name",value:"<#= user.github.lastName #>"},{name:"The selected role (for `assume` commands)",value:"<#= selectedRole #>"},{name:"Session ID (randomly generated for each login)",value:"<#= sessionId #>"},...Object.keys(e).map((e=>({name:`Variable: ${e}`,value:`<$= ${e} $>`}))),{name:"Other",value:"*_*_*_OTHER_*_*_*"}]});if("*_*_*_OTHER_*_*_*"===o){const{customValue:e}=await i.default.prompt({type:"input",name:"customValue",message:`What is the custom value of ${s}?\n`});o=e}return t[s]=o,this.promptAttributes(e,t)}}},23:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GithubHelper=void 0;const i=s(95),r=o(s(167)),a=o(s(245)),n=s(983),c=o(s(622)),u=s(740),l=s(504),p=s(942);t.GithubHelper=class{scms;constructor(){this.scms=new n.Scms}async promptLogin(e="user:email",t){const s=new i.JwtGithubApi,{data:o}=await s.getOauthDetail(),{clientId:n}=o,c=await r.default.post("https://github.com/login/device/code",{client_id:n,scope:e},{headers:{Accept:"application/json"}}),{verification_uri:u,user_code:h}=c.data;l.ui.updateBottomBar(""),console.log(`\nTo continue, access to your GitHub profile (with scope \`${e}\`) is needed...\n\nPlease open the browser to ${u}, and enter the code:\n\n${h}\n`);const d=await this.getAccessToken(n,c.data,(0,a.default)().add(c.data.expires_in,"second")),m=new p.Octokit({auth:d.access_token}),{data:g}=await m.users.getAuthenticated();if(t&&g.login!==t&&!(await m.paginate(m.orgs.listForAuthenticatedUser)).find((e=>e.login===t)))return l.ui.updateBottomBar(""),console.warn(`It appears access to ${t} has not beeen granted, let's try again...`),this.promptLogin(e,t);const f=this.scms.saveGithubToken(d.access_token);console.log(`Saved GitHub credentials to ${f}`)}getAccessToken(e,t,s){return new Promise(((o,i)=>{(0,a.default)().isSameOrAfter(s)?i(new Error("Access token request has expired. Please re-run the `login` command")):r.default.post("https://github.com/login/oauth/access_token",{client_id:e,device_code:t.device_code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"},{headers:{Accept:"application/json"}}).then((({data:r})=>{if(r.error)return"authorization_pending"===r.error?void setTimeout((()=>this.getAccessToken(e,t,s).then((e=>o(e))).catch((e=>i(e)))),1e3*t.interval):void i(new Error(r.error_description));o(r)})).catch((e=>i(e)))}))}async assertScope(e,t){let s;l.ui.updateBottomBar("Checking scopes...");try{s=(await this.scms.loadClients()).github}catch(s){if(s instanceof n.NoTokenError)return await this.promptLogin(e,t),this.assertScope(e,t);throw s}if(!s)throw new Error("Unable to load GitHub client");const{headers:o}=await s.users.getAuthenticated();try{this.assertScopes(o,e)}catch(s){if(s instanceof Error)return c.default.debug(s.message),l.ui.updateBottomBar(""),console.log((0,u.GITHUB_SCOPE_NEEDED)(e)),await this.promptLogin(e,t),this.assertScope(e,t);throw s}}assertScopes(e,t){const s=e["x-oauth-scopes"];c.default.debug("Current scopes:",s);const o=s.split(" ");if(!o.includes(t))throw new Error(`Missing scope. Expected:${t} Actual:${o}`)}}},620:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.OrgHelper=void 0;const i=o(s(290)),r=s(504),a=s(918),n=s(983);t.OrgHelper=class{scms;constructor(){this.scms=new n.Scms}async fetchOrgs(){const e=this.scms.getGithubToken(),t=new a.IDPApi(new a.Configuration({accessToken:e})),{data:s}=await t.listOrgRepos();return s.results}async promptOrg(e){const t=await this.fetchOrgs();if(!t.length)throw new Error("Please run the `init` command first");if(1===t.length)return t[0];r.ui.updateBottomBar("");const{orgIx:s}=await i.default.prompt({type:"list",name:"orgIx",message:`For which organization would you like to ${e}?`,choices:t.map(((e,t)=>({name:`${e.org} (${e.repo})`,value:t})))});return this.scms.getOrg()||this.scms.saveGithubOrg(t[s].org),t[s]}}},740:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.REPO_DOES_NOT_EXIST=t.GITHUB_SCOPE_NEEDED=t.GITHUB_ACCESS_NEEDED=t.UNSUPPORTED_REPO_URL=t.TERMINAL_NOT_SUPPORTED=t.MULTIPLE_LOGINS=t.MULTIPLE_ROLES=t.ERROR_LOGGING_IN=t.ERROR_ASSUMING_ROLE=t.ERROR_LOADING_FILE=t.NO_ORG=t.NO_GITHUB_CLIENT=void 0,t.NO_GITHUB_CLIENT="There was an unknown issue loading GitHub client libraries",t.NO_ORG="No organization is set, please use the `--org` flag and re-run the command",t.ERROR_LOADING_FILE=(e,t)=>`Error loading file: ${e}: ${t.message}.`,t.ERROR_ASSUMING_ROLE=(e,t)=>`Unable to assume ${e}. ${t}.`,t.ERROR_LOGGING_IN=(e,t)=>`Unable to login to ${e}. ${t}.`,t.MULTIPLE_ROLES=(e,s)=>(0,t.ERROR_ASSUMING_ROLE)(e,`${s}\n\nTip: Use an exact role name, and/or the \`--provider\` and \`--org\` flags to narrow down to a specific role.\nTip: Use the \`show roles\` command to show avalable roles`),t.MULTIPLE_LOGINS=(e,s)=>(0,t.ERROR_ASSUMING_ROLE)(e,`${s}\n\nTip: Use an exact org name, using the \`--org\` flag to narrow down to a specific organization.\nTip: Use the \`show logins\` command to show avalable roles`),t.TERMINAL_NOT_SUPPORTED=(e,t)=>`Role assumption using ${e} (${t}) is not supported by this CLI yet. However, you may request it as a feature: https://github.com/saml-to/cli/issues`,t.UNSUPPORTED_REPO_URL="Only the following repo URLs are supported: https://github.com/{org}/{repo}",t.GITHUB_ACCESS_NEEDED=(e,t)=>`To continue, access to scope '${t}' in '${e}' is needed`,t.GITHUB_SCOPE_NEEDED=e=>`To continue, scope '${e}' is needed`,t.REPO_DOES_NOT_EXIST=(e,t)=>`${e}/${t} does not exist. Please create it or specify a different repository.`},983:function(e,t,s){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Scms=t.NoTokenError=t.CONFIG_DIR=void 0;const i=s(942),r=o(s(37)),a=o(s(17)),n=o(s(147)),c=s(740),u=s(504);t.CONFIG_DIR=`${a.default.join(r.default.homedir(),".saml-to")}`;class l extends Error{constructor(){super("No token!")}}t.NoTokenError=l,t.Scms=class{githubFile;orgFile;constructor(e=t.CONFIG_DIR){this.githubFile=a.default.join(e,"github-token.json"),this.orgFile=a.default.join(e,"org.json"),n.default.existsSync(e)||n.default.mkdirSync(e)}async loadClients(){const e={};return e.github=this.getOctokit(),e}saveGithubOrg(e){return n.default.writeFileSync(this.orgFile,JSON.stringify({name:e,scm:"github"})),u.ui.updateBottomBar(""),console.log(`Default organization cached in: ${this.orgFile}`),this.orgFile}saveGithubToken(e){return n.default.writeFileSync(this.githubFile,JSON.stringify({token:e})),u.ui.updateBottomBar(""),console.log(`Token cached in: ${this.githubFile}`),this.githubFile}getGithubToken(){if(!n.default.existsSync(this.githubFile))throw new l;try{const{token:e}=JSON.parse(n.default.readFileSync(this.githubFile).toString());return e}catch(e){if(e instanceof Error)return u.ui.updateBottomBar(""),void console.warn((0,c.ERROR_LOADING_FILE)(this.githubFile,e));throw e}}getOrg(){if(n.default.existsSync(this.orgFile))try{const{name:e}=JSON.parse(n.default.readFileSync(this.orgFile).toString());return e}catch(e){if(e instanceof Error)return u.ui.updateBottomBar(""),void console.warn((0,c.ERROR_LOADING_FILE)(this.githubFile,e));throw e}}getOctokit(){const e=this.getGithubToken();if(e)return new i.Octokit({auth:e})}async getLogin(){const e=this.getGithubToken();if(!e)throw new Error("Unable to get token");const t=new i.Octokit({auth:e});u.ui.updateBottomBar("Fetching GitHub identity...");const{data:s}=await t.users.getAuthenticated();return s.login}}},625:e=>{e.exports=require("@aws-sdk/client-sts")},386:e=>{e.exports=require("@octokit/request-error")},942:e=>{e.exports=require("@octokit/rest")},167:e=>{e.exports=require("axios")},290:e=>{e.exports=require("inquirer")},793:e=>{e.exports=require("js-yaml")},622:e=>{e.exports=require("loglevel")},245:e=>{e.exports=require("moment")},634:e=>{e.exports=require("open")},760:e=>{e.exports=require("yargs")},758:e=>{e.exports=require("yargs/helpers")},147:e=>{e.exports=require("fs")},37:e=>{e.exports=require("os")},17:e=>{e.exports=require("path")}},t={};!function s(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,s),r.exports}(354)})();
//# sourceMappingURL=main.js.map