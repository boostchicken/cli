/* tslint:disable */
/* eslint-disable */
/**
 * github-sls-rest-api
 * To generate a JWT token, go to the <a href=\"https://sso.saml.to/auth/jwt.html\" target=\"_blank\">JWT Token Generator</a>
 *
 * The version of the OpenAPI document: 1.0.57-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GithubSlsRestApiAssumeBrowserResponse
 */
export interface GithubSlsRestApiAssumeBrowserResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAssumeBrowserResponse
     */
    'browserUri': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
 */
export interface GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1 {
    /**
     * 
     * @type {GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'version': GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum;
    /**
     * 
     * @type {GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'type': GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1
     */
    'login': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1TypeEnum {
    GithubLoginTokenEvent = 'GithubLoginTokenEvent'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum GithubSlsRestApiAuthSlsRestApiGithubLoginTokenEventV1VersionEnum {
    NUMBER_1 = 1
}

/**
 * 
 * @export
 * @interface GithubSlsRestApiAwsAssumeSdkOptions
 */
export interface GithubSlsRestApiAwsAssumeSdkOptions {
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiAwsAssumeSdkOptions
     */
    'DurationSeconds': number;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAwsAssumeSdkOptions
     */
    'RoleArn': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiAwsAssumeSdkOptions
     */
    'PrincipalArn': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiConfigBaseSupportedVersions
 */
export interface GithubSlsRestApiConfigBaseSupportedVersions {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'repo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'org'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'sha'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'path'?: string;
    /**
     * 
     * @type {GithubSlsRestApiSupportedVersions}
     * @memberof GithubSlsRestApiConfigBaseSupportedVersions
     */
    'version': GithubSlsRestApiSupportedVersions;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiConfigV20220101
 */
export interface GithubSlsRestApiConfigV20220101 {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'repo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'org'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'ref'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'sha'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'path'?: string;
    /**
     * 
     * @type {GithubSlsRestApiSupportedVersions}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'version': GithubSlsRestApiSupportedVersions;
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiPermissionV1; }}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'permissions'?: { [key: string]: GithubSlsRestApiPermissionV1; };
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiProviderV1; }}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'providers'?: { [key: string]: GithubSlsRestApiProviderV1; };
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiVariableV1; }}
     * @memberof GithubSlsRestApiConfigV20220101
     */
    'variables'?: { [key: string]: GithubSlsRestApiVariableV1; };
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiConfigV20220101AllOf
 */
export interface GithubSlsRestApiConfigV20220101AllOf {
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiPermissionV1; }}
     * @memberof GithubSlsRestApiConfigV20220101AllOf
     */
    'permissions'?: { [key: string]: GithubSlsRestApiPermissionV1; };
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiProviderV1; }}
     * @memberof GithubSlsRestApiConfigV20220101AllOf
     */
    'providers'?: { [key: string]: GithubSlsRestApiProviderV1; };
    /**
     * 
     * @type {{ [key: string]: GithubSlsRestApiVariableV1; }}
     * @memberof GithubSlsRestApiConfigV20220101AllOf
     */
    'variables'?: { [key: string]: GithubSlsRestApiVariableV1; };
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiEncryptRequest
 */
export interface GithubSlsRestApiEncryptRequest {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiEncryptRequest
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiEncryptResponse
 */
export interface GithubSlsRestApiEncryptResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiEncryptResponse
     */
    'encryptedValue': string;
}
/**
 * This file was automatically generated by joi-to-typescript Do not modify this file manually
 * @export
 * @interface GithubSlsRestApiEncryptedField
 */
export interface GithubSlsRestApiEncryptedField {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiEncryptedField
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiEncryptedField
     */
    'keyId': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiErrorResponse
 */
export interface GithubSlsRestApiErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiErrorResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiErrorResponse
     */
    'traceId': string;
    /**
     * 
     * @type {GithubSlsRestApiErrorResponseTracking}
     * @memberof GithubSlsRestApiErrorResponse
     */
    'tracking': GithubSlsRestApiErrorResponseTracking;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GithubSlsRestApiErrorResponse
     */
    'context'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiErrorResponseTracking
 */
export interface GithubSlsRestApiErrorResponseTracking {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiErrorResponseTracking
     */
    'method': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiErrorResponseTracking
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiErrorResponseTracking
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiGithubUserResponse
 */
export interface GithubSlsRestApiGithubUserResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiGithubUserResponse
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiHealthResponse
 */
export interface GithubSlsRestApiHealthResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiHealthResponse
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiHealthResponse
     */
    'now': string;
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiHealthResponse
     */
    'healty': boolean;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiHealthResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiIdentityResponse
 */
export interface GithubSlsRestApiIdentityResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'fullName': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiIdentityResponse
     */
    'clientId': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiListResponseLoginResponse
 */
export interface GithubSlsRestApiListResponseLoginResponse {
    /**
     * 
     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}
     * @memberof GithubSlsRestApiListResponseLoginResponse
     */
    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseLoginResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseLoginResponse
     */
    'count': number;
    /**
     * 
     * @type {Array<GithubSlsRestApiLoginResponse>}
     * @memberof GithubSlsRestApiListResponseLoginResponse
     */
    'results': Array<GithubSlsRestApiLoginResponse>;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiListResponseOrgRepoResponse
 */
export interface GithubSlsRestApiListResponseOrgRepoResponse {
    /**
     * 
     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponse
     */
    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponse
     */
    'count': number;
    /**
     * 
     * @type {Array<GithubSlsRestApiOrgRepoResponse>}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponse
     */
    'results': Array<GithubSlsRestApiOrgRepoResponse>;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiListResponseOrgRepoResponseNext
 */
export interface GithubSlsRestApiListResponseOrgRepoResponseNext {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponseNext
     */
    'sk': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiListResponseOrgRepoResponseNext
     */
    'pk': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiListResponseRoleResponse
 */
export interface GithubSlsRestApiListResponseRoleResponse {
    /**
     * 
     * @type {GithubSlsRestApiListResponseOrgRepoResponseNext}
     * @memberof GithubSlsRestApiListResponseRoleResponse
     */
    'next'?: GithubSlsRestApiListResponseOrgRepoResponseNext;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseRoleResponse
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiListResponseRoleResponse
     */
    'count': number;
    /**
     * 
     * @type {Array<GithubSlsRestApiRoleResponse>}
     * @memberof GithubSlsRestApiListResponseRoleResponse
     */
    'results': Array<GithubSlsRestApiRoleResponse>;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiLoginResponse
 */
export interface GithubSlsRestApiLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponse
     */
    'issuer': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponse
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponse
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponse
     */
    'org': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponse
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiLoginResponseContainer
 */
export interface GithubSlsRestApiLoginResponseContainer {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponseContainer
     */
    'browserUri': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponseContainer
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponseContainer
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginResponseContainer
     */
    'org': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiLoginToken
 */
export interface GithubSlsRestApiLoginToken {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'email'?: string;
    /**
     * 
     * @type {GithubSlsRestApiEncryptedField}
     * @memberof GithubSlsRestApiLoginToken
     */
    'encryptedToken': GithubSlsRestApiEncryptedField;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'namespace': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'pk': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'scopes'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiLoginToken
     */
    'sk': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiMetadataResponse
 */
export interface GithubSlsRestApiMetadataResponse {
    /**
     * 
     * @type {Array<GithubSlsRestApiGithubUserResponse>}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'admins': Array<GithubSlsRestApiGithubUserResponse>;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'certificate': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'logoutUrl': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'loginUrl': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'entityId': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiMetadataResponse
     */
    'metadataXml': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum GithubSlsRestApiNameIdFormatV1 {
    Id = 'id',
    Login = 'login',
    Email = 'email',
    EmailV2 = 'emailV2'
}

/**
 * This file was automatically generated by joi-to-typescript Do not modify this file manually
 * @export
 * @interface GithubSlsRestApiOrgRepo
 */
export interface GithubSlsRestApiOrgRepo {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'baseUrl': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'configSha'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'org': string;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'orgId': number;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'pk': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'repo': string;
    /**
     * 
     * @type {number}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'repoId': number;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepo
     */
    'sk': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiOrgRepoConfigRefreshResponse
 */
export interface GithubSlsRestApiOrgRepoConfigRefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'org': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'sha'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'dryrun': boolean;
    /**
     * 
     * @type {GithubSlsRestApiConfigV20220101}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponse
     */
    'config': GithubSlsRestApiConfigV20220101;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
 */
export interface GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
     */
    'branch'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
     */
    'sha'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
     */
    'dryrun': boolean;
    /**
     * 
     * @type {GithubSlsRestApiConfigV20220101}
     * @memberof GithubSlsRestApiOrgRepoConfigRefreshResponseAllOf
     */
    'config': GithubSlsRestApiConfigV20220101;
}
/**
 * This file was automatically generated by joi-to-typescript Do not modify this file manually
 * @export
 * @interface GithubSlsRestApiOrgRepoLogin
 */
export interface GithubSlsRestApiOrgRepoLogin {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoLogin
     */
    'login': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoLogin
     */
    'org': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoLogin
     */
    'pk': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoLogin
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoLogin
     */
    'sk': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiOrgRepoResponse
 */
export interface GithubSlsRestApiOrgRepoResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoResponse
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiOrgRepoResponse
     */
    'org': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiPermissionV1
 */
export interface GithubSlsRestApiPermissionV1 {
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiPermissionV1
     */
    'self'?: boolean;
    /**
     * 
     * @type {Array<GithubSlsRestApiRolesV1>}
     * @memberof GithubSlsRestApiPermissionV1
     */
    'roles'?: Array<GithubSlsRestApiRolesV1>;
    /**
     * 
     * @type {GithubSlsRestApiReposV1}
     * @memberof GithubSlsRestApiPermissionV1
     */
    'repos'?: GithubSlsRestApiReposV1;
    /**
     * 
     * @type {GithubSlsRestApiUsersV1}
     * @memberof GithubSlsRestApiPermissionV1
     */
    'users'?: GithubSlsRestApiUsersV1;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiProviderV1
 */
export interface GithubSlsRestApiProviderV1 {
    /**
     * 
     * @type {GithubSlsRestApiProvisioningV1}
     * @memberof GithubSlsRestApiProviderV1
     */
    'provisioning'?: GithubSlsRestApiProvisioningV1;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof GithubSlsRestApiProviderV1
     */
    'attributes'?: { [key: string]: string; };
    /**
     * 
     * @type {GithubSlsRestApiNameIdFormatV1}
     * @memberof GithubSlsRestApiProviderV1
     */
    'nameIdFormat'?: GithubSlsRestApiNameIdFormatV1;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiProviderV1
     */
    'nameId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiProviderV1
     */
    'loginUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiProviderV1
     */
    'acsUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiProviderV1
     */
    'entityId'?: string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiProvisioningV1
 */
export interface GithubSlsRestApiProvisioningV1 {
    /**
     * 
     * @type {GithubSlsRestApiScimV1}
     * @memberof GithubSlsRestApiProvisioningV1
     */
    'scim'?: GithubSlsRestApiScimV1;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiRepoV1
 */
export interface GithubSlsRestApiRepoV1 {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRepoV1
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiReposV1
 */
export interface GithubSlsRestApiReposV1 {
    /**
     * 
     * @type {Array<GithubSlsRestApiRepoV1>}
     * @memberof GithubSlsRestApiReposV1
     */
    'github'?: Array<GithubSlsRestApiRepoV1>;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiRoleResponse
 */
export interface GithubSlsRestApiRoleResponse {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'issuer': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'org': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRoleResponse
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiRolesV1
 */
export interface GithubSlsRestApiRolesV1 {
    /**
     * 
     * @type {boolean}
     * @memberof GithubSlsRestApiRolesV1
     */
    'self'?: boolean;
    /**
     * 
     * @type {GithubSlsRestApiReposV1}
     * @memberof GithubSlsRestApiRolesV1
     */
    'repos'?: GithubSlsRestApiReposV1;
    /**
     * 
     * @type {GithubSlsRestApiUsersV1}
     * @memberof GithubSlsRestApiRolesV1
     */
    'users'?: GithubSlsRestApiUsersV1;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiRolesV1
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiSamlResponseContainer
 */
export interface GithubSlsRestApiSamlResponseContainer {
    /**
     * 
     * @type {GithubSlsRestApiAwsAssumeSdkOptions}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'sdkOptions'?: GithubSlsRestApiAwsAssumeSdkOptions;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'browserUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'repo': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'org': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'attributes'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'samlResponse': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'relayState': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'recipient': string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiSamlResponseContainer
     */
    'issuer': string;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiScimV1
 */
export interface GithubSlsRestApiScimV1 {
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiScimV1
     */
    'encryptedToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubSlsRestApiScimV1
     */
    'endpoint'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum GithubSlsRestApiSupportedVersions {
    _20220101 = '20220101'
}

/**
 * 
 * @export
 * @interface GithubSlsRestApiUsersV1
 */
export interface GithubSlsRestApiUsersV1 {
    /**
     * 
     * @type {Array<string>}
     * @memberof GithubSlsRestApiUsersV1
     */
    'github'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GithubSlsRestApiVariableV1
 */
export interface GithubSlsRestApiVariableV1 {
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiHealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any): AxiosPromise<GithubSlsRestApiHealthResponse> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public get(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IDPApi - axios parameter creator
 * @export
 */
export const IDPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRole: async (role: string, org?: string, provider?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('assumeRole', 'role', role)
            const localVarPath = `/api/v1/idp/roles/{role}/assume`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRoleForBrowser: async (role: string, org?: string, provider?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('assumeRoleForBrowser', 'role', role)
            const localVarPath = `/api/v1/idp/roles/{role}/assume/browser`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {string} role 
         * @param {string} [provider] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRoleForRepo: async (org: string, repo: string, role: string, provider?: string, commitSha?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('assumeRoleForRepo', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('assumeRoleForRepo', 'repo', repo)
            // verify required parameter 'role' is not null or undefined
            assertParamExists('assumeRoleForRepo', 'role', role)
            const localVarPath = `/api/v1/idp/orgs/{org}/repos/{repo}/roles/{role}/assume`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (commitSha !== undefined) {
                localVarQueryParameter['commitSha'] = commitSha;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encrypt: async (org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('encrypt', 'org', org)
            // verify required parameter 'githubSlsRestApiEncryptRequest' is not null or undefined
            assertParamExists('encrypt', 'githubSlsRestApiEncryptRequest', githubSlsRestApiEncryptRequest)
            const localVarPath = `/api/v1/idp/orgs/{org}/encrypt`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(githubSlsRestApiEncryptRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/idp/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {boolean} [raw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgConfig: async (org: string, raw?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('getOrgConfig', 'org', org)
            const localVarPath = `/api/v1/idp/orgs/{org}/config`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMetadata: async (org: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('getOrgMetadata', 'org', org)
            const localVarPath = `/api/v1/idp/orgs/{org}/metadata`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [org] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogins: async (org?: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/idp/logins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgRepos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/idp/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: async (org?: string, provider?: string, refresh?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/idp/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }

            if (refresh !== undefined) {
                localVarQueryParameter['refresh'] = refresh;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} provider 
         * @param {string} [org] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providerLogin: async (provider: string, org?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('providerLogin', 'provider', provider)
            const localVarPath = `/api/v1/idp/logins/{provider}/login`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (org !== undefined) {
                localVarQueryParameter['org'] = org;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [dryrun] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshOrgRepoConfig: async (org: string, repo: string, dryrun?: boolean, commitSha?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('refreshOrgRepoConfig', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('refreshOrgRepoConfig', 'repo', repo)
            const localVarPath = `/api/v1/idp/orgs/{org}/repos/{repo}/config`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (dryrun !== undefined) {
                localVarQueryParameter['dryrun'] = dryrun;
            }

            if (commitSha !== undefined) {
                localVarQueryParameter['commitSha'] = commitSha;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrgAndRepo: async (org: string, repo: string, force?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'org' is not null or undefined
            assertParamExists('setOrgAndRepo', 'org', org)
            // verify required parameter 'repo' is not null or undefined
            assertParamExists('setOrgAndRepo', 'repo', repo)
            const localVarPath = `/api/v1/idp/orgs/{org}/repos/{repo}`
                .replace(`{${"org"}}`, encodeURIComponent(String(org)))
                .replace(`{${"repo"}}`, encodeURIComponent(String(repo)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IDPApi - functional programming interface
 * @export
 */
export const IDPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IDPApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assumeRole(role: string, org?: string, provider?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiSamlResponseContainer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assumeRole(role, org, provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assumeRoleForBrowser(role: string, org?: string, provider?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiAssumeBrowserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assumeRoleForBrowser(role, org, provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {string} role 
         * @param {string} [provider] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assumeRoleForRepo(org: string, repo: string, role: string, provider?: string, commitSha?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiSamlResponseContainer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assumeRoleForRepo(org, repo, role, provider, commitSha, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiEncryptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.encrypt(org, githubSlsRestApiEncryptRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentity(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiIdentityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentity(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {boolean} [raw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgConfig(org: string, raw?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiConfigV20220101>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgConfig(org, raw, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrgMetadata(org: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrgMetadata(org, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [org] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLogins(org?: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLogins(org, refresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrgRepos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseOrgRepoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrgRepos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoles(org?: string, provider?: string, refresh?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiListResponseRoleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(org, provider, refresh, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} provider 
         * @param {string} [org] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async providerLogin(provider: string, org?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiLoginResponseContainer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.providerLogin(provider, org, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [dryrun] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshOrgRepoConfig(org: string, repo: string, dryrun?: boolean, commitSha?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiOrgRepoConfigRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshOrgRepoConfig(org, repo, dryrun, commitSha, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOrgAndRepo(org: string, repo: string, force?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubSlsRestApiOrgRepoLogin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOrgAndRepo(org, repo, force, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IDPApi - factory interface
 * @export
 */
export const IDPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IDPApiFp(configuration)
    return {
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRole(role: string, org?: string, provider?: string, options?: any): AxiosPromise<GithubSlsRestApiSamlResponseContainer> {
            return localVarFp.assumeRole(role, org, provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} role 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRoleForBrowser(role: string, org?: string, provider?: string, options?: any): AxiosPromise<GithubSlsRestApiAssumeBrowserResponse> {
            return localVarFp.assumeRoleForBrowser(role, org, provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {string} role 
         * @param {string} [provider] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assumeRoleForRepo(org: string, repo: string, role: string, provider?: string, commitSha?: string, options?: any): AxiosPromise<GithubSlsRestApiSamlResponseContainer> {
            return localVarFp.assumeRoleForRepo(org, repo, role, provider, commitSha, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: any): AxiosPromise<GithubSlsRestApiEncryptResponse> {
            return localVarFp.encrypt(org, githubSlsRestApiEncryptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentity(options?: any): AxiosPromise<GithubSlsRestApiIdentityResponse> {
            return localVarFp.getIdentity(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {boolean} [raw] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgConfig(org: string, raw?: boolean, options?: any): AxiosPromise<GithubSlsRestApiConfigV20220101> {
            return localVarFp.getOrgConfig(org, raw, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgMetadata(org: string, options?: any): AxiosPromise<GithubSlsRestApiMetadataResponse> {
            return localVarFp.getOrgMetadata(org, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [org] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLogins(org?: string, refresh?: boolean, options?: any): AxiosPromise<GithubSlsRestApiListResponseLoginResponse> {
            return localVarFp.listLogins(org, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrgRepos(options?: any): AxiosPromise<GithubSlsRestApiListResponseOrgRepoResponse> {
            return localVarFp.listOrgRepos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [org] 
         * @param {string} [provider] 
         * @param {boolean} [refresh] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(org?: string, provider?: string, refresh?: boolean, options?: any): AxiosPromise<GithubSlsRestApiListResponseRoleResponse> {
            return localVarFp.listRoles(org, provider, refresh, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} provider 
         * @param {string} [org] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        providerLogin(provider: string, org?: string, options?: any): AxiosPromise<GithubSlsRestApiLoginResponseContainer> {
            return localVarFp.providerLogin(provider, org, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [dryrun] 
         * @param {string} [commitSha] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshOrgRepoConfig(org: string, repo: string, dryrun?: boolean, commitSha?: string, options?: any): AxiosPromise<GithubSlsRestApiOrgRepoConfigRefreshResponse> {
            return localVarFp.refreshOrgRepoConfig(org, repo, dryrun, commitSha, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} org 
         * @param {string} repo 
         * @param {boolean} [force] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrgAndRepo(org: string, repo: string, force?: boolean, options?: any): AxiosPromise<GithubSlsRestApiOrgRepoLogin> {
            return localVarFp.setOrgAndRepo(org, repo, force, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IDPApi - object-oriented interface
 * @export
 * @class IDPApi
 * @extends {BaseAPI}
 */
export class IDPApi extends BaseAPI {
    /**
     * 
     * @param {string} role 
     * @param {string} [org] 
     * @param {string} [provider] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public assumeRole(role: string, org?: string, provider?: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).assumeRole(role, org, provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} role 
     * @param {string} [org] 
     * @param {string} [provider] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public assumeRoleForBrowser(role: string, org?: string, provider?: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).assumeRoleForBrowser(role, org, provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {string} repo 
     * @param {string} role 
     * @param {string} [provider] 
     * @param {string} [commitSha] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public assumeRoleForRepo(org: string, repo: string, role: string, provider?: string, commitSha?: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).assumeRoleForRepo(org, repo, role, provider, commitSha, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {GithubSlsRestApiEncryptRequest} githubSlsRestApiEncryptRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public encrypt(org: string, githubSlsRestApiEncryptRequest: GithubSlsRestApiEncryptRequest, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).encrypt(org, githubSlsRestApiEncryptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public getIdentity(options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).getIdentity(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {boolean} [raw] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public getOrgConfig(org: string, raw?: boolean, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).getOrgConfig(org, raw, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public getOrgMetadata(org: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).getOrgMetadata(org, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [org] 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public listLogins(org?: string, refresh?: boolean, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).listLogins(org, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public listOrgRepos(options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).listOrgRepos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [org] 
     * @param {string} [provider] 
     * @param {boolean} [refresh] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public listRoles(org?: string, provider?: string, refresh?: boolean, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).listRoles(org, provider, refresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} provider 
     * @param {string} [org] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public providerLogin(provider: string, org?: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).providerLogin(provider, org, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {string} repo 
     * @param {boolean} [dryrun] 
     * @param {string} [commitSha] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public refreshOrgRepoConfig(org: string, repo: string, dryrun?: boolean, commitSha?: string, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).refreshOrgRepoConfig(org, repo, dryrun, commitSha, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} org 
     * @param {string} repo 
     * @param {boolean} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IDPApi
     */
    public setOrgAndRepo(org: string, repo: string, force?: boolean, options?: AxiosRequestConfig) {
        return IDPApiFp(this.configuration).setOrgAndRepo(org, repo, force, options).then((request) => request(this.axios, this.basePath));
    }
}


