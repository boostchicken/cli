/* tslint:disable */
/* eslint-disable */
/**
 * auth-sls-rest-api
 * To generate a JWT token, go to the <a href=\"https://sso.saml.to/auth/jwt.html\" target=\"_blank\">JWT Token Generator</a>
 *
 * The version of the OpenAPI document: 1.0.8-0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthSlsRestApiBaseEventGithubLoginTokenEvent1
 */
export interface AuthSlsRestApiBaseEventGithubLoginTokenEvent1 {
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiBaseEventGithubLoginTokenEvent1
     */
    'version': AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiBaseEventGithubLoginTokenEvent1
     */
    'type': AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiBaseEventGithubLoginTokenEvent1VersionEnum {
    NUMBER_1 = 1
}
/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiBaseEventGithubLoginTokenEvent1TypeEnum {
    GithubLoginTokenEvent = 'GithubLoginTokenEvent'
}

/**
 * 
 * @export
 * @interface AuthSlsRestApiBaseJwtPayload
 */
export interface AuthSlsRestApiBaseJwtPayload {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'jti': string;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'iat': number;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'nbf'?: number;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'exp': number;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'aud': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'sub': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiBaseJwtPayload
     */
    'iss': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiEmailLoginRequest
 */
export interface AuthSlsRestApiEmailLoginRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiEmailLoginRequest
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiEmailLoginRequestAllOf
 */
export interface AuthSlsRestApiEmailLoginRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginRequestAllOf
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginRequestAllOf
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiEmailLoginResponse
 */
export interface AuthSlsRestApiEmailLoginResponse {
    /**
     * 
     * @type {AuthSlsRestApiJwt}
     * @memberof AuthSlsRestApiEmailLoginResponse
     */
    'payload'?: AuthSlsRestApiJwt;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginResponse
     */
    'verificationSentTo'?: string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiEmailLoginResponseAllOf
 */
export interface AuthSlsRestApiEmailLoginResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEmailLoginResponseAllOf
     */
    'verificationSentTo'?: string;
}
/**
 * This file was automatically generated by joi-to-typescript Do not modify this file manually
 * @export
 * @interface AuthSlsRestApiEncryptedField
 */
export interface AuthSlsRestApiEncryptedField {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEncryptedField
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiEncryptedField
     */
    'keyId': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiErrorResponse
 */
export interface AuthSlsRestApiErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiErrorResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiErrorResponse
     */
    'traceId': string;
    /**
     * 
     * @type {AuthSlsRestApiErrorResponseTracking}
     * @memberof AuthSlsRestApiErrorResponse
     */
    'tracking': AuthSlsRestApiErrorResponseTracking;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthSlsRestApiErrorResponse
     */
    'context'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiErrorResponseTracking
 */
export interface AuthSlsRestApiErrorResponseTracking {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiErrorResponseTracking
     */
    'method': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiErrorResponseTracking
     */
    'path': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiErrorResponseTracking
     */
    'version': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubJwtRequest
 */
export interface AuthSlsRestApiGithubJwtRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubJwtRequest
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubJwtRequest
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubJwtRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubJwtRequestAllOf
 */
export interface AuthSlsRestApiGithubJwtRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubJwtRequestAllOf
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubJwtRequestAllOf
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubJwtResponse
 */
export interface AuthSlsRestApiGithubJwtResponse {
    /**
     * 
     * @type {AuthSlsRestApiJwt}
     * @memberof AuthSlsRestApiGithubJwtResponse
     */
    'payload'?: AuthSlsRestApiJwt;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubJwtResponse
     */
    'token'?: string;
    /**
     * 
     * @type {AuthSlsRestApiGithubUserResponse}
     * @memberof AuthSlsRestApiGithubJwtResponse
     */
    'user': AuthSlsRestApiGithubUserResponse;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubJwtResponseAllOf
 */
export interface AuthSlsRestApiGithubJwtResponseAllOf {
    /**
     * 
     * @type {AuthSlsRestApiGithubUserResponse}
     * @memberof AuthSlsRestApiGithubJwtResponseAllOf
     */
    'user': AuthSlsRestApiGithubUserResponse;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubLogin
 */
export interface AuthSlsRestApiGithubLogin {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'email'?: string;
    /**
     * 
     * @type {AuthSlsRestApiEncryptedField}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'encryptedToken'?: AuthSlsRestApiEncryptedField;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'expires'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'login'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'oauthRedirectUri': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'pk': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'redirectUri': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'scope': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'sk': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLogin
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubLoginRequest
 */
export interface AuthSlsRestApiGithubLoginRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubLoginRequest
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginRequest
     */
    'redirectUri': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginRequest
     */
    'scope'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginRequest
     */
    'clientId': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubLoginResponse
 */
export interface AuthSlsRestApiGithubLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginResponse
     */
    'expires'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginResponse
     */
    'oauthRedirectUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginResponse
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginResponse
     */
    'clientId': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubLoginTokenEventV1
 */
export interface AuthSlsRestApiGithubLoginTokenEventV1 {
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'version': AuthSlsRestApiGithubLoginTokenEventV1VersionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'type': AuthSlsRestApiGithubLoginTokenEventV1TypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1
     */
    'login': string;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiGithubLoginTokenEventV1VersionEnum {
    NUMBER_1 = 1
}
/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiGithubLoginTokenEventV1TypeEnum {
    GithubLoginTokenEvent = 'GithubLoginTokenEvent'
}

/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubLoginTokenEventV1AllOf
 */
export interface AuthSlsRestApiGithubLoginTokenEventV1AllOf {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf
     */
    'deleted'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubLoginTokenEventV1AllOf
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubOauthDetail
 */
export interface AuthSlsRestApiGithubOauthDetail {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubOauthDetail
     */
    'clientId': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubTokenExchangeRequest
 */
export interface AuthSlsRestApiGithubTokenExchangeRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubTokenExchangeRequest
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubTokenExchangeRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubTokenExchangeRequestAllOf
 */
export interface AuthSlsRestApiGithubTokenExchangeRequestAllOf {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubTokenExchangeRequestAllOf
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiGithubUserResponse
 */
export interface AuthSlsRestApiGithubUserResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'redirectUri'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'remember'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiGithubUserResponse
     */
    'login': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiHealthResponse
 */
export interface AuthSlsRestApiHealthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiHealthResponse
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiHealthResponse
     */
    'now': string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiHealthResponse
     */
    'healty': boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiHealthResponse
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiJwk
 */
export interface AuthSlsRestApiJwk {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwk
     */
    'kty': AuthSlsRestApiJwkKtyEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwk
     */
    'crv': AuthSlsRestApiJwkCrvEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwk
     */
    'y': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwk
     */
    'd'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiJwkKtyEnum {
    Ec = 'EC'
}
/**
    * @export
    * @enum {string}
    */
export enum AuthSlsRestApiJwkCrvEnum {
    P256 = 'P-256'
}

/**
 * 
 * @export
 * @interface AuthSlsRestApiJwksResponse
 */
export interface AuthSlsRestApiJwksResponse {
    /**
     * 
     * @type {Array<AuthSlsRestApiJwk>}
     * @memberof AuthSlsRestApiJwksResponse
     */
    'keys': Array<AuthSlsRestApiJwk>;
}
/**
 * This file was automatically generated by joi-to-typescript Do not modify this file manually
 * @export
 * @interface AuthSlsRestApiJwt
 */
export interface AuthSlsRestApiJwt {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'aud': string;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiJwt
     */
    'exp': number;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiJwt
     */
    'expires': number;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiJwt
     */
    'iat': number;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'iss': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'jti': string;
    /**
     * 
     * @type {number}
     * @memberof AuthSlsRestApiJwt
     */
    'nbf'?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'pk': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'scopes': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'sk': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwt
     */
    'sub': string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiJwtRequest
 */
export interface AuthSlsRestApiJwtRequest {
    /**
     * 
     * @type {boolean}
     * @memberof AuthSlsRestApiJwtRequest
     */
    'remember'?: boolean;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiJwtResponse
 */
export interface AuthSlsRestApiJwtResponse {
    /**
     * 
     * @type {AuthSlsRestApiJwt}
     * @memberof AuthSlsRestApiJwtResponse
     */
    'payload'?: AuthSlsRestApiJwt;
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiJwtResponse
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface AuthSlsRestApiTokenRequest
 */
export interface AuthSlsRestApiTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthSlsRestApiTokenRequest
     */
    'token': string;
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiHealthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(options?: any): AxiosPromise<AuthSlsRestApiHealthResponse> {
            return localVarFp.get(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public get(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).get(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JwtApi - axios parameter creator
 * @export
 */
export const JwtApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jwts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jwts/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh: async (authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined
            assertParamExists('refresh', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest)
            const localVarPath = `/api/v1/jwts/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify: async (authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiTokenRequest' is not null or undefined
            assertParamExists('verify', 'authSlsRestApiTokenRequest', authSlsRestApiTokenRequest)
            const localVarPath = `/api/v1/jwts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JwtApi - functional programming interface
 * @export
 */
export const JwtApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JwtApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async certs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.certs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayload(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiBaseJwtPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayload(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(authSlsRestApiTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiBaseJwtPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verify(authSlsRestApiTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JwtApi - factory interface
 * @export
 */
export const JwtApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JwtApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        certs(options?: any): AxiosPromise<AuthSlsRestApiJwksResponse> {
            return localVarFp.certs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayload(options?: any): AxiosPromise<AuthSlsRestApiBaseJwtPayload> {
            return localVarFp.getPayload(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {
            return localVarFp.refresh(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: any): AxiosPromise<AuthSlsRestApiBaseJwtPayload> {
            return localVarFp.verify(authSlsRestApiTokenRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JwtApi - object-oriented interface
 * @export
 * @class JwtApi
 * @extends {BaseAPI}
 */
export class JwtApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    public certs(options?: AxiosRequestConfig) {
        return JwtApiFp(this.configuration).certs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    public getPayload(options?: AxiosRequestConfig) {
        return JwtApiFp(this.configuration).getPayload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    public refresh(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig) {
        return JwtApiFp(this.configuration).refresh(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSlsRestApiTokenRequest} authSlsRestApiTokenRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtApi
     */
    public verify(authSlsRestApiTokenRequest: AuthSlsRestApiTokenRequest, options?: AxiosRequestConfig) {
        return JwtApiFp(this.configuration).verify(authSlsRestApiTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JwtEmailApi - axios parameter creator
 * @export
 */
export const JwtEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmail: async (authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiEmailLoginRequest' is not null or undefined
            assertParamExists('loginWithEmail', 'authSlsRestApiEmailLoginRequest', authSlsRestApiEmailLoginRequest)
            const localVarPath = `/api/v1/jwts/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiEmailLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JwtEmailApi - functional programming interface
 * @export
 */
export const JwtEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JwtEmailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginWithEmail(authSlsRestApiEmailLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JwtEmailApi - factory interface
 * @export
 */
export const JwtEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JwtEmailApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {
            return localVarFp.loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JwtEmailApi - object-oriented interface
 * @export
 * @class JwtEmailApi
 * @extends {BaseAPI}
 */
export class JwtEmailApi extends BaseAPI {
    /**
     * 
     * @param {AuthSlsRestApiEmailLoginRequest} authSlsRestApiEmailLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtEmailApi
     */
    public loginWithEmail(authSlsRestApiEmailLoginRequest: AuthSlsRestApiEmailLoginRequest, options?: AxiosRequestConfig) {
        return JwtEmailApiFp(this.configuration).loginWithEmail(authSlsRestApiEmailLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JwtGithubApi - axios parameter creator
 * @export
 */
export const JwtGithubApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogin: async (authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiGithubLoginRequest' is not null or undefined
            assertParamExists('createLogin', 'authSlsRestApiGithubLoginRequest', authSlsRestApiGithubLoginRequest)
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiGithubLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubTokenExchangeRequest} authSlsRestApiGithubTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeToken: async (authSlsRestApiGithubTokenExchangeRequest: AuthSlsRestApiGithubTokenExchangeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiGithubTokenExchangeRequest' is not null or undefined
            assertParamExists('exchangeToken', 'authSlsRestApiGithubTokenExchangeRequest', authSlsRestApiGithubTokenExchangeRequest)
            const localVarPath = `/api/v1/jwts/github/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiGithubTokenExchangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jwts/github/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback: async (authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSlsRestApiGithubJwtRequest' is not null or undefined
            assertParamExists('oauthCallback', 'authSlsRestApiGithubJwtRequest', authSlsRestApiGithubJwtRequest)
            const localVarPath = `/api/v1/jwts/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSlsRestApiGithubJwtRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JwtGithubApi - functional programming interface
 * @export
 */
export const JwtGithubApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JwtGithubApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLogin(authSlsRestApiGithubLoginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubTokenExchangeRequest} authSlsRestApiGithubTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exchangeToken(authSlsRestApiGithubTokenExchangeRequest: AuthSlsRestApiGithubTokenExchangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exchangeToken(authSlsRestApiGithubTokenExchangeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthenticatedUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOauthDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiGithubOauthDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOauthDetail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSlsRestApiJwtResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.oauthCallback(authSlsRestApiGithubJwtRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JwtGithubApi - factory interface
 * @export
 */
export const JwtGithubApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JwtGithubApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: any): AxiosPromise<AuthSlsRestApiGithubLoginResponse> {
            return localVarFp.createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubTokenExchangeRequest} authSlsRestApiGithubTokenExchangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exchangeToken(authSlsRestApiGithubTokenExchangeRequest: AuthSlsRestApiGithubTokenExchangeRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {
            return localVarFp.exchangeToken(authSlsRestApiGithubTokenExchangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthenticatedUser(options?: any): AxiosPromise<AuthSlsRestApiGithubUserResponse> {
            return localVarFp.getAuthenticatedUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOauthDetail(options?: any): AxiosPromise<AuthSlsRestApiGithubOauthDetail> {
            return localVarFp.getOauthDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: any): AxiosPromise<AuthSlsRestApiJwtResponse> {
            return localVarFp.oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JwtGithubApi - object-oriented interface
 * @export
 * @class JwtGithubApi
 * @extends {BaseAPI}
 */
export class JwtGithubApi extends BaseAPI {
    /**
     * 
     * @param {AuthSlsRestApiGithubLoginRequest} authSlsRestApiGithubLoginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    public createLogin(authSlsRestApiGithubLoginRequest: AuthSlsRestApiGithubLoginRequest, options?: AxiosRequestConfig) {
        return JwtGithubApiFp(this.configuration).createLogin(authSlsRestApiGithubLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSlsRestApiGithubTokenExchangeRequest} authSlsRestApiGithubTokenExchangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    public exchangeToken(authSlsRestApiGithubTokenExchangeRequest: AuthSlsRestApiGithubTokenExchangeRequest, options?: AxiosRequestConfig) {
        return JwtGithubApiFp(this.configuration).exchangeToken(authSlsRestApiGithubTokenExchangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    public getAuthenticatedUser(options?: AxiosRequestConfig) {
        return JwtGithubApiFp(this.configuration).getAuthenticatedUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    public getOauthDetail(options?: AxiosRequestConfig) {
        return JwtGithubApiFp(this.configuration).getOauthDetail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthSlsRestApiGithubJwtRequest} authSlsRestApiGithubJwtRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JwtGithubApi
     */
    public oauthCallback(authSlsRestApiGithubJwtRequest: AuthSlsRestApiGithubJwtRequest, options?: AxiosRequestConfig) {
        return JwtGithubApiFp(this.configuration).oauthCallback(authSlsRestApiGithubJwtRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


